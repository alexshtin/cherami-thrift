// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package controller

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/cherami-thrift/.generated/go/shared"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = shared.GoUnusedProtection__
var GoUnusedProtection__ int

type SKU int64

const (
	SKU_Machine1 SKU = 0
)

func (p SKU) String() string {
	switch p {
	case SKU_Machine1:
		return "Machine1"
	}
	return "<UNSET>"
}

func SKUFromString(s string) (SKU, error) {
	switch s {
	case "Machine1":
		return SKU_Machine1, nil
	}
	return SKU(0), fmt.Errorf("not a valid SKU string")
}

func SKUPtr(v SKU) *SKU { return &v }

func (p SKU) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SKU) UnmarshalText(text []byte) error {
	q, err := SKUFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type Role int64

const (
	Role_IN    Role = 0
	Role_OUT   Role = 1
	Role_STORE Role = 2
)

func (p Role) String() string {
	switch p {
	case Role_IN:
		return "IN"
	case Role_OUT:
		return "OUT"
	case Role_STORE:
		return "STORE"
	}
	return "<UNSET>"
}

func RoleFromString(s string) (Role, error) {
	switch s {
	case "IN":
		return Role_IN, nil
	case "OUT":
		return Role_OUT, nil
	case "STORE":
		return Role_STORE, nil
	}
	return Role(0), fmt.Errorf("not a valid Role string")
}

func RolePtr(v Role) *Role { return &v }

func (p Role) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Role) UnmarshalText(text []byte) error {
	q, err := RoleFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Attributes:
//  - Message
type QueueCacheMissError struct {
	Message string `thrift:"message,1,required" json:"message"`
}

func NewQueueCacheMissError() *QueueCacheMissError {
	return &QueueCacheMissError{}
}

func (p *QueueCacheMissError) GetMessage() string {
	return p.Message
}
func (p *QueueCacheMissError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMessage bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetMessage = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMessage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"))
	}
	return nil
}

func (p *QueueCacheMissError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *QueueCacheMissError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueueCacheMissError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueueCacheMissError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *QueueCacheMissError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueueCacheMissError(%+v)", *p)
}

func (p *QueueCacheMissError) Error() string {
	return p.String()
}

// Attributes:
//  - DestinationUUID
type GetInputHostsRequest struct {
	DestinationUUID *string `thrift:"destinationUUID,1" json:"destinationUUID,omitempty"`
}

func NewGetInputHostsRequest() *GetInputHostsRequest {
	return &GetInputHostsRequest{}
}

var GetInputHostsRequest_DestinationUUID_DEFAULT string

func (p *GetInputHostsRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return GetInputHostsRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}
func (p *GetInputHostsRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *GetInputHostsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetInputHostsRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *GetInputHostsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetInputHostsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetInputHostsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *GetInputHostsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetInputHostsRequest(%+v)", *p)
}

// Attributes:
//  - InputHostIds
type GetInputHostsResult_ struct {
	InputHostIds []string `thrift:"inputHostIds,1" json:"inputHostIds,omitempty"`
}

func NewGetInputHostsResult_() *GetInputHostsResult_ {
	return &GetInputHostsResult_{}
}

var GetInputHostsResult__InputHostIds_DEFAULT []string

func (p *GetInputHostsResult_) GetInputHostIds() []string {
	return p.InputHostIds
}
func (p *GetInputHostsResult_) IsSetInputHostIds() bool {
	return p.InputHostIds != nil
}

func (p *GetInputHostsResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetInputHostsResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.InputHostIds = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.InputHostIds = append(p.InputHostIds, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GetInputHostsResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetInputHostsResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetInputHostsResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputHostIds() {
		if err := oprot.WriteFieldBegin("inputHostIds", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inputHostIds: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.InputHostIds)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.InputHostIds {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inputHostIds: ", p), err)
		}
	}
	return err
}

func (p *GetInputHostsResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetInputHostsResult_(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - ConsumerGroupUUID
type GetOutputHostsRequest struct {
	DestinationUUID   *string `thrift:"destinationUUID,1" json:"destinationUUID,omitempty"`
	ConsumerGroupUUID *string `thrift:"consumerGroupUUID,2" json:"consumerGroupUUID,omitempty"`
}

func NewGetOutputHostsRequest() *GetOutputHostsRequest {
	return &GetOutputHostsRequest{}
}

var GetOutputHostsRequest_DestinationUUID_DEFAULT string

func (p *GetOutputHostsRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return GetOutputHostsRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var GetOutputHostsRequest_ConsumerGroupUUID_DEFAULT string

func (p *GetOutputHostsRequest) GetConsumerGroupUUID() string {
	if !p.IsSetConsumerGroupUUID() {
		return GetOutputHostsRequest_ConsumerGroupUUID_DEFAULT
	}
	return *p.ConsumerGroupUUID
}
func (p *GetOutputHostsRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *GetOutputHostsRequest) IsSetConsumerGroupUUID() bool {
	return p.ConsumerGroupUUID != nil
}

func (p *GetOutputHostsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetOutputHostsRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *GetOutputHostsRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ConsumerGroupUUID = &v
	}
	return nil
}

func (p *GetOutputHostsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetOutputHostsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetOutputHostsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *GetOutputHostsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupUUID() {
		if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupUUID: ", p), err)
		}
	}
	return err
}

func (p *GetOutputHostsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOutputHostsRequest(%+v)", *p)
}

// Attributes:
//  - OutputHostIds
type GetOutputHostsResult_ struct {
	OutputHostIds []string `thrift:"outputHostIds,1" json:"outputHostIds,omitempty"`
}

func NewGetOutputHostsResult_() *GetOutputHostsResult_ {
	return &GetOutputHostsResult_{}
}

var GetOutputHostsResult__OutputHostIds_DEFAULT []string

func (p *GetOutputHostsResult_) GetOutputHostIds() []string {
	return p.OutputHostIds
}
func (p *GetOutputHostsResult_) IsSetOutputHostIds() bool {
	return p.OutputHostIds != nil
}

func (p *GetOutputHostsResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetOutputHostsResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.OutputHostIds = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.OutputHostIds = append(p.OutputHostIds, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GetOutputHostsResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetOutputHostsResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetOutputHostsResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputHostIds() {
		if err := oprot.WriteFieldBegin("outputHostIds", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:outputHostIds: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.OutputHostIds)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.OutputHostIds {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:outputHostIds: ", p), err)
		}
	}
	return err
}

func (p *GetOutputHostsResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOutputHostsResult_(%+v)", *p)
}

// Attributes:
//  - CPU
//  - Memory
//  - RemainingDiskSpace
//  - NumberOfActiveExtents
//  - NumberOfConnections
//  - IncomingMessagesCounter
//  - OutgoingMessagesCounter
//  - IncomingBytesCounter
//  - OutgoingBytesCounter
type NodeMetrics struct {
	CPU                     *int64 `thrift:"cpu,1" json:"cpu,omitempty"`
	Memory                  *int64 `thrift:"memory,2" json:"memory,omitempty"`
	RemainingDiskSpace      *int64 `thrift:"remainingDiskSpace,3" json:"remainingDiskSpace,omitempty"`
	NumberOfActiveExtents   *int64 `thrift:"numberOfActiveExtents,4" json:"numberOfActiveExtents,omitempty"`
	NumberOfConnections     *int64 `thrift:"numberOfConnections,5" json:"numberOfConnections,omitempty"`
	IncomingMessagesCounter *int64 `thrift:"incomingMessagesCounter,6" json:"incomingMessagesCounter,omitempty"`
	OutgoingMessagesCounter *int64 `thrift:"outgoingMessagesCounter,7" json:"outgoingMessagesCounter,omitempty"`
	IncomingBytesCounter    *int64 `thrift:"incomingBytesCounter,8" json:"incomingBytesCounter,omitempty"`
	OutgoingBytesCounter    *int64 `thrift:"outgoingBytesCounter,9" json:"outgoingBytesCounter,omitempty"`
}

func NewNodeMetrics() *NodeMetrics {
	return &NodeMetrics{}
}

var NodeMetrics_CPU_DEFAULT int64

func (p *NodeMetrics) GetCPU() int64 {
	if !p.IsSetCPU() {
		return NodeMetrics_CPU_DEFAULT
	}
	return *p.CPU
}

var NodeMetrics_Memory_DEFAULT int64

func (p *NodeMetrics) GetMemory() int64 {
	if !p.IsSetMemory() {
		return NodeMetrics_Memory_DEFAULT
	}
	return *p.Memory
}

var NodeMetrics_RemainingDiskSpace_DEFAULT int64

func (p *NodeMetrics) GetRemainingDiskSpace() int64 {
	if !p.IsSetRemainingDiskSpace() {
		return NodeMetrics_RemainingDiskSpace_DEFAULT
	}
	return *p.RemainingDiskSpace
}

var NodeMetrics_NumberOfActiveExtents_DEFAULT int64

func (p *NodeMetrics) GetNumberOfActiveExtents() int64 {
	if !p.IsSetNumberOfActiveExtents() {
		return NodeMetrics_NumberOfActiveExtents_DEFAULT
	}
	return *p.NumberOfActiveExtents
}

var NodeMetrics_NumberOfConnections_DEFAULT int64

func (p *NodeMetrics) GetNumberOfConnections() int64 {
	if !p.IsSetNumberOfConnections() {
		return NodeMetrics_NumberOfConnections_DEFAULT
	}
	return *p.NumberOfConnections
}

var NodeMetrics_IncomingMessagesCounter_DEFAULT int64

func (p *NodeMetrics) GetIncomingMessagesCounter() int64 {
	if !p.IsSetIncomingMessagesCounter() {
		return NodeMetrics_IncomingMessagesCounter_DEFAULT
	}
	return *p.IncomingMessagesCounter
}

var NodeMetrics_OutgoingMessagesCounter_DEFAULT int64

func (p *NodeMetrics) GetOutgoingMessagesCounter() int64 {
	if !p.IsSetOutgoingMessagesCounter() {
		return NodeMetrics_OutgoingMessagesCounter_DEFAULT
	}
	return *p.OutgoingMessagesCounter
}

var NodeMetrics_IncomingBytesCounter_DEFAULT int64

func (p *NodeMetrics) GetIncomingBytesCounter() int64 {
	if !p.IsSetIncomingBytesCounter() {
		return NodeMetrics_IncomingBytesCounter_DEFAULT
	}
	return *p.IncomingBytesCounter
}

var NodeMetrics_OutgoingBytesCounter_DEFAULT int64

func (p *NodeMetrics) GetOutgoingBytesCounter() int64 {
	if !p.IsSetOutgoingBytesCounter() {
		return NodeMetrics_OutgoingBytesCounter_DEFAULT
	}
	return *p.OutgoingBytesCounter
}
func (p *NodeMetrics) IsSetCPU() bool {
	return p.CPU != nil
}

func (p *NodeMetrics) IsSetMemory() bool {
	return p.Memory != nil
}

func (p *NodeMetrics) IsSetRemainingDiskSpace() bool {
	return p.RemainingDiskSpace != nil
}

func (p *NodeMetrics) IsSetNumberOfActiveExtents() bool {
	return p.NumberOfActiveExtents != nil
}

func (p *NodeMetrics) IsSetNumberOfConnections() bool {
	return p.NumberOfConnections != nil
}

func (p *NodeMetrics) IsSetIncomingMessagesCounter() bool {
	return p.IncomingMessagesCounter != nil
}

func (p *NodeMetrics) IsSetOutgoingMessagesCounter() bool {
	return p.OutgoingMessagesCounter != nil
}

func (p *NodeMetrics) IsSetIncomingBytesCounter() bool {
	return p.IncomingBytesCounter != nil
}

func (p *NodeMetrics) IsSetOutgoingBytesCounter() bool {
	return p.OutgoingBytesCounter != nil
}

func (p *NodeMetrics) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NodeMetrics) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CPU = &v
	}
	return nil
}

func (p *NodeMetrics) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Memory = &v
	}
	return nil
}

func (p *NodeMetrics) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RemainingDiskSpace = &v
	}
	return nil
}

func (p *NodeMetrics) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NumberOfActiveExtents = &v
	}
	return nil
}

func (p *NodeMetrics) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.NumberOfConnections = &v
	}
	return nil
}

func (p *NodeMetrics) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.IncomingMessagesCounter = &v
	}
	return nil
}

func (p *NodeMetrics) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.OutgoingMessagesCounter = &v
	}
	return nil
}

func (p *NodeMetrics) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.IncomingBytesCounter = &v
	}
	return nil
}

func (p *NodeMetrics) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.OutgoingBytesCounter = &v
	}
	return nil
}

func (p *NodeMetrics) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NodeMetrics"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NodeMetrics) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCPU() {
		if err := oprot.WriteFieldBegin("cpu", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cpu: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CPU)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cpu (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cpu: ", p), err)
		}
	}
	return err
}

func (p *NodeMetrics) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemory() {
		if err := oprot.WriteFieldBegin("memory", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:memory: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Memory)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.memory (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:memory: ", p), err)
		}
	}
	return err
}

func (p *NodeMetrics) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemainingDiskSpace() {
		if err := oprot.WriteFieldBegin("remainingDiskSpace", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:remainingDiskSpace: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RemainingDiskSpace)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.remainingDiskSpace (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:remainingDiskSpace: ", p), err)
		}
	}
	return err
}

func (p *NodeMetrics) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumberOfActiveExtents() {
		if err := oprot.WriteFieldBegin("numberOfActiveExtents", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:numberOfActiveExtents: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NumberOfActiveExtents)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.numberOfActiveExtents (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:numberOfActiveExtents: ", p), err)
		}
	}
	return err
}

func (p *NodeMetrics) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumberOfConnections() {
		if err := oprot.WriteFieldBegin("numberOfConnections", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:numberOfConnections: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NumberOfConnections)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.numberOfConnections (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:numberOfConnections: ", p), err)
		}
	}
	return err
}

func (p *NodeMetrics) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncomingMessagesCounter() {
		if err := oprot.WriteFieldBegin("incomingMessagesCounter", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:incomingMessagesCounter: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.IncomingMessagesCounter)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.incomingMessagesCounter (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:incomingMessagesCounter: ", p), err)
		}
	}
	return err
}

func (p *NodeMetrics) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutgoingMessagesCounter() {
		if err := oprot.WriteFieldBegin("outgoingMessagesCounter", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:outgoingMessagesCounter: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.OutgoingMessagesCounter)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.outgoingMessagesCounter (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:outgoingMessagesCounter: ", p), err)
		}
	}
	return err
}

func (p *NodeMetrics) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncomingBytesCounter() {
		if err := oprot.WriteFieldBegin("incomingBytesCounter", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:incomingBytesCounter: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.IncomingBytesCounter)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.incomingBytesCounter (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:incomingBytesCounter: ", p), err)
		}
	}
	return err
}

func (p *NodeMetrics) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutgoingBytesCounter() {
		if err := oprot.WriteFieldBegin("outgoingBytesCounter", thrift.I64, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:outgoingBytesCounter: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.OutgoingBytesCounter)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.outgoingBytesCounter (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:outgoingBytesCounter: ", p), err)
		}
	}
	return err
}

func (p *NodeMetrics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NodeMetrics(%+v)", *p)
}

// Attributes:
//  - NumberOfActiveExtents
//  - NumberOfConnections
//  - IncomingMessagesCounter
//  - IncomingBytesCounter
type DestinationMetrics struct {
	NumberOfActiveExtents   *int64 `thrift:"numberOfActiveExtents,1" json:"numberOfActiveExtents,omitempty"`
	NumberOfConnections     *int64 `thrift:"numberOfConnections,2" json:"numberOfConnections,omitempty"`
	IncomingMessagesCounter *int64 `thrift:"incomingMessagesCounter,3" json:"incomingMessagesCounter,omitempty"`
	IncomingBytesCounter    *int64 `thrift:"incomingBytesCounter,4" json:"incomingBytesCounter,omitempty"`
}

func NewDestinationMetrics() *DestinationMetrics {
	return &DestinationMetrics{}
}

var DestinationMetrics_NumberOfActiveExtents_DEFAULT int64

func (p *DestinationMetrics) GetNumberOfActiveExtents() int64 {
	if !p.IsSetNumberOfActiveExtents() {
		return DestinationMetrics_NumberOfActiveExtents_DEFAULT
	}
	return *p.NumberOfActiveExtents
}

var DestinationMetrics_NumberOfConnections_DEFAULT int64

func (p *DestinationMetrics) GetNumberOfConnections() int64 {
	if !p.IsSetNumberOfConnections() {
		return DestinationMetrics_NumberOfConnections_DEFAULT
	}
	return *p.NumberOfConnections
}

var DestinationMetrics_IncomingMessagesCounter_DEFAULT int64

func (p *DestinationMetrics) GetIncomingMessagesCounter() int64 {
	if !p.IsSetIncomingMessagesCounter() {
		return DestinationMetrics_IncomingMessagesCounter_DEFAULT
	}
	return *p.IncomingMessagesCounter
}

var DestinationMetrics_IncomingBytesCounter_DEFAULT int64

func (p *DestinationMetrics) GetIncomingBytesCounter() int64 {
	if !p.IsSetIncomingBytesCounter() {
		return DestinationMetrics_IncomingBytesCounter_DEFAULT
	}
	return *p.IncomingBytesCounter
}
func (p *DestinationMetrics) IsSetNumberOfActiveExtents() bool {
	return p.NumberOfActiveExtents != nil
}

func (p *DestinationMetrics) IsSetNumberOfConnections() bool {
	return p.NumberOfConnections != nil
}

func (p *DestinationMetrics) IsSetIncomingMessagesCounter() bool {
	return p.IncomingMessagesCounter != nil
}

func (p *DestinationMetrics) IsSetIncomingBytesCounter() bool {
	return p.IncomingBytesCounter != nil
}

func (p *DestinationMetrics) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DestinationMetrics) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NumberOfActiveExtents = &v
	}
	return nil
}

func (p *DestinationMetrics) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NumberOfConnections = &v
	}
	return nil
}

func (p *DestinationMetrics) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IncomingMessagesCounter = &v
	}
	return nil
}

func (p *DestinationMetrics) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IncomingBytesCounter = &v
	}
	return nil
}

func (p *DestinationMetrics) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DestinationMetrics"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DestinationMetrics) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumberOfActiveExtents() {
		if err := oprot.WriteFieldBegin("numberOfActiveExtents", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:numberOfActiveExtents: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NumberOfActiveExtents)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.numberOfActiveExtents (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:numberOfActiveExtents: ", p), err)
		}
	}
	return err
}

func (p *DestinationMetrics) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumberOfConnections() {
		if err := oprot.WriteFieldBegin("numberOfConnections", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:numberOfConnections: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NumberOfConnections)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.numberOfConnections (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:numberOfConnections: ", p), err)
		}
	}
	return err
}

func (p *DestinationMetrics) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncomingMessagesCounter() {
		if err := oprot.WriteFieldBegin("incomingMessagesCounter", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:incomingMessagesCounter: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.IncomingMessagesCounter)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.incomingMessagesCounter (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:incomingMessagesCounter: ", p), err)
		}
	}
	return err
}

func (p *DestinationMetrics) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncomingBytesCounter() {
		if err := oprot.WriteFieldBegin("incomingBytesCounter", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:incomingBytesCounter: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.IncomingBytesCounter)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.incomingBytesCounter (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:incomingBytesCounter: ", p), err)
		}
	}
	return err
}

func (p *DestinationMetrics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DestinationMetrics(%+v)", *p)
}

// Attributes:
//  - NumberOfActiveExtents
//  - NumberOfConnections
//  - OutgoingMessagesCounter
//  - OutgoingBytesCounter
//  - SmartRetryOnCounter
type ConsumerGroupMetrics struct {
	NumberOfActiveExtents   *int64 `thrift:"numberOfActiveExtents,1" json:"numberOfActiveExtents,omitempty"`
	NumberOfConnections     *int64 `thrift:"numberOfConnections,2" json:"numberOfConnections,omitempty"`
	OutgoingMessagesCounter *int64 `thrift:"outgoingMessagesCounter,3" json:"outgoingMessagesCounter,omitempty"`
	OutgoingBytesCounter    *int64 `thrift:"outgoingBytesCounter,4" json:"outgoingBytesCounter,omitempty"`
	SmartRetryOnCounter     *int64 `thrift:"smartRetryOnCounter,5" json:"smartRetryOnCounter,omitempty"`
}

func NewConsumerGroupMetrics() *ConsumerGroupMetrics {
	return &ConsumerGroupMetrics{}
}

var ConsumerGroupMetrics_NumberOfActiveExtents_DEFAULT int64

func (p *ConsumerGroupMetrics) GetNumberOfActiveExtents() int64 {
	if !p.IsSetNumberOfActiveExtents() {
		return ConsumerGroupMetrics_NumberOfActiveExtents_DEFAULT
	}
	return *p.NumberOfActiveExtents
}

var ConsumerGroupMetrics_NumberOfConnections_DEFAULT int64

func (p *ConsumerGroupMetrics) GetNumberOfConnections() int64 {
	if !p.IsSetNumberOfConnections() {
		return ConsumerGroupMetrics_NumberOfConnections_DEFAULT
	}
	return *p.NumberOfConnections
}

var ConsumerGroupMetrics_OutgoingMessagesCounter_DEFAULT int64

func (p *ConsumerGroupMetrics) GetOutgoingMessagesCounter() int64 {
	if !p.IsSetOutgoingMessagesCounter() {
		return ConsumerGroupMetrics_OutgoingMessagesCounter_DEFAULT
	}
	return *p.OutgoingMessagesCounter
}

var ConsumerGroupMetrics_OutgoingBytesCounter_DEFAULT int64

func (p *ConsumerGroupMetrics) GetOutgoingBytesCounter() int64 {
	if !p.IsSetOutgoingBytesCounter() {
		return ConsumerGroupMetrics_OutgoingBytesCounter_DEFAULT
	}
	return *p.OutgoingBytesCounter
}

var ConsumerGroupMetrics_SmartRetryOnCounter_DEFAULT int64

func (p *ConsumerGroupMetrics) GetSmartRetryOnCounter() int64 {
	if !p.IsSetSmartRetryOnCounter() {
		return ConsumerGroupMetrics_SmartRetryOnCounter_DEFAULT
	}
	return *p.SmartRetryOnCounter
}
func (p *ConsumerGroupMetrics) IsSetNumberOfActiveExtents() bool {
	return p.NumberOfActiveExtents != nil
}

func (p *ConsumerGroupMetrics) IsSetNumberOfConnections() bool {
	return p.NumberOfConnections != nil
}

func (p *ConsumerGroupMetrics) IsSetOutgoingMessagesCounter() bool {
	return p.OutgoingMessagesCounter != nil
}

func (p *ConsumerGroupMetrics) IsSetOutgoingBytesCounter() bool {
	return p.OutgoingBytesCounter != nil
}

func (p *ConsumerGroupMetrics) IsSetSmartRetryOnCounter() bool {
	return p.SmartRetryOnCounter != nil
}

func (p *ConsumerGroupMetrics) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConsumerGroupMetrics) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NumberOfActiveExtents = &v
	}
	return nil
}

func (p *ConsumerGroupMetrics) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NumberOfConnections = &v
	}
	return nil
}

func (p *ConsumerGroupMetrics) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.OutgoingMessagesCounter = &v
	}
	return nil
}

func (p *ConsumerGroupMetrics) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.OutgoingBytesCounter = &v
	}
	return nil
}

func (p *ConsumerGroupMetrics) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SmartRetryOnCounter = &v
	}
	return nil
}

func (p *ConsumerGroupMetrics) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConsumerGroupMetrics"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ConsumerGroupMetrics) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumberOfActiveExtents() {
		if err := oprot.WriteFieldBegin("numberOfActiveExtents", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:numberOfActiveExtents: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NumberOfActiveExtents)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.numberOfActiveExtents (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:numberOfActiveExtents: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupMetrics) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumberOfConnections() {
		if err := oprot.WriteFieldBegin("numberOfConnections", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:numberOfConnections: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NumberOfConnections)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.numberOfConnections (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:numberOfConnections: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupMetrics) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutgoingMessagesCounter() {
		if err := oprot.WriteFieldBegin("outgoingMessagesCounter", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:outgoingMessagesCounter: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.OutgoingMessagesCounter)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.outgoingMessagesCounter (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:outgoingMessagesCounter: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupMetrics) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutgoingBytesCounter() {
		if err := oprot.WriteFieldBegin("outgoingBytesCounter", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:outgoingBytesCounter: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.OutgoingBytesCounter)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.outgoingBytesCounter (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:outgoingBytesCounter: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupMetrics) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSmartRetryOnCounter() {
		if err := oprot.WriteFieldBegin("smartRetryOnCounter", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:smartRetryOnCounter: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SmartRetryOnCounter)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.smartRetryOnCounter (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:smartRetryOnCounter: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupMetrics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConsumerGroupMetrics(%+v)", *p)
}

// Attributes:
//  - IncomingMessagesCounter
//  - IncomingBytesCounter
//  - PutMessageLatency
type DestinationExtentMetrics struct {
	IncomingMessagesCounter *int64 `thrift:"incomingMessagesCounter,1" json:"incomingMessagesCounter,omitempty"`
	IncomingBytesCounter    *int64 `thrift:"incomingBytesCounter,2" json:"incomingBytesCounter,omitempty"`
	PutMessageLatency       *int64 `thrift:"putMessageLatency,3" json:"putMessageLatency,omitempty"`
}

func NewDestinationExtentMetrics() *DestinationExtentMetrics {
	return &DestinationExtentMetrics{}
}

var DestinationExtentMetrics_IncomingMessagesCounter_DEFAULT int64

func (p *DestinationExtentMetrics) GetIncomingMessagesCounter() int64 {
	if !p.IsSetIncomingMessagesCounter() {
		return DestinationExtentMetrics_IncomingMessagesCounter_DEFAULT
	}
	return *p.IncomingMessagesCounter
}

var DestinationExtentMetrics_IncomingBytesCounter_DEFAULT int64

func (p *DestinationExtentMetrics) GetIncomingBytesCounter() int64 {
	if !p.IsSetIncomingBytesCounter() {
		return DestinationExtentMetrics_IncomingBytesCounter_DEFAULT
	}
	return *p.IncomingBytesCounter
}

var DestinationExtentMetrics_PutMessageLatency_DEFAULT int64

func (p *DestinationExtentMetrics) GetPutMessageLatency() int64 {
	if !p.IsSetPutMessageLatency() {
		return DestinationExtentMetrics_PutMessageLatency_DEFAULT
	}
	return *p.PutMessageLatency
}
func (p *DestinationExtentMetrics) IsSetIncomingMessagesCounter() bool {
	return p.IncomingMessagesCounter != nil
}

func (p *DestinationExtentMetrics) IsSetIncomingBytesCounter() bool {
	return p.IncomingBytesCounter != nil
}

func (p *DestinationExtentMetrics) IsSetPutMessageLatency() bool {
	return p.PutMessageLatency != nil
}

func (p *DestinationExtentMetrics) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DestinationExtentMetrics) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IncomingMessagesCounter = &v
	}
	return nil
}

func (p *DestinationExtentMetrics) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IncomingBytesCounter = &v
	}
	return nil
}

func (p *DestinationExtentMetrics) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PutMessageLatency = &v
	}
	return nil
}

func (p *DestinationExtentMetrics) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DestinationExtentMetrics"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DestinationExtentMetrics) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncomingMessagesCounter() {
		if err := oprot.WriteFieldBegin("incomingMessagesCounter", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:incomingMessagesCounter: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.IncomingMessagesCounter)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.incomingMessagesCounter (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:incomingMessagesCounter: ", p), err)
		}
	}
	return err
}

func (p *DestinationExtentMetrics) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncomingBytesCounter() {
		if err := oprot.WriteFieldBegin("incomingBytesCounter", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:incomingBytesCounter: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.IncomingBytesCounter)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.incomingBytesCounter (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:incomingBytesCounter: ", p), err)
		}
	}
	return err
}

func (p *DestinationExtentMetrics) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPutMessageLatency() {
		if err := oprot.WriteFieldBegin("putMessageLatency", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:putMessageLatency: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.PutMessageLatency)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.putMessageLatency (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:putMessageLatency: ", p), err)
		}
	}
	return err
}

func (p *DestinationExtentMetrics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DestinationExtentMetrics(%+v)", *p)
}

// Attributes:
//  - OutgoingMessagesCounter
//  - OutgoingBytesCounter
type ConsumerGroupExtentMetrics struct {
	OutgoingMessagesCounter *int64 `thrift:"outgoingMessagesCounter,1" json:"outgoingMessagesCounter,omitempty"`
	OutgoingBytesCounter    *int64 `thrift:"outgoingBytesCounter,2" json:"outgoingBytesCounter,omitempty"`
}

func NewConsumerGroupExtentMetrics() *ConsumerGroupExtentMetrics {
	return &ConsumerGroupExtentMetrics{}
}

var ConsumerGroupExtentMetrics_OutgoingMessagesCounter_DEFAULT int64

func (p *ConsumerGroupExtentMetrics) GetOutgoingMessagesCounter() int64 {
	if !p.IsSetOutgoingMessagesCounter() {
		return ConsumerGroupExtentMetrics_OutgoingMessagesCounter_DEFAULT
	}
	return *p.OutgoingMessagesCounter
}

var ConsumerGroupExtentMetrics_OutgoingBytesCounter_DEFAULT int64

func (p *ConsumerGroupExtentMetrics) GetOutgoingBytesCounter() int64 {
	if !p.IsSetOutgoingBytesCounter() {
		return ConsumerGroupExtentMetrics_OutgoingBytesCounter_DEFAULT
	}
	return *p.OutgoingBytesCounter
}
func (p *ConsumerGroupExtentMetrics) IsSetOutgoingMessagesCounter() bool {
	return p.OutgoingMessagesCounter != nil
}

func (p *ConsumerGroupExtentMetrics) IsSetOutgoingBytesCounter() bool {
	return p.OutgoingBytesCounter != nil
}

func (p *ConsumerGroupExtentMetrics) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConsumerGroupExtentMetrics) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OutgoingMessagesCounter = &v
	}
	return nil
}

func (p *ConsumerGroupExtentMetrics) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OutgoingBytesCounter = &v
	}
	return nil
}

func (p *ConsumerGroupExtentMetrics) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConsumerGroupExtentMetrics"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ConsumerGroupExtentMetrics) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutgoingMessagesCounter() {
		if err := oprot.WriteFieldBegin("outgoingMessagesCounter", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:outgoingMessagesCounter: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.OutgoingMessagesCounter)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.outgoingMessagesCounter (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:outgoingMessagesCounter: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupExtentMetrics) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutgoingBytesCounter() {
		if err := oprot.WriteFieldBegin("outgoingBytesCounter", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:outgoingBytesCounter: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.OutgoingBytesCounter)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.outgoingBytesCounter (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:outgoingBytesCounter: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupExtentMetrics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConsumerGroupExtentMetrics(%+v)", *p)
}

// Attributes:
//  - NumberOfConnections
//  - IncomingMessagesCounter
//  - IncomingBytesCounter
//  - WriteMessageLatency
//  - OutgoingMessagesCounter
//  - OutgoingBytesCounter
//  - ReadMessageLatency
//  - ExtentStatus
type StoreExtentMetrics struct {
	NumberOfConnections     *int64               `thrift:"numberOfConnections,1" json:"numberOfConnections,omitempty"`
	IncomingMessagesCounter *int64               `thrift:"incomingMessagesCounter,2" json:"incomingMessagesCounter,omitempty"`
	IncomingBytesCounter    *int64               `thrift:"incomingBytesCounter,3" json:"incomingBytesCounter,omitempty"`
	WriteMessageLatency     *int64               `thrift:"writeMessageLatency,4" json:"writeMessageLatency,omitempty"`
	OutgoingMessagesCounter *int64               `thrift:"outgoingMessagesCounter,5" json:"outgoingMessagesCounter,omitempty"`
	OutgoingBytesCounter    *int64               `thrift:"outgoingBytesCounter,6" json:"outgoingBytesCounter,omitempty"`
	ReadMessageLatency      *int64               `thrift:"readMessageLatency,7" json:"readMessageLatency,omitempty"`
	ExtentStatus            *shared.ExtentStatus `thrift:"extentStatus,8" json:"extentStatus,omitempty"`
}

func NewStoreExtentMetrics() *StoreExtentMetrics {
	return &StoreExtentMetrics{}
}

var StoreExtentMetrics_NumberOfConnections_DEFAULT int64

func (p *StoreExtentMetrics) GetNumberOfConnections() int64 {
	if !p.IsSetNumberOfConnections() {
		return StoreExtentMetrics_NumberOfConnections_DEFAULT
	}
	return *p.NumberOfConnections
}

var StoreExtentMetrics_IncomingMessagesCounter_DEFAULT int64

func (p *StoreExtentMetrics) GetIncomingMessagesCounter() int64 {
	if !p.IsSetIncomingMessagesCounter() {
		return StoreExtentMetrics_IncomingMessagesCounter_DEFAULT
	}
	return *p.IncomingMessagesCounter
}

var StoreExtentMetrics_IncomingBytesCounter_DEFAULT int64

func (p *StoreExtentMetrics) GetIncomingBytesCounter() int64 {
	if !p.IsSetIncomingBytesCounter() {
		return StoreExtentMetrics_IncomingBytesCounter_DEFAULT
	}
	return *p.IncomingBytesCounter
}

var StoreExtentMetrics_WriteMessageLatency_DEFAULT int64

func (p *StoreExtentMetrics) GetWriteMessageLatency() int64 {
	if !p.IsSetWriteMessageLatency() {
		return StoreExtentMetrics_WriteMessageLatency_DEFAULT
	}
	return *p.WriteMessageLatency
}

var StoreExtentMetrics_OutgoingMessagesCounter_DEFAULT int64

func (p *StoreExtentMetrics) GetOutgoingMessagesCounter() int64 {
	if !p.IsSetOutgoingMessagesCounter() {
		return StoreExtentMetrics_OutgoingMessagesCounter_DEFAULT
	}
	return *p.OutgoingMessagesCounter
}

var StoreExtentMetrics_OutgoingBytesCounter_DEFAULT int64

func (p *StoreExtentMetrics) GetOutgoingBytesCounter() int64 {
	if !p.IsSetOutgoingBytesCounter() {
		return StoreExtentMetrics_OutgoingBytesCounter_DEFAULT
	}
	return *p.OutgoingBytesCounter
}

var StoreExtentMetrics_ReadMessageLatency_DEFAULT int64

func (p *StoreExtentMetrics) GetReadMessageLatency() int64 {
	if !p.IsSetReadMessageLatency() {
		return StoreExtentMetrics_ReadMessageLatency_DEFAULT
	}
	return *p.ReadMessageLatency
}

var StoreExtentMetrics_ExtentStatus_DEFAULT shared.ExtentStatus

func (p *StoreExtentMetrics) GetExtentStatus() shared.ExtentStatus {
	if !p.IsSetExtentStatus() {
		return StoreExtentMetrics_ExtentStatus_DEFAULT
	}
	return *p.ExtentStatus
}
func (p *StoreExtentMetrics) IsSetNumberOfConnections() bool {
	return p.NumberOfConnections != nil
}

func (p *StoreExtentMetrics) IsSetIncomingMessagesCounter() bool {
	return p.IncomingMessagesCounter != nil
}

func (p *StoreExtentMetrics) IsSetIncomingBytesCounter() bool {
	return p.IncomingBytesCounter != nil
}

func (p *StoreExtentMetrics) IsSetWriteMessageLatency() bool {
	return p.WriteMessageLatency != nil
}

func (p *StoreExtentMetrics) IsSetOutgoingMessagesCounter() bool {
	return p.OutgoingMessagesCounter != nil
}

func (p *StoreExtentMetrics) IsSetOutgoingBytesCounter() bool {
	return p.OutgoingBytesCounter != nil
}

func (p *StoreExtentMetrics) IsSetReadMessageLatency() bool {
	return p.ReadMessageLatency != nil
}

func (p *StoreExtentMetrics) IsSetExtentStatus() bool {
	return p.ExtentStatus != nil
}

func (p *StoreExtentMetrics) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StoreExtentMetrics) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NumberOfConnections = &v
	}
	return nil
}

func (p *StoreExtentMetrics) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IncomingMessagesCounter = &v
	}
	return nil
}

func (p *StoreExtentMetrics) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IncomingBytesCounter = &v
	}
	return nil
}

func (p *StoreExtentMetrics) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.WriteMessageLatency = &v
	}
	return nil
}

func (p *StoreExtentMetrics) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.OutgoingMessagesCounter = &v
	}
	return nil
}

func (p *StoreExtentMetrics) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.OutgoingBytesCounter = &v
	}
	return nil
}

func (p *StoreExtentMetrics) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ReadMessageLatency = &v
	}
	return nil
}

func (p *StoreExtentMetrics) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := shared.ExtentStatus(v)
		p.ExtentStatus = &temp
	}
	return nil
}

func (p *StoreExtentMetrics) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StoreExtentMetrics"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StoreExtentMetrics) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumberOfConnections() {
		if err := oprot.WriteFieldBegin("numberOfConnections", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:numberOfConnections: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NumberOfConnections)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.numberOfConnections (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:numberOfConnections: ", p), err)
		}
	}
	return err
}

func (p *StoreExtentMetrics) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncomingMessagesCounter() {
		if err := oprot.WriteFieldBegin("incomingMessagesCounter", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:incomingMessagesCounter: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.IncomingMessagesCounter)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.incomingMessagesCounter (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:incomingMessagesCounter: ", p), err)
		}
	}
	return err
}

func (p *StoreExtentMetrics) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncomingBytesCounter() {
		if err := oprot.WriteFieldBegin("incomingBytesCounter", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:incomingBytesCounter: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.IncomingBytesCounter)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.incomingBytesCounter (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:incomingBytesCounter: ", p), err)
		}
	}
	return err
}

func (p *StoreExtentMetrics) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetWriteMessageLatency() {
		if err := oprot.WriteFieldBegin("writeMessageLatency", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:writeMessageLatency: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.WriteMessageLatency)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.writeMessageLatency (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:writeMessageLatency: ", p), err)
		}
	}
	return err
}

func (p *StoreExtentMetrics) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutgoingMessagesCounter() {
		if err := oprot.WriteFieldBegin("outgoingMessagesCounter", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:outgoingMessagesCounter: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.OutgoingMessagesCounter)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.outgoingMessagesCounter (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:outgoingMessagesCounter: ", p), err)
		}
	}
	return err
}

func (p *StoreExtentMetrics) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutgoingBytesCounter() {
		if err := oprot.WriteFieldBegin("outgoingBytesCounter", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:outgoingBytesCounter: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.OutgoingBytesCounter)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.outgoingBytesCounter (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:outgoingBytesCounter: ", p), err)
		}
	}
	return err
}

func (p *StoreExtentMetrics) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadMessageLatency() {
		if err := oprot.WriteFieldBegin("readMessageLatency", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:readMessageLatency: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ReadMessageLatency)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.readMessageLatency (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:readMessageLatency: ", p), err)
		}
	}
	return err
}

func (p *StoreExtentMetrics) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentStatus() {
		if err := oprot.WriteFieldBegin("extentStatus", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:extentStatus: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ExtentStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentStatus (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:extentStatus: ", p), err)
		}
	}
	return err
}

func (p *StoreExtentMetrics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StoreExtentMetrics(%+v)", *p)
}

// Attributes:
//  - Sku
//  - Role
//  - HostId
//  - Metrics
//  - Timestamp
type ReportNodeMetricRequest struct {
	Sku       *SKU         `thrift:"sku,1" json:"sku,omitempty"`
	Role      *Role        `thrift:"role,2" json:"role,omitempty"`
	HostId    *string      `thrift:"hostId,3" json:"hostId,omitempty"`
	Metrics   *NodeMetrics `thrift:"metrics,4" json:"metrics,omitempty"`
	Timestamp *int64       `thrift:"timestamp,5" json:"timestamp,omitempty"`
}

func NewReportNodeMetricRequest() *ReportNodeMetricRequest {
	return &ReportNodeMetricRequest{}
}

var ReportNodeMetricRequest_Sku_DEFAULT SKU

func (p *ReportNodeMetricRequest) GetSku() SKU {
	if !p.IsSetSku() {
		return ReportNodeMetricRequest_Sku_DEFAULT
	}
	return *p.Sku
}

var ReportNodeMetricRequest_Role_DEFAULT Role

func (p *ReportNodeMetricRequest) GetRole() Role {
	if !p.IsSetRole() {
		return ReportNodeMetricRequest_Role_DEFAULT
	}
	return *p.Role
}

var ReportNodeMetricRequest_HostId_DEFAULT string

func (p *ReportNodeMetricRequest) GetHostId() string {
	if !p.IsSetHostId() {
		return ReportNodeMetricRequest_HostId_DEFAULT
	}
	return *p.HostId
}

var ReportNodeMetricRequest_Metrics_DEFAULT *NodeMetrics

func (p *ReportNodeMetricRequest) GetMetrics() *NodeMetrics {
	if !p.IsSetMetrics() {
		return ReportNodeMetricRequest_Metrics_DEFAULT
	}
	return p.Metrics
}

var ReportNodeMetricRequest_Timestamp_DEFAULT int64

func (p *ReportNodeMetricRequest) GetTimestamp() int64 {
	if !p.IsSetTimestamp() {
		return ReportNodeMetricRequest_Timestamp_DEFAULT
	}
	return *p.Timestamp
}
func (p *ReportNodeMetricRequest) IsSetSku() bool {
	return p.Sku != nil
}

func (p *ReportNodeMetricRequest) IsSetRole() bool {
	return p.Role != nil
}

func (p *ReportNodeMetricRequest) IsSetHostId() bool {
	return p.HostId != nil
}

func (p *ReportNodeMetricRequest) IsSetMetrics() bool {
	return p.Metrics != nil
}

func (p *ReportNodeMetricRequest) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *ReportNodeMetricRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReportNodeMetricRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SKU(v)
		p.Sku = &temp
	}
	return nil
}

func (p *ReportNodeMetricRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Role(v)
		p.Role = &temp
	}
	return nil
}

func (p *ReportNodeMetricRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.HostId = &v
	}
	return nil
}

func (p *ReportNodeMetricRequest) readField4(iprot thrift.TProtocol) error {
	p.Metrics = &NodeMetrics{}
	if err := p.Metrics.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metrics), err)
	}
	return nil
}

func (p *ReportNodeMetricRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *ReportNodeMetricRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReportNodeMetricRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReportNodeMetricRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSku() {
		if err := oprot.WriteFieldBegin("sku", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sku: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Sku)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sku (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sku: ", p), err)
		}
	}
	return err
}

func (p *ReportNodeMetricRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRole() {
		if err := oprot.WriteFieldBegin("role", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:role: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Role)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.role (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:role: ", p), err)
		}
	}
	return err
}

func (p *ReportNodeMetricRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostId() {
		if err := oprot.WriteFieldBegin("hostId", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hostId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HostId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hostId (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hostId: ", p), err)
		}
	}
	return err
}

func (p *ReportNodeMetricRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetrics() {
		if err := oprot.WriteFieldBegin("metrics", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:metrics: ", p), err)
		}
		if err := p.Metrics.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metrics), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:metrics: ", p), err)
		}
	}
	return err
}

func (p *ReportNodeMetricRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:timestamp: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timestamp (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:timestamp: ", p), err)
		}
	}
	return err
}

func (p *ReportNodeMetricRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportNodeMetricRequest(%+v)", *p)
}

// Attributes:
//  - Sku
//  - HostId
//  - DestinationUUID
//  - Metrics
//  - Timestamp
type ReportDestinationMetricRequest struct {
	Sku             *SKU                `thrift:"sku,1" json:"sku,omitempty"`
	HostId          *string             `thrift:"hostId,2" json:"hostId,omitempty"`
	DestinationUUID *string             `thrift:"destinationUUID,3" json:"destinationUUID,omitempty"`
	Metrics         *DestinationMetrics `thrift:"metrics,4" json:"metrics,omitempty"`
	Timestamp       *int64              `thrift:"timestamp,5" json:"timestamp,omitempty"`
}

func NewReportDestinationMetricRequest() *ReportDestinationMetricRequest {
	return &ReportDestinationMetricRequest{}
}

var ReportDestinationMetricRequest_Sku_DEFAULT SKU

func (p *ReportDestinationMetricRequest) GetSku() SKU {
	if !p.IsSetSku() {
		return ReportDestinationMetricRequest_Sku_DEFAULT
	}
	return *p.Sku
}

var ReportDestinationMetricRequest_HostId_DEFAULT string

func (p *ReportDestinationMetricRequest) GetHostId() string {
	if !p.IsSetHostId() {
		return ReportDestinationMetricRequest_HostId_DEFAULT
	}
	return *p.HostId
}

var ReportDestinationMetricRequest_DestinationUUID_DEFAULT string

func (p *ReportDestinationMetricRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return ReportDestinationMetricRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var ReportDestinationMetricRequest_Metrics_DEFAULT *DestinationMetrics

func (p *ReportDestinationMetricRequest) GetMetrics() *DestinationMetrics {
	if !p.IsSetMetrics() {
		return ReportDestinationMetricRequest_Metrics_DEFAULT
	}
	return p.Metrics
}

var ReportDestinationMetricRequest_Timestamp_DEFAULT int64

func (p *ReportDestinationMetricRequest) GetTimestamp() int64 {
	if !p.IsSetTimestamp() {
		return ReportDestinationMetricRequest_Timestamp_DEFAULT
	}
	return *p.Timestamp
}
func (p *ReportDestinationMetricRequest) IsSetSku() bool {
	return p.Sku != nil
}

func (p *ReportDestinationMetricRequest) IsSetHostId() bool {
	return p.HostId != nil
}

func (p *ReportDestinationMetricRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *ReportDestinationMetricRequest) IsSetMetrics() bool {
	return p.Metrics != nil
}

func (p *ReportDestinationMetricRequest) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *ReportDestinationMetricRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReportDestinationMetricRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SKU(v)
		p.Sku = &temp
	}
	return nil
}

func (p *ReportDestinationMetricRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.HostId = &v
	}
	return nil
}

func (p *ReportDestinationMetricRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *ReportDestinationMetricRequest) readField4(iprot thrift.TProtocol) error {
	p.Metrics = &DestinationMetrics{}
	if err := p.Metrics.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metrics), err)
	}
	return nil
}

func (p *ReportDestinationMetricRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *ReportDestinationMetricRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReportDestinationMetricRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReportDestinationMetricRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSku() {
		if err := oprot.WriteFieldBegin("sku", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sku: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Sku)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sku (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sku: ", p), err)
		}
	}
	return err
}

func (p *ReportDestinationMetricRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostId() {
		if err := oprot.WriteFieldBegin("hostId", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HostId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hostId (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostId: ", p), err)
		}
	}
	return err
}

func (p *ReportDestinationMetricRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *ReportDestinationMetricRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetrics() {
		if err := oprot.WriteFieldBegin("metrics", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:metrics: ", p), err)
		}
		if err := p.Metrics.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metrics), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:metrics: ", p), err)
		}
	}
	return err
}

func (p *ReportDestinationMetricRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:timestamp: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timestamp (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:timestamp: ", p), err)
		}
	}
	return err
}

func (p *ReportDestinationMetricRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportDestinationMetricRequest(%+v)", *p)
}

// Attributes:
//  - Sku
//  - HostId
//  - DestinationUUID
//  - ExtentUUID
//  - Metrics
//  - Timestamp
type ReportDestinationExtentMetricRequest struct {
	Sku             *SKU                      `thrift:"sku,1" json:"sku,omitempty"`
	HostId          *string                   `thrift:"hostId,2" json:"hostId,omitempty"`
	DestinationUUID *string                   `thrift:"destinationUUID,3" json:"destinationUUID,omitempty"`
	ExtentUUID      *string                   `thrift:"extentUUID,4" json:"extentUUID,omitempty"`
	Metrics         *DestinationExtentMetrics `thrift:"metrics,5" json:"metrics,omitempty"`
	Timestamp       *int64                    `thrift:"timestamp,6" json:"timestamp,omitempty"`
}

func NewReportDestinationExtentMetricRequest() *ReportDestinationExtentMetricRequest {
	return &ReportDestinationExtentMetricRequest{}
}

var ReportDestinationExtentMetricRequest_Sku_DEFAULT SKU

func (p *ReportDestinationExtentMetricRequest) GetSku() SKU {
	if !p.IsSetSku() {
		return ReportDestinationExtentMetricRequest_Sku_DEFAULT
	}
	return *p.Sku
}

var ReportDestinationExtentMetricRequest_HostId_DEFAULT string

func (p *ReportDestinationExtentMetricRequest) GetHostId() string {
	if !p.IsSetHostId() {
		return ReportDestinationExtentMetricRequest_HostId_DEFAULT
	}
	return *p.HostId
}

var ReportDestinationExtentMetricRequest_DestinationUUID_DEFAULT string

func (p *ReportDestinationExtentMetricRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return ReportDestinationExtentMetricRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var ReportDestinationExtentMetricRequest_ExtentUUID_DEFAULT string

func (p *ReportDestinationExtentMetricRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return ReportDestinationExtentMetricRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var ReportDestinationExtentMetricRequest_Metrics_DEFAULT *DestinationExtentMetrics

func (p *ReportDestinationExtentMetricRequest) GetMetrics() *DestinationExtentMetrics {
	if !p.IsSetMetrics() {
		return ReportDestinationExtentMetricRequest_Metrics_DEFAULT
	}
	return p.Metrics
}

var ReportDestinationExtentMetricRequest_Timestamp_DEFAULT int64

func (p *ReportDestinationExtentMetricRequest) GetTimestamp() int64 {
	if !p.IsSetTimestamp() {
		return ReportDestinationExtentMetricRequest_Timestamp_DEFAULT
	}
	return *p.Timestamp
}
func (p *ReportDestinationExtentMetricRequest) IsSetSku() bool {
	return p.Sku != nil
}

func (p *ReportDestinationExtentMetricRequest) IsSetHostId() bool {
	return p.HostId != nil
}

func (p *ReportDestinationExtentMetricRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *ReportDestinationExtentMetricRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *ReportDestinationExtentMetricRequest) IsSetMetrics() bool {
	return p.Metrics != nil
}

func (p *ReportDestinationExtentMetricRequest) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *ReportDestinationExtentMetricRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReportDestinationExtentMetricRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SKU(v)
		p.Sku = &temp
	}
	return nil
}

func (p *ReportDestinationExtentMetricRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.HostId = &v
	}
	return nil
}

func (p *ReportDestinationExtentMetricRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *ReportDestinationExtentMetricRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *ReportDestinationExtentMetricRequest) readField5(iprot thrift.TProtocol) error {
	p.Metrics = &DestinationExtentMetrics{}
	if err := p.Metrics.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metrics), err)
	}
	return nil
}

func (p *ReportDestinationExtentMetricRequest) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *ReportDestinationExtentMetricRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReportDestinationExtentMetricRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReportDestinationExtentMetricRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSku() {
		if err := oprot.WriteFieldBegin("sku", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sku: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Sku)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sku (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sku: ", p), err)
		}
	}
	return err
}

func (p *ReportDestinationExtentMetricRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostId() {
		if err := oprot.WriteFieldBegin("hostId", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HostId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hostId (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostId: ", p), err)
		}
	}
	return err
}

func (p *ReportDestinationExtentMetricRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *ReportDestinationExtentMetricRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *ReportDestinationExtentMetricRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetrics() {
		if err := oprot.WriteFieldBegin("metrics", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:metrics: ", p), err)
		}
		if err := p.Metrics.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metrics), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:metrics: ", p), err)
		}
	}
	return err
}

func (p *ReportDestinationExtentMetricRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:timestamp: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timestamp (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:timestamp: ", p), err)
		}
	}
	return err
}

func (p *ReportDestinationExtentMetricRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportDestinationExtentMetricRequest(%+v)", *p)
}

// Attributes:
//  - Sku
//  - HostId
//  - DestinationUUID
//  - ConsumerGroupUUID
//  - Metrics
//  - Timestamp
type ReportConsumerGroupMetricRequest struct {
	Sku               *SKU                  `thrift:"sku,1" json:"sku,omitempty"`
	HostId            *string               `thrift:"hostId,2" json:"hostId,omitempty"`
	DestinationUUID   *string               `thrift:"destinationUUID,3" json:"destinationUUID,omitempty"`
	ConsumerGroupUUID *string               `thrift:"consumerGroupUUID,4" json:"consumerGroupUUID,omitempty"`
	Metrics           *ConsumerGroupMetrics `thrift:"metrics,5" json:"metrics,omitempty"`
	Timestamp         *int64                `thrift:"timestamp,6" json:"timestamp,omitempty"`
}

func NewReportConsumerGroupMetricRequest() *ReportConsumerGroupMetricRequest {
	return &ReportConsumerGroupMetricRequest{}
}

var ReportConsumerGroupMetricRequest_Sku_DEFAULT SKU

func (p *ReportConsumerGroupMetricRequest) GetSku() SKU {
	if !p.IsSetSku() {
		return ReportConsumerGroupMetricRequest_Sku_DEFAULT
	}
	return *p.Sku
}

var ReportConsumerGroupMetricRequest_HostId_DEFAULT string

func (p *ReportConsumerGroupMetricRequest) GetHostId() string {
	if !p.IsSetHostId() {
		return ReportConsumerGroupMetricRequest_HostId_DEFAULT
	}
	return *p.HostId
}

var ReportConsumerGroupMetricRequest_DestinationUUID_DEFAULT string

func (p *ReportConsumerGroupMetricRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return ReportConsumerGroupMetricRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var ReportConsumerGroupMetricRequest_ConsumerGroupUUID_DEFAULT string

func (p *ReportConsumerGroupMetricRequest) GetConsumerGroupUUID() string {
	if !p.IsSetConsumerGroupUUID() {
		return ReportConsumerGroupMetricRequest_ConsumerGroupUUID_DEFAULT
	}
	return *p.ConsumerGroupUUID
}

var ReportConsumerGroupMetricRequest_Metrics_DEFAULT *ConsumerGroupMetrics

func (p *ReportConsumerGroupMetricRequest) GetMetrics() *ConsumerGroupMetrics {
	if !p.IsSetMetrics() {
		return ReportConsumerGroupMetricRequest_Metrics_DEFAULT
	}
	return p.Metrics
}

var ReportConsumerGroupMetricRequest_Timestamp_DEFAULT int64

func (p *ReportConsumerGroupMetricRequest) GetTimestamp() int64 {
	if !p.IsSetTimestamp() {
		return ReportConsumerGroupMetricRequest_Timestamp_DEFAULT
	}
	return *p.Timestamp
}
func (p *ReportConsumerGroupMetricRequest) IsSetSku() bool {
	return p.Sku != nil
}

func (p *ReportConsumerGroupMetricRequest) IsSetHostId() bool {
	return p.HostId != nil
}

func (p *ReportConsumerGroupMetricRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *ReportConsumerGroupMetricRequest) IsSetConsumerGroupUUID() bool {
	return p.ConsumerGroupUUID != nil
}

func (p *ReportConsumerGroupMetricRequest) IsSetMetrics() bool {
	return p.Metrics != nil
}

func (p *ReportConsumerGroupMetricRequest) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *ReportConsumerGroupMetricRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReportConsumerGroupMetricRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SKU(v)
		p.Sku = &temp
	}
	return nil
}

func (p *ReportConsumerGroupMetricRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.HostId = &v
	}
	return nil
}

func (p *ReportConsumerGroupMetricRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *ReportConsumerGroupMetricRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ConsumerGroupUUID = &v
	}
	return nil
}

func (p *ReportConsumerGroupMetricRequest) readField5(iprot thrift.TProtocol) error {
	p.Metrics = &ConsumerGroupMetrics{}
	if err := p.Metrics.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metrics), err)
	}
	return nil
}

func (p *ReportConsumerGroupMetricRequest) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *ReportConsumerGroupMetricRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReportConsumerGroupMetricRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReportConsumerGroupMetricRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSku() {
		if err := oprot.WriteFieldBegin("sku", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sku: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Sku)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sku (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sku: ", p), err)
		}
	}
	return err
}

func (p *ReportConsumerGroupMetricRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostId() {
		if err := oprot.WriteFieldBegin("hostId", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HostId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hostId (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostId: ", p), err)
		}
	}
	return err
}

func (p *ReportConsumerGroupMetricRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *ReportConsumerGroupMetricRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupUUID() {
		if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:consumerGroupUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:consumerGroupUUID: ", p), err)
		}
	}
	return err
}

func (p *ReportConsumerGroupMetricRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetrics() {
		if err := oprot.WriteFieldBegin("metrics", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:metrics: ", p), err)
		}
		if err := p.Metrics.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metrics), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:metrics: ", p), err)
		}
	}
	return err
}

func (p *ReportConsumerGroupMetricRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:timestamp: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timestamp (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:timestamp: ", p), err)
		}
	}
	return err
}

func (p *ReportConsumerGroupMetricRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportConsumerGroupMetricRequest(%+v)", *p)
}

// Attributes:
//  - Sku
//  - HostId
//  - DestinationUUID
//  - ConsumerGroupUUID
//  - ExtentUUID
//  - Metrics
//  - Timestamp
type ReportConsumerGroupExtentMetricRequest struct {
	Sku               *SKU                        `thrift:"sku,1" json:"sku,omitempty"`
	HostId            *string                     `thrift:"hostId,2" json:"hostId,omitempty"`
	DestinationUUID   *string                     `thrift:"destinationUUID,3" json:"destinationUUID,omitempty"`
	ConsumerGroupUUID *string                     `thrift:"consumerGroupUUID,4" json:"consumerGroupUUID,omitempty"`
	ExtentUUID        *string                     `thrift:"extentUUID,5" json:"extentUUID,omitempty"`
	Metrics           *ConsumerGroupExtentMetrics `thrift:"metrics,6" json:"metrics,omitempty"`
	Timestamp         *int64                      `thrift:"timestamp,7" json:"timestamp,omitempty"`
}

func NewReportConsumerGroupExtentMetricRequest() *ReportConsumerGroupExtentMetricRequest {
	return &ReportConsumerGroupExtentMetricRequest{}
}

var ReportConsumerGroupExtentMetricRequest_Sku_DEFAULT SKU

func (p *ReportConsumerGroupExtentMetricRequest) GetSku() SKU {
	if !p.IsSetSku() {
		return ReportConsumerGroupExtentMetricRequest_Sku_DEFAULT
	}
	return *p.Sku
}

var ReportConsumerGroupExtentMetricRequest_HostId_DEFAULT string

func (p *ReportConsumerGroupExtentMetricRequest) GetHostId() string {
	if !p.IsSetHostId() {
		return ReportConsumerGroupExtentMetricRequest_HostId_DEFAULT
	}
	return *p.HostId
}

var ReportConsumerGroupExtentMetricRequest_DestinationUUID_DEFAULT string

func (p *ReportConsumerGroupExtentMetricRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return ReportConsumerGroupExtentMetricRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var ReportConsumerGroupExtentMetricRequest_ConsumerGroupUUID_DEFAULT string

func (p *ReportConsumerGroupExtentMetricRequest) GetConsumerGroupUUID() string {
	if !p.IsSetConsumerGroupUUID() {
		return ReportConsumerGroupExtentMetricRequest_ConsumerGroupUUID_DEFAULT
	}
	return *p.ConsumerGroupUUID
}

var ReportConsumerGroupExtentMetricRequest_ExtentUUID_DEFAULT string

func (p *ReportConsumerGroupExtentMetricRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return ReportConsumerGroupExtentMetricRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var ReportConsumerGroupExtentMetricRequest_Metrics_DEFAULT *ConsumerGroupExtentMetrics

func (p *ReportConsumerGroupExtentMetricRequest) GetMetrics() *ConsumerGroupExtentMetrics {
	if !p.IsSetMetrics() {
		return ReportConsumerGroupExtentMetricRequest_Metrics_DEFAULT
	}
	return p.Metrics
}

var ReportConsumerGroupExtentMetricRequest_Timestamp_DEFAULT int64

func (p *ReportConsumerGroupExtentMetricRequest) GetTimestamp() int64 {
	if !p.IsSetTimestamp() {
		return ReportConsumerGroupExtentMetricRequest_Timestamp_DEFAULT
	}
	return *p.Timestamp
}
func (p *ReportConsumerGroupExtentMetricRequest) IsSetSku() bool {
	return p.Sku != nil
}

func (p *ReportConsumerGroupExtentMetricRequest) IsSetHostId() bool {
	return p.HostId != nil
}

func (p *ReportConsumerGroupExtentMetricRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *ReportConsumerGroupExtentMetricRequest) IsSetConsumerGroupUUID() bool {
	return p.ConsumerGroupUUID != nil
}

func (p *ReportConsumerGroupExtentMetricRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *ReportConsumerGroupExtentMetricRequest) IsSetMetrics() bool {
	return p.Metrics != nil
}

func (p *ReportConsumerGroupExtentMetricRequest) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *ReportConsumerGroupExtentMetricRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReportConsumerGroupExtentMetricRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SKU(v)
		p.Sku = &temp
	}
	return nil
}

func (p *ReportConsumerGroupExtentMetricRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.HostId = &v
	}
	return nil
}

func (p *ReportConsumerGroupExtentMetricRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *ReportConsumerGroupExtentMetricRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ConsumerGroupUUID = &v
	}
	return nil
}

func (p *ReportConsumerGroupExtentMetricRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *ReportConsumerGroupExtentMetricRequest) readField6(iprot thrift.TProtocol) error {
	p.Metrics = &ConsumerGroupExtentMetrics{}
	if err := p.Metrics.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metrics), err)
	}
	return nil
}

func (p *ReportConsumerGroupExtentMetricRequest) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *ReportConsumerGroupExtentMetricRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReportConsumerGroupExtentMetricRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReportConsumerGroupExtentMetricRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSku() {
		if err := oprot.WriteFieldBegin("sku", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sku: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Sku)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sku (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sku: ", p), err)
		}
	}
	return err
}

func (p *ReportConsumerGroupExtentMetricRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostId() {
		if err := oprot.WriteFieldBegin("hostId", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HostId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hostId (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostId: ", p), err)
		}
	}
	return err
}

func (p *ReportConsumerGroupExtentMetricRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *ReportConsumerGroupExtentMetricRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupUUID() {
		if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:consumerGroupUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:consumerGroupUUID: ", p), err)
		}
	}
	return err
}

func (p *ReportConsumerGroupExtentMetricRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *ReportConsumerGroupExtentMetricRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetrics() {
		if err := oprot.WriteFieldBegin("metrics", thrift.STRUCT, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:metrics: ", p), err)
		}
		if err := p.Metrics.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metrics), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:metrics: ", p), err)
		}
	}
	return err
}

func (p *ReportConsumerGroupExtentMetricRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:timestamp: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timestamp (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:timestamp: ", p), err)
		}
	}
	return err
}

func (p *ReportConsumerGroupExtentMetricRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportConsumerGroupExtentMetricRequest(%+v)", *p)
}

// Attributes:
//  - Sku
//  - StoreId
//  - ExtentUUID
//  - Metrics
//  - Timestamp
type ReportStoreExtentMetricRequest struct {
	Sku        *SKU                `thrift:"sku,1" json:"sku,omitempty"`
	StoreId    *string             `thrift:"storeId,2" json:"storeId,omitempty"`
	ExtentUUID *string             `thrift:"extentUUID,3" json:"extentUUID,omitempty"`
	Metrics    *StoreExtentMetrics `thrift:"metrics,4" json:"metrics,omitempty"`
	Timestamp  *int64              `thrift:"timestamp,5" json:"timestamp,omitempty"`
}

func NewReportStoreExtentMetricRequest() *ReportStoreExtentMetricRequest {
	return &ReportStoreExtentMetricRequest{}
}

var ReportStoreExtentMetricRequest_Sku_DEFAULT SKU

func (p *ReportStoreExtentMetricRequest) GetSku() SKU {
	if !p.IsSetSku() {
		return ReportStoreExtentMetricRequest_Sku_DEFAULT
	}
	return *p.Sku
}

var ReportStoreExtentMetricRequest_StoreId_DEFAULT string

func (p *ReportStoreExtentMetricRequest) GetStoreId() string {
	if !p.IsSetStoreId() {
		return ReportStoreExtentMetricRequest_StoreId_DEFAULT
	}
	return *p.StoreId
}

var ReportStoreExtentMetricRequest_ExtentUUID_DEFAULT string

func (p *ReportStoreExtentMetricRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return ReportStoreExtentMetricRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var ReportStoreExtentMetricRequest_Metrics_DEFAULT *StoreExtentMetrics

func (p *ReportStoreExtentMetricRequest) GetMetrics() *StoreExtentMetrics {
	if !p.IsSetMetrics() {
		return ReportStoreExtentMetricRequest_Metrics_DEFAULT
	}
	return p.Metrics
}

var ReportStoreExtentMetricRequest_Timestamp_DEFAULT int64

func (p *ReportStoreExtentMetricRequest) GetTimestamp() int64 {
	if !p.IsSetTimestamp() {
		return ReportStoreExtentMetricRequest_Timestamp_DEFAULT
	}
	return *p.Timestamp
}
func (p *ReportStoreExtentMetricRequest) IsSetSku() bool {
	return p.Sku != nil
}

func (p *ReportStoreExtentMetricRequest) IsSetStoreId() bool {
	return p.StoreId != nil
}

func (p *ReportStoreExtentMetricRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *ReportStoreExtentMetricRequest) IsSetMetrics() bool {
	return p.Metrics != nil
}

func (p *ReportStoreExtentMetricRequest) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *ReportStoreExtentMetricRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReportStoreExtentMetricRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SKU(v)
		p.Sku = &temp
	}
	return nil
}

func (p *ReportStoreExtentMetricRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.StoreId = &v
	}
	return nil
}

func (p *ReportStoreExtentMetricRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *ReportStoreExtentMetricRequest) readField4(iprot thrift.TProtocol) error {
	p.Metrics = &StoreExtentMetrics{}
	if err := p.Metrics.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metrics), err)
	}
	return nil
}

func (p *ReportStoreExtentMetricRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *ReportStoreExtentMetricRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReportStoreExtentMetricRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReportStoreExtentMetricRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSku() {
		if err := oprot.WriteFieldBegin("sku", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sku: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Sku)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sku (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sku: ", p), err)
		}
	}
	return err
}

func (p *ReportStoreExtentMetricRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoreId() {
		if err := oprot.WriteFieldBegin("storeId", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:storeId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StoreId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.storeId (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:storeId: ", p), err)
		}
	}
	return err
}

func (p *ReportStoreExtentMetricRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *ReportStoreExtentMetricRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetrics() {
		if err := oprot.WriteFieldBegin("metrics", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:metrics: ", p), err)
		}
		if err := p.Metrics.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metrics), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:metrics: ", p), err)
		}
	}
	return err
}

func (p *ReportStoreExtentMetricRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:timestamp: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timestamp (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:timestamp: ", p), err)
		}
	}
	return err
}

func (p *ReportStoreExtentMetricRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportStoreExtentMetricRequest(%+v)", *p)
}

// Attributes:
//  - CPU
//  - Memory
//  - NumberOfActiveExtents
//  - NumberOfConnections
//  - IncomingMessagesPerSecond
//  - IncomingBytesPerSecond
type InputHostCapacities struct {
	CPU                       *int64 `thrift:"cpu,1" json:"cpu,omitempty"`
	Memory                    *int64 `thrift:"memory,2" json:"memory,omitempty"`
	NumberOfActiveExtents     *int64 `thrift:"numberOfActiveExtents,3" json:"numberOfActiveExtents,omitempty"`
	NumberOfConnections       *int64 `thrift:"numberOfConnections,4" json:"numberOfConnections,omitempty"`
	IncomingMessagesPerSecond *int64 `thrift:"incomingMessagesPerSecond,5" json:"incomingMessagesPerSecond,omitempty"`
	IncomingBytesPerSecond    *int64 `thrift:"incomingBytesPerSecond,6" json:"incomingBytesPerSecond,omitempty"`
}

func NewInputHostCapacities() *InputHostCapacities {
	return &InputHostCapacities{}
}

var InputHostCapacities_CPU_DEFAULT int64

func (p *InputHostCapacities) GetCPU() int64 {
	if !p.IsSetCPU() {
		return InputHostCapacities_CPU_DEFAULT
	}
	return *p.CPU
}

var InputHostCapacities_Memory_DEFAULT int64

func (p *InputHostCapacities) GetMemory() int64 {
	if !p.IsSetMemory() {
		return InputHostCapacities_Memory_DEFAULT
	}
	return *p.Memory
}

var InputHostCapacities_NumberOfActiveExtents_DEFAULT int64

func (p *InputHostCapacities) GetNumberOfActiveExtents() int64 {
	if !p.IsSetNumberOfActiveExtents() {
		return InputHostCapacities_NumberOfActiveExtents_DEFAULT
	}
	return *p.NumberOfActiveExtents
}

var InputHostCapacities_NumberOfConnections_DEFAULT int64

func (p *InputHostCapacities) GetNumberOfConnections() int64 {
	if !p.IsSetNumberOfConnections() {
		return InputHostCapacities_NumberOfConnections_DEFAULT
	}
	return *p.NumberOfConnections
}

var InputHostCapacities_IncomingMessagesPerSecond_DEFAULT int64

func (p *InputHostCapacities) GetIncomingMessagesPerSecond() int64 {
	if !p.IsSetIncomingMessagesPerSecond() {
		return InputHostCapacities_IncomingMessagesPerSecond_DEFAULT
	}
	return *p.IncomingMessagesPerSecond
}

var InputHostCapacities_IncomingBytesPerSecond_DEFAULT int64

func (p *InputHostCapacities) GetIncomingBytesPerSecond() int64 {
	if !p.IsSetIncomingBytesPerSecond() {
		return InputHostCapacities_IncomingBytesPerSecond_DEFAULT
	}
	return *p.IncomingBytesPerSecond
}
func (p *InputHostCapacities) IsSetCPU() bool {
	return p.CPU != nil
}

func (p *InputHostCapacities) IsSetMemory() bool {
	return p.Memory != nil
}

func (p *InputHostCapacities) IsSetNumberOfActiveExtents() bool {
	return p.NumberOfActiveExtents != nil
}

func (p *InputHostCapacities) IsSetNumberOfConnections() bool {
	return p.NumberOfConnections != nil
}

func (p *InputHostCapacities) IsSetIncomingMessagesPerSecond() bool {
	return p.IncomingMessagesPerSecond != nil
}

func (p *InputHostCapacities) IsSetIncomingBytesPerSecond() bool {
	return p.IncomingBytesPerSecond != nil
}

func (p *InputHostCapacities) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InputHostCapacities) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CPU = &v
	}
	return nil
}

func (p *InputHostCapacities) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Memory = &v
	}
	return nil
}

func (p *InputHostCapacities) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NumberOfActiveExtents = &v
	}
	return nil
}

func (p *InputHostCapacities) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NumberOfConnections = &v
	}
	return nil
}

func (p *InputHostCapacities) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IncomingMessagesPerSecond = &v
	}
	return nil
}

func (p *InputHostCapacities) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.IncomingBytesPerSecond = &v
	}
	return nil
}

func (p *InputHostCapacities) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InputHostCapacities"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InputHostCapacities) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCPU() {
		if err := oprot.WriteFieldBegin("cpu", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cpu: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CPU)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cpu (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cpu: ", p), err)
		}
	}
	return err
}

func (p *InputHostCapacities) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemory() {
		if err := oprot.WriteFieldBegin("memory", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:memory: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Memory)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.memory (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:memory: ", p), err)
		}
	}
	return err
}

func (p *InputHostCapacities) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumberOfActiveExtents() {
		if err := oprot.WriteFieldBegin("numberOfActiveExtents", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numberOfActiveExtents: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NumberOfActiveExtents)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.numberOfActiveExtents (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numberOfActiveExtents: ", p), err)
		}
	}
	return err
}

func (p *InputHostCapacities) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumberOfConnections() {
		if err := oprot.WriteFieldBegin("numberOfConnections", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:numberOfConnections: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NumberOfConnections)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.numberOfConnections (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:numberOfConnections: ", p), err)
		}
	}
	return err
}

func (p *InputHostCapacities) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncomingMessagesPerSecond() {
		if err := oprot.WriteFieldBegin("incomingMessagesPerSecond", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:incomingMessagesPerSecond: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.IncomingMessagesPerSecond)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.incomingMessagesPerSecond (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:incomingMessagesPerSecond: ", p), err)
		}
	}
	return err
}

func (p *InputHostCapacities) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncomingBytesPerSecond() {
		if err := oprot.WriteFieldBegin("incomingBytesPerSecond", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:incomingBytesPerSecond: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.IncomingBytesPerSecond)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.incomingBytesPerSecond (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:incomingBytesPerSecond: ", p), err)
		}
	}
	return err
}

func (p *InputHostCapacities) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InputHostCapacities(%+v)", *p)
}

// Attributes:
//  - CPU
//  - Memory
//  - NumberOfActiveExtents
//  - NumberOfConnections
//  - OutgoingMessagesPerSecond
//  - OutgoingBytesPerSecond
type OutputHostCapacities struct {
	CPU                       *int64 `thrift:"cpu,1" json:"cpu,omitempty"`
	Memory                    *int64 `thrift:"memory,2" json:"memory,omitempty"`
	NumberOfActiveExtents     *int64 `thrift:"numberOfActiveExtents,3" json:"numberOfActiveExtents,omitempty"`
	NumberOfConnections       *int64 `thrift:"numberOfConnections,4" json:"numberOfConnections,omitempty"`
	OutgoingMessagesPerSecond *int64 `thrift:"outgoingMessagesPerSecond,5" json:"outgoingMessagesPerSecond,omitempty"`
	OutgoingBytesPerSecond    *int64 `thrift:"outgoingBytesPerSecond,6" json:"outgoingBytesPerSecond,omitempty"`
}

func NewOutputHostCapacities() *OutputHostCapacities {
	return &OutputHostCapacities{}
}

var OutputHostCapacities_CPU_DEFAULT int64

func (p *OutputHostCapacities) GetCPU() int64 {
	if !p.IsSetCPU() {
		return OutputHostCapacities_CPU_DEFAULT
	}
	return *p.CPU
}

var OutputHostCapacities_Memory_DEFAULT int64

func (p *OutputHostCapacities) GetMemory() int64 {
	if !p.IsSetMemory() {
		return OutputHostCapacities_Memory_DEFAULT
	}
	return *p.Memory
}

var OutputHostCapacities_NumberOfActiveExtents_DEFAULT int64

func (p *OutputHostCapacities) GetNumberOfActiveExtents() int64 {
	if !p.IsSetNumberOfActiveExtents() {
		return OutputHostCapacities_NumberOfActiveExtents_DEFAULT
	}
	return *p.NumberOfActiveExtents
}

var OutputHostCapacities_NumberOfConnections_DEFAULT int64

func (p *OutputHostCapacities) GetNumberOfConnections() int64 {
	if !p.IsSetNumberOfConnections() {
		return OutputHostCapacities_NumberOfConnections_DEFAULT
	}
	return *p.NumberOfConnections
}

var OutputHostCapacities_OutgoingMessagesPerSecond_DEFAULT int64

func (p *OutputHostCapacities) GetOutgoingMessagesPerSecond() int64 {
	if !p.IsSetOutgoingMessagesPerSecond() {
		return OutputHostCapacities_OutgoingMessagesPerSecond_DEFAULT
	}
	return *p.OutgoingMessagesPerSecond
}

var OutputHostCapacities_OutgoingBytesPerSecond_DEFAULT int64

func (p *OutputHostCapacities) GetOutgoingBytesPerSecond() int64 {
	if !p.IsSetOutgoingBytesPerSecond() {
		return OutputHostCapacities_OutgoingBytesPerSecond_DEFAULT
	}
	return *p.OutgoingBytesPerSecond
}
func (p *OutputHostCapacities) IsSetCPU() bool {
	return p.CPU != nil
}

func (p *OutputHostCapacities) IsSetMemory() bool {
	return p.Memory != nil
}

func (p *OutputHostCapacities) IsSetNumberOfActiveExtents() bool {
	return p.NumberOfActiveExtents != nil
}

func (p *OutputHostCapacities) IsSetNumberOfConnections() bool {
	return p.NumberOfConnections != nil
}

func (p *OutputHostCapacities) IsSetOutgoingMessagesPerSecond() bool {
	return p.OutgoingMessagesPerSecond != nil
}

func (p *OutputHostCapacities) IsSetOutgoingBytesPerSecond() bool {
	return p.OutgoingBytesPerSecond != nil
}

func (p *OutputHostCapacities) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OutputHostCapacities) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CPU = &v
	}
	return nil
}

func (p *OutputHostCapacities) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Memory = &v
	}
	return nil
}

func (p *OutputHostCapacities) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NumberOfActiveExtents = &v
	}
	return nil
}

func (p *OutputHostCapacities) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NumberOfConnections = &v
	}
	return nil
}

func (p *OutputHostCapacities) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.OutgoingMessagesPerSecond = &v
	}
	return nil
}

func (p *OutputHostCapacities) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.OutgoingBytesPerSecond = &v
	}
	return nil
}

func (p *OutputHostCapacities) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OutputHostCapacities"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OutputHostCapacities) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCPU() {
		if err := oprot.WriteFieldBegin("cpu", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cpu: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CPU)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cpu (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cpu: ", p), err)
		}
	}
	return err
}

func (p *OutputHostCapacities) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemory() {
		if err := oprot.WriteFieldBegin("memory", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:memory: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Memory)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.memory (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:memory: ", p), err)
		}
	}
	return err
}

func (p *OutputHostCapacities) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumberOfActiveExtents() {
		if err := oprot.WriteFieldBegin("numberOfActiveExtents", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numberOfActiveExtents: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NumberOfActiveExtents)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.numberOfActiveExtents (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numberOfActiveExtents: ", p), err)
		}
	}
	return err
}

func (p *OutputHostCapacities) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumberOfConnections() {
		if err := oprot.WriteFieldBegin("numberOfConnections", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:numberOfConnections: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NumberOfConnections)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.numberOfConnections (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:numberOfConnections: ", p), err)
		}
	}
	return err
}

func (p *OutputHostCapacities) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutgoingMessagesPerSecond() {
		if err := oprot.WriteFieldBegin("outgoingMessagesPerSecond", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:outgoingMessagesPerSecond: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.OutgoingMessagesPerSecond)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.outgoingMessagesPerSecond (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:outgoingMessagesPerSecond: ", p), err)
		}
	}
	return err
}

func (p *OutputHostCapacities) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutgoingBytesPerSecond() {
		if err := oprot.WriteFieldBegin("outgoingBytesPerSecond", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:outgoingBytesPerSecond: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.OutgoingBytesPerSecond)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.outgoingBytesPerSecond (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:outgoingBytesPerSecond: ", p), err)
		}
	}
	return err
}

func (p *OutputHostCapacities) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OutputHostCapacities(%+v)", *p)
}

// Attributes:
//  - CPU
//  - Memory
//  - NumberOfActiveExtents
//  - NumberOfConnections
//  - RemainingDiskSpace
type StoreCapacities struct {
	CPU                   *int64 `thrift:"cpu,1" json:"cpu,omitempty"`
	Memory                *int64 `thrift:"memory,2" json:"memory,omitempty"`
	NumberOfActiveExtents *int64 `thrift:"numberOfActiveExtents,3" json:"numberOfActiveExtents,omitempty"`
	NumberOfConnections   *int64 `thrift:"numberOfConnections,4" json:"numberOfConnections,omitempty"`
	RemainingDiskSpace    *int64 `thrift:"remainingDiskSpace,5" json:"remainingDiskSpace,omitempty"`
}

func NewStoreCapacities() *StoreCapacities {
	return &StoreCapacities{}
}

var StoreCapacities_CPU_DEFAULT int64

func (p *StoreCapacities) GetCPU() int64 {
	if !p.IsSetCPU() {
		return StoreCapacities_CPU_DEFAULT
	}
	return *p.CPU
}

var StoreCapacities_Memory_DEFAULT int64

func (p *StoreCapacities) GetMemory() int64 {
	if !p.IsSetMemory() {
		return StoreCapacities_Memory_DEFAULT
	}
	return *p.Memory
}

var StoreCapacities_NumberOfActiveExtents_DEFAULT int64

func (p *StoreCapacities) GetNumberOfActiveExtents() int64 {
	if !p.IsSetNumberOfActiveExtents() {
		return StoreCapacities_NumberOfActiveExtents_DEFAULT
	}
	return *p.NumberOfActiveExtents
}

var StoreCapacities_NumberOfConnections_DEFAULT int64

func (p *StoreCapacities) GetNumberOfConnections() int64 {
	if !p.IsSetNumberOfConnections() {
		return StoreCapacities_NumberOfConnections_DEFAULT
	}
	return *p.NumberOfConnections
}

var StoreCapacities_RemainingDiskSpace_DEFAULT int64

func (p *StoreCapacities) GetRemainingDiskSpace() int64 {
	if !p.IsSetRemainingDiskSpace() {
		return StoreCapacities_RemainingDiskSpace_DEFAULT
	}
	return *p.RemainingDiskSpace
}
func (p *StoreCapacities) IsSetCPU() bool {
	return p.CPU != nil
}

func (p *StoreCapacities) IsSetMemory() bool {
	return p.Memory != nil
}

func (p *StoreCapacities) IsSetNumberOfActiveExtents() bool {
	return p.NumberOfActiveExtents != nil
}

func (p *StoreCapacities) IsSetNumberOfConnections() bool {
	return p.NumberOfConnections != nil
}

func (p *StoreCapacities) IsSetRemainingDiskSpace() bool {
	return p.RemainingDiskSpace != nil
}

func (p *StoreCapacities) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StoreCapacities) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CPU = &v
	}
	return nil
}

func (p *StoreCapacities) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Memory = &v
	}
	return nil
}

func (p *StoreCapacities) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NumberOfActiveExtents = &v
	}
	return nil
}

func (p *StoreCapacities) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NumberOfConnections = &v
	}
	return nil
}

func (p *StoreCapacities) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.RemainingDiskSpace = &v
	}
	return nil
}

func (p *StoreCapacities) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StoreCapacities"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StoreCapacities) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCPU() {
		if err := oprot.WriteFieldBegin("cpu", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cpu: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CPU)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cpu (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cpu: ", p), err)
		}
	}
	return err
}

func (p *StoreCapacities) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemory() {
		if err := oprot.WriteFieldBegin("memory", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:memory: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Memory)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.memory (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:memory: ", p), err)
		}
	}
	return err
}

func (p *StoreCapacities) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumberOfActiveExtents() {
		if err := oprot.WriteFieldBegin("numberOfActiveExtents", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numberOfActiveExtents: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NumberOfActiveExtents)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.numberOfActiveExtents (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numberOfActiveExtents: ", p), err)
		}
	}
	return err
}

func (p *StoreCapacities) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumberOfConnections() {
		if err := oprot.WriteFieldBegin("numberOfConnections", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:numberOfConnections: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NumberOfConnections)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.numberOfConnections (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:numberOfConnections: ", p), err)
		}
	}
	return err
}

func (p *StoreCapacities) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemainingDiskSpace() {
		if err := oprot.WriteFieldBegin("remainingDiskSpace", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:remainingDiskSpace: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RemainingDiskSpace)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.remainingDiskSpace (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:remainingDiskSpace: ", p), err)
		}
	}
	return err
}

func (p *StoreCapacities) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StoreCapacities(%+v)", *p)
}

// Attributes:
//  - Sku
//  - Capacities
type UpsertInputHostCapacitiesRequest struct {
	Sku        *SKU                 `thrift:"sku,1" json:"sku,omitempty"`
	Capacities *InputHostCapacities `thrift:"capacities,2" json:"capacities,omitempty"`
}

func NewUpsertInputHostCapacitiesRequest() *UpsertInputHostCapacitiesRequest {
	return &UpsertInputHostCapacitiesRequest{}
}

var UpsertInputHostCapacitiesRequest_Sku_DEFAULT SKU

func (p *UpsertInputHostCapacitiesRequest) GetSku() SKU {
	if !p.IsSetSku() {
		return UpsertInputHostCapacitiesRequest_Sku_DEFAULT
	}
	return *p.Sku
}

var UpsertInputHostCapacitiesRequest_Capacities_DEFAULT *InputHostCapacities

func (p *UpsertInputHostCapacitiesRequest) GetCapacities() *InputHostCapacities {
	if !p.IsSetCapacities() {
		return UpsertInputHostCapacitiesRequest_Capacities_DEFAULT
	}
	return p.Capacities
}
func (p *UpsertInputHostCapacitiesRequest) IsSetSku() bool {
	return p.Sku != nil
}

func (p *UpsertInputHostCapacitiesRequest) IsSetCapacities() bool {
	return p.Capacities != nil
}

func (p *UpsertInputHostCapacitiesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpsertInputHostCapacitiesRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SKU(v)
		p.Sku = &temp
	}
	return nil
}

func (p *UpsertInputHostCapacitiesRequest) readField2(iprot thrift.TProtocol) error {
	p.Capacities = &InputHostCapacities{}
	if err := p.Capacities.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Capacities), err)
	}
	return nil
}

func (p *UpsertInputHostCapacitiesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpsertInputHostCapacitiesRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpsertInputHostCapacitiesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSku() {
		if err := oprot.WriteFieldBegin("sku", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sku: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Sku)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sku (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sku: ", p), err)
		}
	}
	return err
}

func (p *UpsertInputHostCapacitiesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCapacities() {
		if err := oprot.WriteFieldBegin("capacities", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:capacities: ", p), err)
		}
		if err := p.Capacities.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Capacities), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:capacities: ", p), err)
		}
	}
	return err
}

func (p *UpsertInputHostCapacitiesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpsertInputHostCapacitiesRequest(%+v)", *p)
}

// Attributes:
//  - Sku
//  - Capacities
type UpsertOutputHostCapacitiesRequest struct {
	Sku        *SKU                  `thrift:"sku,1" json:"sku,omitempty"`
	Capacities *OutputHostCapacities `thrift:"capacities,2" json:"capacities,omitempty"`
}

func NewUpsertOutputHostCapacitiesRequest() *UpsertOutputHostCapacitiesRequest {
	return &UpsertOutputHostCapacitiesRequest{}
}

var UpsertOutputHostCapacitiesRequest_Sku_DEFAULT SKU

func (p *UpsertOutputHostCapacitiesRequest) GetSku() SKU {
	if !p.IsSetSku() {
		return UpsertOutputHostCapacitiesRequest_Sku_DEFAULT
	}
	return *p.Sku
}

var UpsertOutputHostCapacitiesRequest_Capacities_DEFAULT *OutputHostCapacities

func (p *UpsertOutputHostCapacitiesRequest) GetCapacities() *OutputHostCapacities {
	if !p.IsSetCapacities() {
		return UpsertOutputHostCapacitiesRequest_Capacities_DEFAULT
	}
	return p.Capacities
}
func (p *UpsertOutputHostCapacitiesRequest) IsSetSku() bool {
	return p.Sku != nil
}

func (p *UpsertOutputHostCapacitiesRequest) IsSetCapacities() bool {
	return p.Capacities != nil
}

func (p *UpsertOutputHostCapacitiesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpsertOutputHostCapacitiesRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SKU(v)
		p.Sku = &temp
	}
	return nil
}

func (p *UpsertOutputHostCapacitiesRequest) readField2(iprot thrift.TProtocol) error {
	p.Capacities = &OutputHostCapacities{}
	if err := p.Capacities.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Capacities), err)
	}
	return nil
}

func (p *UpsertOutputHostCapacitiesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpsertOutputHostCapacitiesRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpsertOutputHostCapacitiesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSku() {
		if err := oprot.WriteFieldBegin("sku", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sku: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Sku)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sku (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sku: ", p), err)
		}
	}
	return err
}

func (p *UpsertOutputHostCapacitiesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCapacities() {
		if err := oprot.WriteFieldBegin("capacities", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:capacities: ", p), err)
		}
		if err := p.Capacities.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Capacities), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:capacities: ", p), err)
		}
	}
	return err
}

func (p *UpsertOutputHostCapacitiesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpsertOutputHostCapacitiesRequest(%+v)", *p)
}

// Attributes:
//  - Sku
//  - Capacities
type UpsertStoreCapacitiesRequest struct {
	Sku        *SKU             `thrift:"sku,1" json:"sku,omitempty"`
	Capacities *StoreCapacities `thrift:"capacities,2" json:"capacities,omitempty"`
}

func NewUpsertStoreCapacitiesRequest() *UpsertStoreCapacitiesRequest {
	return &UpsertStoreCapacitiesRequest{}
}

var UpsertStoreCapacitiesRequest_Sku_DEFAULT SKU

func (p *UpsertStoreCapacitiesRequest) GetSku() SKU {
	if !p.IsSetSku() {
		return UpsertStoreCapacitiesRequest_Sku_DEFAULT
	}
	return *p.Sku
}

var UpsertStoreCapacitiesRequest_Capacities_DEFAULT *StoreCapacities

func (p *UpsertStoreCapacitiesRequest) GetCapacities() *StoreCapacities {
	if !p.IsSetCapacities() {
		return UpsertStoreCapacitiesRequest_Capacities_DEFAULT
	}
	return p.Capacities
}
func (p *UpsertStoreCapacitiesRequest) IsSetSku() bool {
	return p.Sku != nil
}

func (p *UpsertStoreCapacitiesRequest) IsSetCapacities() bool {
	return p.Capacities != nil
}

func (p *UpsertStoreCapacitiesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpsertStoreCapacitiesRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SKU(v)
		p.Sku = &temp
	}
	return nil
}

func (p *UpsertStoreCapacitiesRequest) readField2(iprot thrift.TProtocol) error {
	p.Capacities = &StoreCapacities{}
	if err := p.Capacities.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Capacities), err)
	}
	return nil
}

func (p *UpsertStoreCapacitiesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpsertStoreCapacitiesRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpsertStoreCapacitiesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSku() {
		if err := oprot.WriteFieldBegin("sku", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sku: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Sku)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sku (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sku: ", p), err)
		}
	}
	return err
}

func (p *UpsertStoreCapacitiesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCapacities() {
		if err := oprot.WriteFieldBegin("capacities", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:capacities: ", p), err)
		}
		if err := p.Capacities.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Capacities), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:capacities: ", p), err)
		}
	}
	return err
}

func (p *UpsertStoreCapacitiesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpsertStoreCapacitiesRequest(%+v)", *p)
}

// Attributes:
//  - Sku
//  - Role
type RemoveCapacitiesRequest struct {
	Sku  *SKU  `thrift:"sku,1" json:"sku,omitempty"`
	Role *Role `thrift:"role,2" json:"role,omitempty"`
}

func NewRemoveCapacitiesRequest() *RemoveCapacitiesRequest {
	return &RemoveCapacitiesRequest{}
}

var RemoveCapacitiesRequest_Sku_DEFAULT SKU

func (p *RemoveCapacitiesRequest) GetSku() SKU {
	if !p.IsSetSku() {
		return RemoveCapacitiesRequest_Sku_DEFAULT
	}
	return *p.Sku
}

var RemoveCapacitiesRequest_Role_DEFAULT Role

func (p *RemoveCapacitiesRequest) GetRole() Role {
	if !p.IsSetRole() {
		return RemoveCapacitiesRequest_Role_DEFAULT
	}
	return *p.Role
}
func (p *RemoveCapacitiesRequest) IsSetSku() bool {
	return p.Sku != nil
}

func (p *RemoveCapacitiesRequest) IsSetRole() bool {
	return p.Role != nil
}

func (p *RemoveCapacitiesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoveCapacitiesRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SKU(v)
		p.Sku = &temp
	}
	return nil
}

func (p *RemoveCapacitiesRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Role(v)
		p.Role = &temp
	}
	return nil
}

func (p *RemoveCapacitiesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RemoveCapacitiesRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoveCapacitiesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSku() {
		if err := oprot.WriteFieldBegin("sku", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sku: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Sku)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sku (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sku: ", p), err)
		}
	}
	return err
}

func (p *RemoveCapacitiesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRole() {
		if err := oprot.WriteFieldBegin("role", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:role: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Role)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.role (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:role: ", p), err)
		}
	}
	return err
}

func (p *RemoveCapacitiesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveCapacitiesRequest(%+v)", *p)
}

// Attributes:
//  - Sku
//  - Role
type GetCapacitiesRequest struct {
	Sku  *SKU  `thrift:"sku,1" json:"sku,omitempty"`
	Role *Role `thrift:"role,2" json:"role,omitempty"`
}

func NewGetCapacitiesRequest() *GetCapacitiesRequest {
	return &GetCapacitiesRequest{}
}

var GetCapacitiesRequest_Sku_DEFAULT SKU

func (p *GetCapacitiesRequest) GetSku() SKU {
	if !p.IsSetSku() {
		return GetCapacitiesRequest_Sku_DEFAULT
	}
	return *p.Sku
}

var GetCapacitiesRequest_Role_DEFAULT Role

func (p *GetCapacitiesRequest) GetRole() Role {
	if !p.IsSetRole() {
		return GetCapacitiesRequest_Role_DEFAULT
	}
	return *p.Role
}
func (p *GetCapacitiesRequest) IsSetSku() bool {
	return p.Sku != nil
}

func (p *GetCapacitiesRequest) IsSetRole() bool {
	return p.Role != nil
}

func (p *GetCapacitiesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetCapacitiesRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SKU(v)
		p.Sku = &temp
	}
	return nil
}

func (p *GetCapacitiesRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Role(v)
		p.Role = &temp
	}
	return nil
}

func (p *GetCapacitiesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetCapacitiesRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetCapacitiesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSku() {
		if err := oprot.WriteFieldBegin("sku", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sku: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Sku)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sku (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sku: ", p), err)
		}
	}
	return err
}

func (p *GetCapacitiesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRole() {
		if err := oprot.WriteFieldBegin("role", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:role: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Role)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.role (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:role: ", p), err)
		}
	}
	return err
}

func (p *GetCapacitiesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCapacitiesRequest(%+v)", *p)
}

// Attributes:
//  - InputHostCapacities
//  - OutputHostCapacities
//  - StoreCapacities
type GetCapacitiesResult_ struct {
	InputHostCapacities  *InputHostCapacities  `thrift:"inputHostCapacities,1" json:"inputHostCapacities,omitempty"`
	OutputHostCapacities *OutputHostCapacities `thrift:"outputHostCapacities,2" json:"outputHostCapacities,omitempty"`
	StoreCapacities      *StoreCapacities      `thrift:"storeCapacities,3" json:"storeCapacities,omitempty"`
}

func NewGetCapacitiesResult_() *GetCapacitiesResult_ {
	return &GetCapacitiesResult_{}
}

var GetCapacitiesResult__InputHostCapacities_DEFAULT *InputHostCapacities

func (p *GetCapacitiesResult_) GetInputHostCapacities() *InputHostCapacities {
	if !p.IsSetInputHostCapacities() {
		return GetCapacitiesResult__InputHostCapacities_DEFAULT
	}
	return p.InputHostCapacities
}

var GetCapacitiesResult__OutputHostCapacities_DEFAULT *OutputHostCapacities

func (p *GetCapacitiesResult_) GetOutputHostCapacities() *OutputHostCapacities {
	if !p.IsSetOutputHostCapacities() {
		return GetCapacitiesResult__OutputHostCapacities_DEFAULT
	}
	return p.OutputHostCapacities
}

var GetCapacitiesResult__StoreCapacities_DEFAULT *StoreCapacities

func (p *GetCapacitiesResult_) GetStoreCapacities() *StoreCapacities {
	if !p.IsSetStoreCapacities() {
		return GetCapacitiesResult__StoreCapacities_DEFAULT
	}
	return p.StoreCapacities
}
func (p *GetCapacitiesResult_) IsSetInputHostCapacities() bool {
	return p.InputHostCapacities != nil
}

func (p *GetCapacitiesResult_) IsSetOutputHostCapacities() bool {
	return p.OutputHostCapacities != nil
}

func (p *GetCapacitiesResult_) IsSetStoreCapacities() bool {
	return p.StoreCapacities != nil
}

func (p *GetCapacitiesResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetCapacitiesResult_) readField1(iprot thrift.TProtocol) error {
	p.InputHostCapacities = &InputHostCapacities{}
	if err := p.InputHostCapacities.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InputHostCapacities), err)
	}
	return nil
}

func (p *GetCapacitiesResult_) readField2(iprot thrift.TProtocol) error {
	p.OutputHostCapacities = &OutputHostCapacities{}
	if err := p.OutputHostCapacities.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OutputHostCapacities), err)
	}
	return nil
}

func (p *GetCapacitiesResult_) readField3(iprot thrift.TProtocol) error {
	p.StoreCapacities = &StoreCapacities{}
	if err := p.StoreCapacities.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StoreCapacities), err)
	}
	return nil
}

func (p *GetCapacitiesResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetCapacitiesResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetCapacitiesResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputHostCapacities() {
		if err := oprot.WriteFieldBegin("inputHostCapacities", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inputHostCapacities: ", p), err)
		}
		if err := p.InputHostCapacities.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InputHostCapacities), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inputHostCapacities: ", p), err)
		}
	}
	return err
}

func (p *GetCapacitiesResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputHostCapacities() {
		if err := oprot.WriteFieldBegin("outputHostCapacities", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:outputHostCapacities: ", p), err)
		}
		if err := p.OutputHostCapacities.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OutputHostCapacities), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:outputHostCapacities: ", p), err)
		}
	}
	return err
}

func (p *GetCapacitiesResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoreCapacities() {
		if err := oprot.WriteFieldBegin("storeCapacities", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:storeCapacities: ", p), err)
		}
		if err := p.StoreCapacities.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StoreCapacities), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:storeCapacities: ", p), err)
		}
	}
	return err
}

func (p *GetCapacitiesResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCapacitiesResult_(%+v)", *p)
}

// Attributes:
//  - Key
type GetQueueDepthInfoRequest struct {
	Key *string `thrift:"key,1" json:"key,omitempty"`
}

func NewGetQueueDepthInfoRequest() *GetQueueDepthInfoRequest {
	return &GetQueueDepthInfoRequest{}
}

var GetQueueDepthInfoRequest_Key_DEFAULT string

func (p *GetQueueDepthInfoRequest) GetKey() string {
	if !p.IsSetKey() {
		return GetQueueDepthInfoRequest_Key_DEFAULT
	}
	return *p.Key
}
func (p *GetQueueDepthInfoRequest) IsSetKey() bool {
	return p.Key != nil
}

func (p *GetQueueDepthInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetQueueDepthInfoRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = &v
	}
	return nil
}

func (p *GetQueueDepthInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetQueueDepthInfoRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetQueueDepthInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Key)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
		}
	}
	return err
}

func (p *GetQueueDepthInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetQueueDepthInfoRequest(%+v)", *p)
}

// Attributes:
//  - Value
type GetQueueDepthInfoResult_ struct {
	Value *string `thrift:"value,1" json:"value,omitempty"`
}

func NewGetQueueDepthInfoResult_() *GetQueueDepthInfoResult_ {
	return &GetQueueDepthInfoResult_{}
}

var GetQueueDepthInfoResult__Value_DEFAULT string

func (p *GetQueueDepthInfoResult_) GetValue() string {
	if !p.IsSetValue() {
		return GetQueueDepthInfoResult__Value_DEFAULT
	}
	return *p.Value
}
func (p *GetQueueDepthInfoResult_) IsSetValue() bool {
	return p.Value != nil
}

func (p *GetQueueDepthInfoResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetQueueDepthInfoResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Value = &v
	}
	return nil
}

func (p *GetQueueDepthInfoResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetQueueDepthInfoResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetQueueDepthInfoResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Value)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err)
		}
	}
	return err
}

func (p *GetQueueDepthInfoResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetQueueDepthInfoResult_(%+v)", *p)
}
