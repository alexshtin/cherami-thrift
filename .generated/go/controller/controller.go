// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package controller

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/cherami-thrift/.generated/go/shared"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = shared.GoUnusedProtection__

type Controller interface { //InputHost Stats:
	//1) CPU
	//2) Memory
	//3) NumberOfActiveExtents
	//4) NumberOfConnections
	//
	//OutputHost Stats:
	//1) CPU
	//2) Memory
	//3) NumberOfActiveExtents
	//4) NumberOfConnections
	//
	//StoreHost Stats:
	//1) CPU
	//2) Memory
	//3) RemainingDiskSpace
	//4) NumberOfActiveExtents
	//5) NumberOfConnections
	//
	//Destination Stats: [Dimensions: ExtentId, InputHostId, DestinationId, TChannelId]
	//1) IncomingMessagesPerSecond
	//2) IncomingBytesPerSecond
	//3) PutMessageLatency
	//
	//ConsumerGroup Stats: [Dimensions: ExtentId, OutputHostId, ConsumerGroupId, TChannelId]
	//1) OutgoingMessagesPerSecond
	//2) OutgoingBytesPerSecond
	//
	//StoreExtent Stats: [Dimensions: ExtentId, StoreId, DestinationId, ConsumerGroupId, TChannelId]
	//
	//

	// ******************** Host Placement **********************************
	//
	// Parameters:
	//  - GetHostsRequest
	GetInputHosts(getHostsRequest *GetInputHostsRequest) (r *GetInputHostsResult_, err error)
	// Parameters:
	//  - GetHostsRequest
	GetOutputHosts(getHostsRequest *GetOutputHostsRequest) (r *GetOutputHostsResult_, err error)
	// ******************** Destination CUD *********************************
	//
	// Parameters:
	//  - CreateRequest
	CreateDestination(createRequest *shared.CreateDestinationRequest) (r *shared.DestinationDescription, err error)
	// Parameters:
	//  - UpdateRequest
	UpdateDestination(updateRequest *shared.UpdateDestinationRequest) (r *shared.DestinationDescription, err error)
	// Parameters:
	//  - DeleteRequest
	DeleteDestination(deleteRequest *shared.DeleteDestinationRequest) (err error)
	// ******************** ConsumerGroup CUD *******************************
	//
	// Parameters:
	//  - CreateRequest
	CreateConsumerGroup(createRequest *shared.CreateConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error)
	// Parameters:
	//  - UpdateRequest
	UpdateConsumerGroup(updateRequest *shared.UpdateConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error)
	// Parameters:
	//  - DeleteRequest
	DeleteConsumerGroup(deleteRequest *shared.DeleteConsumerGroupRequest) (err error)
	// ******************** Extent Creation ***********************************
	//
	// Parameters:
	//  - CreateRequest
	CreateRemoteZoneExtent(createRequest *shared.CreateExtentRequest) (r *shared.CreateExtentResult_, err error)
	// ****************** Report Load ***************************************
	//
	// Parameters:
	//  - ReportMetricRequest
	ReportNodeMetric(reportMetricRequest *ReportNodeMetricRequest) (err error)
	// Parameters:
	//  - ReportMetricRequest
	ReportDestinationMetric(reportMetricRequest *ReportDestinationMetricRequest) (err error)
	// Parameters:
	//  - ReportMetricRequest
	ReportDestinationExtentMetric(reportMetricRequest *ReportDestinationExtentMetricRequest) (err error)
	// Parameters:
	//  - ReportMetricRequest
	ReportConsumerGroupMetric(reportMetricRequest *ReportConsumerGroupMetricRequest) (err error)
	// Parameters:
	//  - ReportMetricRequest
	ReportConsumerGroupExtentMetric(reportMetricRequest *ReportConsumerGroupExtentMetricRequest) (err error)
	// Parameters:
	//  - ReportMetricRequest
	ReportStoreExtentMetric(reportMetricRequest *ReportStoreExtentMetricRequest) (err error)
	// ********* Node Capacity Constraints CRUD *****************************
	//
	// Parameters:
	//  - UpsertCapacitiesRequest
	UpsertInputHostCapacities(upsertCapacitiesRequest *UpsertInputHostCapacitiesRequest) (err error)
	// Parameters:
	//  - UpsertCapacitiesRequest
	UpsertOutputHostCapacities(upsertCapacitiesRequest *UpsertOutputHostCapacitiesRequest) (err error)
	// Parameters:
	//  - UpsertCapacitiesRequest
	UpsertStoreCapacities(upsertCapacitiesRequest *UpsertStoreCapacitiesRequest) (err error)
	// Parameters:
	//  - RemoveCapacitiesRequest
	RemoveCapacities(removeCapacitiesRequest *RemoveCapacitiesRequest) (err error)
	// Parameters:
	//  - GetCapacitiesRequest
	GetCapacities(getCapacitiesRequest *GetCapacitiesRequest) (r *GetCapacitiesResult_, err error)
	// ********* Queue Information  *****************************
	//
	// Parameters:
	//  - GetQueueDepthInfoRequest
	GetQueueDepthInfo(getQueueDepthInfoRequest *GetQueueDepthInfoRequest) (r *GetQueueDepthInfoResult_, err error)
}

//InputHost Stats:
//1) CPU
//2) Memory
//3) NumberOfActiveExtents
//4) NumberOfConnections
//
//OutputHost Stats:
//1) CPU
//2) Memory
//3) NumberOfActiveExtents
//4) NumberOfConnections
//
//StoreHost Stats:
//1) CPU
//2) Memory
//3) RemainingDiskSpace
//4) NumberOfActiveExtents
//5) NumberOfConnections
//
//Destination Stats: [Dimensions: ExtentId, InputHostId, DestinationId, TChannelId]
//1) IncomingMessagesPerSecond
//2) IncomingBytesPerSecond
//3) PutMessageLatency
//
//ConsumerGroup Stats: [Dimensions: ExtentId, OutputHostId, ConsumerGroupId, TChannelId]
//1) OutgoingMessagesPerSecond
//2) OutgoingBytesPerSecond
//
//StoreExtent Stats: [Dimensions: ExtentId, StoreId, DestinationId, ConsumerGroupId, TChannelId]
//
//
type ControllerClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewControllerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ControllerClient {
	return &ControllerClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewControllerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ControllerClient {
	return &ControllerClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// ******************** Host Placement **********************************
//
// Parameters:
//  - GetHostsRequest
func (p *ControllerClient) GetInputHosts(getHostsRequest *GetInputHostsRequest) (r *GetInputHostsResult_, err error) {
	if err = p.sendGetInputHosts(getHostsRequest); err != nil {
		return
	}
	return p.recvGetInputHosts()
}

func (p *ControllerClient) sendGetInputHosts(getHostsRequest *GetInputHostsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getInputHosts", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ControllerGetInputHostsArgs{
		GetHostsRequest: getHostsRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ControllerClient) recvGetInputHosts() (value *GetInputHostsResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getInputHosts" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getInputHosts failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getInputHosts failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getInputHosts failed: invalid message type")
		return
	}
	result := ControllerGetInputHostsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalError != nil {
		err = result.InternalError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GetHostsRequest
func (p *ControllerClient) GetOutputHosts(getHostsRequest *GetOutputHostsRequest) (r *GetOutputHostsResult_, err error) {
	if err = p.sendGetOutputHosts(getHostsRequest); err != nil {
		return
	}
	return p.recvGetOutputHosts()
}

func (p *ControllerClient) sendGetOutputHosts(getHostsRequest *GetOutputHostsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getOutputHosts", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ControllerGetOutputHostsArgs{
		GetHostsRequest: getHostsRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ControllerClient) recvGetOutputHosts() (value *GetOutputHostsResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getOutputHosts" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getOutputHosts failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getOutputHosts failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getOutputHosts failed: invalid message type")
		return
	}
	result := ControllerGetOutputHostsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalError != nil {
		err = result.InternalError
		return
	}
	value = result.GetSuccess()
	return
}

// ******************** Destination CUD *********************************
//
// Parameters:
//  - CreateRequest
func (p *ControllerClient) CreateDestination(createRequest *shared.CreateDestinationRequest) (r *shared.DestinationDescription, err error) {
	if err = p.sendCreateDestination(createRequest); err != nil {
		return
	}
	return p.recvCreateDestination()
}

func (p *ControllerClient) sendCreateDestination(createRequest *shared.CreateDestinationRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createDestination", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ControllerCreateDestinationArgs{
		CreateRequest: createRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ControllerClient) recvCreateDestination() (value *shared.DestinationDescription, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createDestination" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createDestination failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createDestination failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createDestination failed: invalid message type")
		return
	}
	result := ControllerCreateDestinationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityExistsError != nil {
		err = result.EntityExistsError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalError != nil {
		err = result.InternalError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UpdateRequest
func (p *ControllerClient) UpdateDestination(updateRequest *shared.UpdateDestinationRequest) (r *shared.DestinationDescription, err error) {
	if err = p.sendUpdateDestination(updateRequest); err != nil {
		return
	}
	return p.recvUpdateDestination()
}

func (p *ControllerClient) sendUpdateDestination(updateRequest *shared.UpdateDestinationRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateDestination", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ControllerUpdateDestinationArgs{
		UpdateRequest: updateRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ControllerClient) recvUpdateDestination() (value *shared.DestinationDescription, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateDestination" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateDestination failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateDestination failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateDestination failed: invalid message type")
		return
	}
	result := ControllerUpdateDestinationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalError != nil {
		err = result.InternalError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DeleteRequest
func (p *ControllerClient) DeleteDestination(deleteRequest *shared.DeleteDestinationRequest) (err error) {
	if err = p.sendDeleteDestination(deleteRequest); err != nil {
		return
	}
	return p.recvDeleteDestination()
}

func (p *ControllerClient) sendDeleteDestination(deleteRequest *shared.DeleteDestinationRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteDestination", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ControllerDeleteDestinationArgs{
		DeleteRequest: deleteRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ControllerClient) recvDeleteDestination() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deleteDestination" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteDestination failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteDestination failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteDestination failed: invalid message type")
		return
	}
	result := ControllerDeleteDestinationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalError != nil {
		err = result.InternalError
		return
	}
	return
}

// ******************** ConsumerGroup CUD *******************************
//
// Parameters:
//  - CreateRequest
func (p *ControllerClient) CreateConsumerGroup(createRequest *shared.CreateConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error) {
	if err = p.sendCreateConsumerGroup(createRequest); err != nil {
		return
	}
	return p.recvCreateConsumerGroup()
}

func (p *ControllerClient) sendCreateConsumerGroup(createRequest *shared.CreateConsumerGroupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createConsumerGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ControllerCreateConsumerGroupArgs{
		CreateRequest: createRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ControllerClient) recvCreateConsumerGroup() (value *shared.ConsumerGroupDescription, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createConsumerGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createConsumerGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createConsumerGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createConsumerGroup failed: invalid message type")
		return
	}
	result := ControllerCreateConsumerGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityExistsError != nil {
		err = result.EntityExistsError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalError != nil {
		err = result.InternalError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UpdateRequest
func (p *ControllerClient) UpdateConsumerGroup(updateRequest *shared.UpdateConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error) {
	if err = p.sendUpdateConsumerGroup(updateRequest); err != nil {
		return
	}
	return p.recvUpdateConsumerGroup()
}

func (p *ControllerClient) sendUpdateConsumerGroup(updateRequest *shared.UpdateConsumerGroupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateConsumerGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ControllerUpdateConsumerGroupArgs{
		UpdateRequest: updateRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ControllerClient) recvUpdateConsumerGroup() (value *shared.ConsumerGroupDescription, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateConsumerGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateConsumerGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateConsumerGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateConsumerGroup failed: invalid message type")
		return
	}
	result := ControllerUpdateConsumerGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalError != nil {
		err = result.InternalError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DeleteRequest
func (p *ControllerClient) DeleteConsumerGroup(deleteRequest *shared.DeleteConsumerGroupRequest) (err error) {
	if err = p.sendDeleteConsumerGroup(deleteRequest); err != nil {
		return
	}
	return p.recvDeleteConsumerGroup()
}

func (p *ControllerClient) sendDeleteConsumerGroup(deleteRequest *shared.DeleteConsumerGroupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteConsumerGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ControllerDeleteConsumerGroupArgs{
		DeleteRequest: deleteRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ControllerClient) recvDeleteConsumerGroup() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deleteConsumerGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteConsumerGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteConsumerGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error17 error
		error17, err = error16.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error17
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteConsumerGroup failed: invalid message type")
		return
	}
	result := ControllerDeleteConsumerGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalError != nil {
		err = result.InternalError
		return
	}
	return
}

// ******************** Extent Creation ***********************************
//
// Parameters:
//  - CreateRequest
func (p *ControllerClient) CreateRemoteZoneExtent(createRequest *shared.CreateExtentRequest) (r *shared.CreateExtentResult_, err error) {
	if err = p.sendCreateRemoteZoneExtent(createRequest); err != nil {
		return
	}
	return p.recvCreateRemoteZoneExtent()
}

func (p *ControllerClient) sendCreateRemoteZoneExtent(createRequest *shared.CreateExtentRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createRemoteZoneExtent", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ControllerCreateRemoteZoneExtentArgs{
		CreateRequest: createRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ControllerClient) recvCreateRemoteZoneExtent() (value *shared.CreateExtentResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createRemoteZoneExtent" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createRemoteZoneExtent failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createRemoteZoneExtent failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createRemoteZoneExtent failed: invalid message type")
		return
	}
	result := ControllerCreateRemoteZoneExtentResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityExistsError != nil {
		err = result.EntityExistsError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalError != nil {
		err = result.InternalError
		return
	}
	value = result.GetSuccess()
	return
}

// ****************** Report Load ***************************************
//
// Parameters:
//  - ReportMetricRequest
func (p *ControllerClient) ReportNodeMetric(reportMetricRequest *ReportNodeMetricRequest) (err error) {
	if err = p.sendReportNodeMetric(reportMetricRequest); err != nil {
		return
	}
	return p.recvReportNodeMetric()
}

func (p *ControllerClient) sendReportNodeMetric(reportMetricRequest *ReportNodeMetricRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reportNodeMetric", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ControllerReportNodeMetricArgs{
		ReportMetricRequest: reportMetricRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ControllerClient) recvReportNodeMetric() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "reportNodeMetric" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "reportNodeMetric failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reportNodeMetric failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error21 error
		error21, err = error20.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error21
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "reportNodeMetric failed: invalid message type")
		return
	}
	result := ControllerReportNodeMetricResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - ReportMetricRequest
func (p *ControllerClient) ReportDestinationMetric(reportMetricRequest *ReportDestinationMetricRequest) (err error) {
	if err = p.sendReportDestinationMetric(reportMetricRequest); err != nil {
		return
	}
	return p.recvReportDestinationMetric()
}

func (p *ControllerClient) sendReportDestinationMetric(reportMetricRequest *ReportDestinationMetricRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reportDestinationMetric", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ControllerReportDestinationMetricArgs{
		ReportMetricRequest: reportMetricRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ControllerClient) recvReportDestinationMetric() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "reportDestinationMetric" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "reportDestinationMetric failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reportDestinationMetric failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "reportDestinationMetric failed: invalid message type")
		return
	}
	result := ControllerReportDestinationMetricResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - ReportMetricRequest
func (p *ControllerClient) ReportDestinationExtentMetric(reportMetricRequest *ReportDestinationExtentMetricRequest) (err error) {
	if err = p.sendReportDestinationExtentMetric(reportMetricRequest); err != nil {
		return
	}
	return p.recvReportDestinationExtentMetric()
}

func (p *ControllerClient) sendReportDestinationExtentMetric(reportMetricRequest *ReportDestinationExtentMetricRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reportDestinationExtentMetric", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ControllerReportDestinationExtentMetricArgs{
		ReportMetricRequest: reportMetricRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ControllerClient) recvReportDestinationExtentMetric() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "reportDestinationExtentMetric" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "reportDestinationExtentMetric failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reportDestinationExtentMetric failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error25 error
		error25, err = error24.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error25
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "reportDestinationExtentMetric failed: invalid message type")
		return
	}
	result := ControllerReportDestinationExtentMetricResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - ReportMetricRequest
func (p *ControllerClient) ReportConsumerGroupMetric(reportMetricRequest *ReportConsumerGroupMetricRequest) (err error) {
	if err = p.sendReportConsumerGroupMetric(reportMetricRequest); err != nil {
		return
	}
	return p.recvReportConsumerGroupMetric()
}

func (p *ControllerClient) sendReportConsumerGroupMetric(reportMetricRequest *ReportConsumerGroupMetricRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reportConsumerGroupMetric", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ControllerReportConsumerGroupMetricArgs{
		ReportMetricRequest: reportMetricRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ControllerClient) recvReportConsumerGroupMetric() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "reportConsumerGroupMetric" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "reportConsumerGroupMetric failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reportConsumerGroupMetric failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error27 error
		error27, err = error26.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error27
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "reportConsumerGroupMetric failed: invalid message type")
		return
	}
	result := ControllerReportConsumerGroupMetricResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - ReportMetricRequest
func (p *ControllerClient) ReportConsumerGroupExtentMetric(reportMetricRequest *ReportConsumerGroupExtentMetricRequest) (err error) {
	if err = p.sendReportConsumerGroupExtentMetric(reportMetricRequest); err != nil {
		return
	}
	return p.recvReportConsumerGroupExtentMetric()
}

func (p *ControllerClient) sendReportConsumerGroupExtentMetric(reportMetricRequest *ReportConsumerGroupExtentMetricRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reportConsumerGroupExtentMetric", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ControllerReportConsumerGroupExtentMetricArgs{
		ReportMetricRequest: reportMetricRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ControllerClient) recvReportConsumerGroupExtentMetric() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "reportConsumerGroupExtentMetric" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "reportConsumerGroupExtentMetric failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reportConsumerGroupExtentMetric failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error29 error
		error29, err = error28.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error29
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "reportConsumerGroupExtentMetric failed: invalid message type")
		return
	}
	result := ControllerReportConsumerGroupExtentMetricResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - ReportMetricRequest
func (p *ControllerClient) ReportStoreExtentMetric(reportMetricRequest *ReportStoreExtentMetricRequest) (err error) {
	if err = p.sendReportStoreExtentMetric(reportMetricRequest); err != nil {
		return
	}
	return p.recvReportStoreExtentMetric()
}

func (p *ControllerClient) sendReportStoreExtentMetric(reportMetricRequest *ReportStoreExtentMetricRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reportStoreExtentMetric", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ControllerReportStoreExtentMetricArgs{
		ReportMetricRequest: reportMetricRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ControllerClient) recvReportStoreExtentMetric() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "reportStoreExtentMetric" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "reportStoreExtentMetric failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reportStoreExtentMetric failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error31 error
		error31, err = error30.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error31
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "reportStoreExtentMetric failed: invalid message type")
		return
	}
	result := ControllerReportStoreExtentMetricResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// ********* Node Capacity Constraints CRUD *****************************
//
// Parameters:
//  - UpsertCapacitiesRequest
func (p *ControllerClient) UpsertInputHostCapacities(upsertCapacitiesRequest *UpsertInputHostCapacitiesRequest) (err error) {
	if err = p.sendUpsertInputHostCapacities(upsertCapacitiesRequest); err != nil {
		return
	}
	return p.recvUpsertInputHostCapacities()
}

func (p *ControllerClient) sendUpsertInputHostCapacities(upsertCapacitiesRequest *UpsertInputHostCapacitiesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("upsertInputHostCapacities", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ControllerUpsertInputHostCapacitiesArgs{
		UpsertCapacitiesRequest: upsertCapacitiesRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ControllerClient) recvUpsertInputHostCapacities() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "upsertInputHostCapacities" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "upsertInputHostCapacities failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "upsertInputHostCapacities failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error33 error
		error33, err = error32.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error33
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "upsertInputHostCapacities failed: invalid message type")
		return
	}
	result := ControllerUpsertInputHostCapacitiesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - UpsertCapacitiesRequest
func (p *ControllerClient) UpsertOutputHostCapacities(upsertCapacitiesRequest *UpsertOutputHostCapacitiesRequest) (err error) {
	if err = p.sendUpsertOutputHostCapacities(upsertCapacitiesRequest); err != nil {
		return
	}
	return p.recvUpsertOutputHostCapacities()
}

func (p *ControllerClient) sendUpsertOutputHostCapacities(upsertCapacitiesRequest *UpsertOutputHostCapacitiesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("upsertOutputHostCapacities", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ControllerUpsertOutputHostCapacitiesArgs{
		UpsertCapacitiesRequest: upsertCapacitiesRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ControllerClient) recvUpsertOutputHostCapacities() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "upsertOutputHostCapacities" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "upsertOutputHostCapacities failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "upsertOutputHostCapacities failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error35 error
		error35, err = error34.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error35
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "upsertOutputHostCapacities failed: invalid message type")
		return
	}
	result := ControllerUpsertOutputHostCapacitiesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - UpsertCapacitiesRequest
func (p *ControllerClient) UpsertStoreCapacities(upsertCapacitiesRequest *UpsertStoreCapacitiesRequest) (err error) {
	if err = p.sendUpsertStoreCapacities(upsertCapacitiesRequest); err != nil {
		return
	}
	return p.recvUpsertStoreCapacities()
}

func (p *ControllerClient) sendUpsertStoreCapacities(upsertCapacitiesRequest *UpsertStoreCapacitiesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("upsertStoreCapacities", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ControllerUpsertStoreCapacitiesArgs{
		UpsertCapacitiesRequest: upsertCapacitiesRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ControllerClient) recvUpsertStoreCapacities() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "upsertStoreCapacities" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "upsertStoreCapacities failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "upsertStoreCapacities failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error37 error
		error37, err = error36.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error37
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "upsertStoreCapacities failed: invalid message type")
		return
	}
	result := ControllerUpsertStoreCapacitiesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - RemoveCapacitiesRequest
func (p *ControllerClient) RemoveCapacities(removeCapacitiesRequest *RemoveCapacitiesRequest) (err error) {
	if err = p.sendRemoveCapacities(removeCapacitiesRequest); err != nil {
		return
	}
	return p.recvRemoveCapacities()
}

func (p *ControllerClient) sendRemoveCapacities(removeCapacitiesRequest *RemoveCapacitiesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("removeCapacities", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ControllerRemoveCapacitiesArgs{
		RemoveCapacitiesRequest: removeCapacitiesRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ControllerClient) recvRemoveCapacities() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "removeCapacities" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "removeCapacities failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "removeCapacities failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error39 error
		error39, err = error38.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error39
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeCapacities failed: invalid message type")
		return
	}
	result := ControllerRemoveCapacitiesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - GetCapacitiesRequest
func (p *ControllerClient) GetCapacities(getCapacitiesRequest *GetCapacitiesRequest) (r *GetCapacitiesResult_, err error) {
	if err = p.sendGetCapacities(getCapacitiesRequest); err != nil {
		return
	}
	return p.recvGetCapacities()
}

func (p *ControllerClient) sendGetCapacities(getCapacitiesRequest *GetCapacitiesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getCapacities", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ControllerGetCapacitiesArgs{
		GetCapacitiesRequest: getCapacitiesRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ControllerClient) recvGetCapacities() (value *GetCapacitiesResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getCapacities" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getCapacities failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCapacities failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error41 error
		error41, err = error40.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error41
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCapacities failed: invalid message type")
		return
	}
	result := ControllerGetCapacitiesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// ********* Queue Information  *****************************
//
// Parameters:
//  - GetQueueDepthInfoRequest
func (p *ControllerClient) GetQueueDepthInfo(getQueueDepthInfoRequest *GetQueueDepthInfoRequest) (r *GetQueueDepthInfoResult_, err error) {
	if err = p.sendGetQueueDepthInfo(getQueueDepthInfoRequest); err != nil {
		return
	}
	return p.recvGetQueueDepthInfo()
}

func (p *ControllerClient) sendGetQueueDepthInfo(getQueueDepthInfoRequest *GetQueueDepthInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getQueueDepthInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ControllerGetQueueDepthInfoArgs{
		GetQueueDepthInfoRequest: getQueueDepthInfoRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ControllerClient) recvGetQueueDepthInfo() (value *GetQueueDepthInfoResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getQueueDepthInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getQueueDepthInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getQueueDepthInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error43 error
		error43, err = error42.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error43
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getQueueDepthInfo failed: invalid message type")
		return
	}
	result := ControllerGetQueueDepthInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.CacheMissError != nil {
		err = result.CacheMissError
		return
	}
	value = result.GetSuccess()
	return
}

type ControllerProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      Controller
}

func (p *ControllerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ControllerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ControllerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewControllerProcessor(handler Controller) *ControllerProcessor {

	self44 := &ControllerProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self44.processorMap["getInputHosts"] = &controllerProcessorGetInputHosts{handler: handler}
	self44.processorMap["getOutputHosts"] = &controllerProcessorGetOutputHosts{handler: handler}
	self44.processorMap["createDestination"] = &controllerProcessorCreateDestination{handler: handler}
	self44.processorMap["updateDestination"] = &controllerProcessorUpdateDestination{handler: handler}
	self44.processorMap["deleteDestination"] = &controllerProcessorDeleteDestination{handler: handler}
	self44.processorMap["createConsumerGroup"] = &controllerProcessorCreateConsumerGroup{handler: handler}
	self44.processorMap["updateConsumerGroup"] = &controllerProcessorUpdateConsumerGroup{handler: handler}
	self44.processorMap["deleteConsumerGroup"] = &controllerProcessorDeleteConsumerGroup{handler: handler}
	self44.processorMap["createRemoteZoneExtent"] = &controllerProcessorCreateRemoteZoneExtent{handler: handler}
	self44.processorMap["reportNodeMetric"] = &controllerProcessorReportNodeMetric{handler: handler}
	self44.processorMap["reportDestinationMetric"] = &controllerProcessorReportDestinationMetric{handler: handler}
	self44.processorMap["reportDestinationExtentMetric"] = &controllerProcessorReportDestinationExtentMetric{handler: handler}
	self44.processorMap["reportConsumerGroupMetric"] = &controllerProcessorReportConsumerGroupMetric{handler: handler}
	self44.processorMap["reportConsumerGroupExtentMetric"] = &controllerProcessorReportConsumerGroupExtentMetric{handler: handler}
	self44.processorMap["reportStoreExtentMetric"] = &controllerProcessorReportStoreExtentMetric{handler: handler}
	self44.processorMap["upsertInputHostCapacities"] = &controllerProcessorUpsertInputHostCapacities{handler: handler}
	self44.processorMap["upsertOutputHostCapacities"] = &controllerProcessorUpsertOutputHostCapacities{handler: handler}
	self44.processorMap["upsertStoreCapacities"] = &controllerProcessorUpsertStoreCapacities{handler: handler}
	self44.processorMap["removeCapacities"] = &controllerProcessorRemoveCapacities{handler: handler}
	self44.processorMap["getCapacities"] = &controllerProcessorGetCapacities{handler: handler}
	self44.processorMap["getQueueDepthInfo"] = &controllerProcessorGetQueueDepthInfo{handler: handler}
	return self44
}

func (p *ControllerProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x45 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x45.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x45

}

type controllerProcessorGetInputHosts struct {
	handler Controller
}

func (p *controllerProcessorGetInputHosts) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ControllerGetInputHostsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getInputHosts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ControllerGetInputHostsResult{}
	var retval *GetInputHostsResult_
	var err2 error
	if retval, err2 = p.handler.GetInputHosts(args.GetHostsRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getInputHosts: "+err2.Error())
			oprot.WriteMessageBegin("getInputHosts", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getInputHosts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type controllerProcessorGetOutputHosts struct {
	handler Controller
}

func (p *controllerProcessorGetOutputHosts) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ControllerGetOutputHostsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getOutputHosts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ControllerGetOutputHostsResult{}
	var retval *GetOutputHostsResult_
	var err2 error
	if retval, err2 = p.handler.GetOutputHosts(args.GetHostsRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getOutputHosts: "+err2.Error())
			oprot.WriteMessageBegin("getOutputHosts", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getOutputHosts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type controllerProcessorCreateDestination struct {
	handler Controller
}

func (p *controllerProcessorCreateDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ControllerCreateDestinationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createDestination", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ControllerCreateDestinationResult{}
	var retval *shared.DestinationDescription
	var err2 error
	if retval, err2 = p.handler.CreateDestination(args.CreateRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.EntityAlreadyExistsError:
			result.EntityExistsError = v
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createDestination: "+err2.Error())
			oprot.WriteMessageBegin("createDestination", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createDestination", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type controllerProcessorUpdateDestination struct {
	handler Controller
}

func (p *controllerProcessorUpdateDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ControllerUpdateDestinationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateDestination", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ControllerUpdateDestinationResult{}
	var retval *shared.DestinationDescription
	var err2 error
	if retval, err2 = p.handler.UpdateDestination(args.UpdateRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.EntityNotExistsError:
			result.EntityError = v
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateDestination: "+err2.Error())
			oprot.WriteMessageBegin("updateDestination", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updateDestination", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type controllerProcessorDeleteDestination struct {
	handler Controller
}

func (p *controllerProcessorDeleteDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ControllerDeleteDestinationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteDestination", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ControllerDeleteDestinationResult{}
	var err2 error
	if err2 = p.handler.DeleteDestination(args.DeleteRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.EntityNotExistsError:
			result.EntityError = v
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteDestination: "+err2.Error())
			oprot.WriteMessageBegin("deleteDestination", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteDestination", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type controllerProcessorCreateConsumerGroup struct {
	handler Controller
}

func (p *controllerProcessorCreateConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ControllerCreateConsumerGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createConsumerGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ControllerCreateConsumerGroupResult{}
	var retval *shared.ConsumerGroupDescription
	var err2 error
	if retval, err2 = p.handler.CreateConsumerGroup(args.CreateRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.EntityAlreadyExistsError:
			result.EntityExistsError = v
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createConsumerGroup: "+err2.Error())
			oprot.WriteMessageBegin("createConsumerGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createConsumerGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type controllerProcessorUpdateConsumerGroup struct {
	handler Controller
}

func (p *controllerProcessorUpdateConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ControllerUpdateConsumerGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateConsumerGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ControllerUpdateConsumerGroupResult{}
	var retval *shared.ConsumerGroupDescription
	var err2 error
	if retval, err2 = p.handler.UpdateConsumerGroup(args.UpdateRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.EntityNotExistsError:
			result.EntityError = v
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateConsumerGroup: "+err2.Error())
			oprot.WriteMessageBegin("updateConsumerGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updateConsumerGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type controllerProcessorDeleteConsumerGroup struct {
	handler Controller
}

func (p *controllerProcessorDeleteConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ControllerDeleteConsumerGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteConsumerGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ControllerDeleteConsumerGroupResult{}
	var err2 error
	if err2 = p.handler.DeleteConsumerGroup(args.DeleteRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.EntityNotExistsError:
			result.EntityError = v
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteConsumerGroup: "+err2.Error())
			oprot.WriteMessageBegin("deleteConsumerGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteConsumerGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type controllerProcessorCreateRemoteZoneExtent struct {
	handler Controller
}

func (p *controllerProcessorCreateRemoteZoneExtent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ControllerCreateRemoteZoneExtentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createRemoteZoneExtent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ControllerCreateRemoteZoneExtentResult{}
	var retval *shared.CreateExtentResult_
	var err2 error
	if retval, err2 = p.handler.CreateRemoteZoneExtent(args.CreateRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.EntityAlreadyExistsError:
			result.EntityExistsError = v
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createRemoteZoneExtent: "+err2.Error())
			oprot.WriteMessageBegin("createRemoteZoneExtent", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createRemoteZoneExtent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type controllerProcessorReportNodeMetric struct {
	handler Controller
}

func (p *controllerProcessorReportNodeMetric) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ControllerReportNodeMetricArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reportNodeMetric", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ControllerReportNodeMetricResult{}
	var err2 error
	if err2 = p.handler.ReportNodeMetric(args.ReportMetricRequest); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportNodeMetric: "+err2.Error())
		oprot.WriteMessageBegin("reportNodeMetric", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("reportNodeMetric", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type controllerProcessorReportDestinationMetric struct {
	handler Controller
}

func (p *controllerProcessorReportDestinationMetric) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ControllerReportDestinationMetricArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reportDestinationMetric", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ControllerReportDestinationMetricResult{}
	var err2 error
	if err2 = p.handler.ReportDestinationMetric(args.ReportMetricRequest); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportDestinationMetric: "+err2.Error())
		oprot.WriteMessageBegin("reportDestinationMetric", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("reportDestinationMetric", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type controllerProcessorReportDestinationExtentMetric struct {
	handler Controller
}

func (p *controllerProcessorReportDestinationExtentMetric) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ControllerReportDestinationExtentMetricArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reportDestinationExtentMetric", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ControllerReportDestinationExtentMetricResult{}
	var err2 error
	if err2 = p.handler.ReportDestinationExtentMetric(args.ReportMetricRequest); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportDestinationExtentMetric: "+err2.Error())
		oprot.WriteMessageBegin("reportDestinationExtentMetric", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("reportDestinationExtentMetric", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type controllerProcessorReportConsumerGroupMetric struct {
	handler Controller
}

func (p *controllerProcessorReportConsumerGroupMetric) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ControllerReportConsumerGroupMetricArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reportConsumerGroupMetric", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ControllerReportConsumerGroupMetricResult{}
	var err2 error
	if err2 = p.handler.ReportConsumerGroupMetric(args.ReportMetricRequest); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportConsumerGroupMetric: "+err2.Error())
		oprot.WriteMessageBegin("reportConsumerGroupMetric", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("reportConsumerGroupMetric", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type controllerProcessorReportConsumerGroupExtentMetric struct {
	handler Controller
}

func (p *controllerProcessorReportConsumerGroupExtentMetric) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ControllerReportConsumerGroupExtentMetricArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reportConsumerGroupExtentMetric", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ControllerReportConsumerGroupExtentMetricResult{}
	var err2 error
	if err2 = p.handler.ReportConsumerGroupExtentMetric(args.ReportMetricRequest); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportConsumerGroupExtentMetric: "+err2.Error())
		oprot.WriteMessageBegin("reportConsumerGroupExtentMetric", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("reportConsumerGroupExtentMetric", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type controllerProcessorReportStoreExtentMetric struct {
	handler Controller
}

func (p *controllerProcessorReportStoreExtentMetric) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ControllerReportStoreExtentMetricArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reportStoreExtentMetric", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ControllerReportStoreExtentMetricResult{}
	var err2 error
	if err2 = p.handler.ReportStoreExtentMetric(args.ReportMetricRequest); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportStoreExtentMetric: "+err2.Error())
		oprot.WriteMessageBegin("reportStoreExtentMetric", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("reportStoreExtentMetric", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type controllerProcessorUpsertInputHostCapacities struct {
	handler Controller
}

func (p *controllerProcessorUpsertInputHostCapacities) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ControllerUpsertInputHostCapacitiesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("upsertInputHostCapacities", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ControllerUpsertInputHostCapacitiesResult{}
	var err2 error
	if err2 = p.handler.UpsertInputHostCapacities(args.UpsertCapacitiesRequest); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing upsertInputHostCapacities: "+err2.Error())
		oprot.WriteMessageBegin("upsertInputHostCapacities", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("upsertInputHostCapacities", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type controllerProcessorUpsertOutputHostCapacities struct {
	handler Controller
}

func (p *controllerProcessorUpsertOutputHostCapacities) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ControllerUpsertOutputHostCapacitiesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("upsertOutputHostCapacities", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ControllerUpsertOutputHostCapacitiesResult{}
	var err2 error
	if err2 = p.handler.UpsertOutputHostCapacities(args.UpsertCapacitiesRequest); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing upsertOutputHostCapacities: "+err2.Error())
		oprot.WriteMessageBegin("upsertOutputHostCapacities", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("upsertOutputHostCapacities", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type controllerProcessorUpsertStoreCapacities struct {
	handler Controller
}

func (p *controllerProcessorUpsertStoreCapacities) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ControllerUpsertStoreCapacitiesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("upsertStoreCapacities", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ControllerUpsertStoreCapacitiesResult{}
	var err2 error
	if err2 = p.handler.UpsertStoreCapacities(args.UpsertCapacitiesRequest); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing upsertStoreCapacities: "+err2.Error())
		oprot.WriteMessageBegin("upsertStoreCapacities", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("upsertStoreCapacities", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type controllerProcessorRemoveCapacities struct {
	handler Controller
}

func (p *controllerProcessorRemoveCapacities) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ControllerRemoveCapacitiesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("removeCapacities", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ControllerRemoveCapacitiesResult{}
	var err2 error
	if err2 = p.handler.RemoveCapacities(args.RemoveCapacitiesRequest); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeCapacities: "+err2.Error())
		oprot.WriteMessageBegin("removeCapacities", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("removeCapacities", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type controllerProcessorGetCapacities struct {
	handler Controller
}

func (p *controllerProcessorGetCapacities) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ControllerGetCapacitiesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCapacities", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ControllerGetCapacitiesResult{}
	var retval *GetCapacitiesResult_
	var err2 error
	if retval, err2 = p.handler.GetCapacities(args.GetCapacitiesRequest); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCapacities: "+err2.Error())
		oprot.WriteMessageBegin("getCapacities", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getCapacities", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type controllerProcessorGetQueueDepthInfo struct {
	handler Controller
}

func (p *controllerProcessorGetQueueDepthInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ControllerGetQueueDepthInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getQueueDepthInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ControllerGetQueueDepthInfoResult{}
	var retval *GetQueueDepthInfoResult_
	var err2 error
	if retval, err2 = p.handler.GetQueueDepthInfo(args.GetQueueDepthInfoRequest); err2 != nil {
		switch v := err2.(type) {
		case *QueueCacheMissError:
			result.CacheMissError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getQueueDepthInfo: "+err2.Error())
			oprot.WriteMessageBegin("getQueueDepthInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getQueueDepthInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - GetHostsRequest
type ControllerGetInputHostsArgs struct {
	GetHostsRequest *GetInputHostsRequest `thrift:"getHostsRequest,1" json:"getHostsRequest"`
}

func NewControllerGetInputHostsArgs() *ControllerGetInputHostsArgs {
	return &ControllerGetInputHostsArgs{}
}

var ControllerGetInputHostsArgs_GetHostsRequest_DEFAULT *GetInputHostsRequest

func (p *ControllerGetInputHostsArgs) GetGetHostsRequest() *GetInputHostsRequest {
	if !p.IsSetGetHostsRequest() {
		return ControllerGetInputHostsArgs_GetHostsRequest_DEFAULT
	}
	return p.GetHostsRequest
}
func (p *ControllerGetInputHostsArgs) IsSetGetHostsRequest() bool {
	return p.GetHostsRequest != nil
}

func (p *ControllerGetInputHostsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerGetInputHostsArgs) readField1(iprot thrift.TProtocol) error {
	p.GetHostsRequest = &GetInputHostsRequest{}
	if err := p.GetHostsRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetHostsRequest), err)
	}
	return nil
}

func (p *ControllerGetInputHostsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getInputHosts_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerGetInputHostsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("getHostsRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getHostsRequest: ", p), err)
	}
	if err := p.GetHostsRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetHostsRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getHostsRequest: ", p), err)
	}
	return err
}

func (p *ControllerGetInputHostsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerGetInputHostsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type ControllerGetInputHostsResult struct {
	Success       *GetInputHostsResult_        `thrift:"success,0" json:"success,omitempty"`
	RequestError  *shared.BadRequestError      `thrift:"requestError,1" json:"requestError,omitempty"`
	InternalError *shared.InternalServiceError `thrift:"internalError,2" json:"internalError,omitempty"`
}

func NewControllerGetInputHostsResult() *ControllerGetInputHostsResult {
	return &ControllerGetInputHostsResult{}
}

var ControllerGetInputHostsResult_Success_DEFAULT *GetInputHostsResult_

func (p *ControllerGetInputHostsResult) GetSuccess() *GetInputHostsResult_ {
	if !p.IsSetSuccess() {
		return ControllerGetInputHostsResult_Success_DEFAULT
	}
	return p.Success
}

var ControllerGetInputHostsResult_RequestError_DEFAULT *shared.BadRequestError

func (p *ControllerGetInputHostsResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return ControllerGetInputHostsResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var ControllerGetInputHostsResult_InternalError_DEFAULT *shared.InternalServiceError

func (p *ControllerGetInputHostsResult) GetInternalError() *shared.InternalServiceError {
	if !p.IsSetInternalError() {
		return ControllerGetInputHostsResult_InternalError_DEFAULT
	}
	return p.InternalError
}
func (p *ControllerGetInputHostsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ControllerGetInputHostsResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *ControllerGetInputHostsResult) IsSetInternalError() bool {
	return p.InternalError != nil
}

func (p *ControllerGetInputHostsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerGetInputHostsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &GetInputHostsResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ControllerGetInputHostsResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *ControllerGetInputHostsResult) readField2(iprot thrift.TProtocol) error {
	p.InternalError = &shared.InternalServiceError{}
	if err := p.InternalError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
	}
	return nil
}

func (p *ControllerGetInputHostsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getInputHosts_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerGetInputHostsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ControllerGetInputHostsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *ControllerGetInputHostsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalError() {
		if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err)
		}
		if err := p.InternalError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err)
		}
	}
	return err
}

func (p *ControllerGetInputHostsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerGetInputHostsResult(%+v)", *p)
}

// Attributes:
//  - GetHostsRequest
type ControllerGetOutputHostsArgs struct {
	GetHostsRequest *GetOutputHostsRequest `thrift:"getHostsRequest,1" json:"getHostsRequest"`
}

func NewControllerGetOutputHostsArgs() *ControllerGetOutputHostsArgs {
	return &ControllerGetOutputHostsArgs{}
}

var ControllerGetOutputHostsArgs_GetHostsRequest_DEFAULT *GetOutputHostsRequest

func (p *ControllerGetOutputHostsArgs) GetGetHostsRequest() *GetOutputHostsRequest {
	if !p.IsSetGetHostsRequest() {
		return ControllerGetOutputHostsArgs_GetHostsRequest_DEFAULT
	}
	return p.GetHostsRequest
}
func (p *ControllerGetOutputHostsArgs) IsSetGetHostsRequest() bool {
	return p.GetHostsRequest != nil
}

func (p *ControllerGetOutputHostsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerGetOutputHostsArgs) readField1(iprot thrift.TProtocol) error {
	p.GetHostsRequest = &GetOutputHostsRequest{}
	if err := p.GetHostsRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetHostsRequest), err)
	}
	return nil
}

func (p *ControllerGetOutputHostsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getOutputHosts_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerGetOutputHostsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("getHostsRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getHostsRequest: ", p), err)
	}
	if err := p.GetHostsRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetHostsRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getHostsRequest: ", p), err)
	}
	return err
}

func (p *ControllerGetOutputHostsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerGetOutputHostsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type ControllerGetOutputHostsResult struct {
	Success       *GetOutputHostsResult_       `thrift:"success,0" json:"success,omitempty"`
	RequestError  *shared.BadRequestError      `thrift:"requestError,1" json:"requestError,omitempty"`
	InternalError *shared.InternalServiceError `thrift:"internalError,2" json:"internalError,omitempty"`
}

func NewControllerGetOutputHostsResult() *ControllerGetOutputHostsResult {
	return &ControllerGetOutputHostsResult{}
}

var ControllerGetOutputHostsResult_Success_DEFAULT *GetOutputHostsResult_

func (p *ControllerGetOutputHostsResult) GetSuccess() *GetOutputHostsResult_ {
	if !p.IsSetSuccess() {
		return ControllerGetOutputHostsResult_Success_DEFAULT
	}
	return p.Success
}

var ControllerGetOutputHostsResult_RequestError_DEFAULT *shared.BadRequestError

func (p *ControllerGetOutputHostsResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return ControllerGetOutputHostsResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var ControllerGetOutputHostsResult_InternalError_DEFAULT *shared.InternalServiceError

func (p *ControllerGetOutputHostsResult) GetInternalError() *shared.InternalServiceError {
	if !p.IsSetInternalError() {
		return ControllerGetOutputHostsResult_InternalError_DEFAULT
	}
	return p.InternalError
}
func (p *ControllerGetOutputHostsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ControllerGetOutputHostsResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *ControllerGetOutputHostsResult) IsSetInternalError() bool {
	return p.InternalError != nil
}

func (p *ControllerGetOutputHostsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerGetOutputHostsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &GetOutputHostsResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ControllerGetOutputHostsResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *ControllerGetOutputHostsResult) readField2(iprot thrift.TProtocol) error {
	p.InternalError = &shared.InternalServiceError{}
	if err := p.InternalError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
	}
	return nil
}

func (p *ControllerGetOutputHostsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getOutputHosts_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerGetOutputHostsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ControllerGetOutputHostsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *ControllerGetOutputHostsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalError() {
		if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err)
		}
		if err := p.InternalError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err)
		}
	}
	return err
}

func (p *ControllerGetOutputHostsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerGetOutputHostsResult(%+v)", *p)
}

// Attributes:
//  - CreateRequest
type ControllerCreateDestinationArgs struct {
	CreateRequest *shared.CreateDestinationRequest `thrift:"createRequest,1" json:"createRequest"`
}

func NewControllerCreateDestinationArgs() *ControllerCreateDestinationArgs {
	return &ControllerCreateDestinationArgs{}
}

var ControllerCreateDestinationArgs_CreateRequest_DEFAULT *shared.CreateDestinationRequest

func (p *ControllerCreateDestinationArgs) GetCreateRequest() *shared.CreateDestinationRequest {
	if !p.IsSetCreateRequest() {
		return ControllerCreateDestinationArgs_CreateRequest_DEFAULT
	}
	return p.CreateRequest
}
func (p *ControllerCreateDestinationArgs) IsSetCreateRequest() bool {
	return p.CreateRequest != nil
}

func (p *ControllerCreateDestinationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerCreateDestinationArgs) readField1(iprot thrift.TProtocol) error {
	p.CreateRequest = &shared.CreateDestinationRequest{}
	if err := p.CreateRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateRequest), err)
	}
	return nil
}

func (p *ControllerCreateDestinationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createDestination_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerCreateDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:createRequest: ", p), err)
	}
	if err := p.CreateRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:createRequest: ", p), err)
	}
	return err
}

func (p *ControllerCreateDestinationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerCreateDestinationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityExistsError
//  - RequestError
//  - InternalError
type ControllerCreateDestinationResult struct {
	Success           *shared.DestinationDescription   `thrift:"success,0" json:"success,omitempty"`
	EntityExistsError *shared.EntityAlreadyExistsError `thrift:"entityExistsError,1" json:"entityExistsError,omitempty"`
	RequestError      *shared.BadRequestError          `thrift:"requestError,2" json:"requestError,omitempty"`
	InternalError     *shared.InternalServiceError     `thrift:"internalError,3" json:"internalError,omitempty"`
}

func NewControllerCreateDestinationResult() *ControllerCreateDestinationResult {
	return &ControllerCreateDestinationResult{}
}

var ControllerCreateDestinationResult_Success_DEFAULT *shared.DestinationDescription

func (p *ControllerCreateDestinationResult) GetSuccess() *shared.DestinationDescription {
	if !p.IsSetSuccess() {
		return ControllerCreateDestinationResult_Success_DEFAULT
	}
	return p.Success
}

var ControllerCreateDestinationResult_EntityExistsError_DEFAULT *shared.EntityAlreadyExistsError

func (p *ControllerCreateDestinationResult) GetEntityExistsError() *shared.EntityAlreadyExistsError {
	if !p.IsSetEntityExistsError() {
		return ControllerCreateDestinationResult_EntityExistsError_DEFAULT
	}
	return p.EntityExistsError
}

var ControllerCreateDestinationResult_RequestError_DEFAULT *shared.BadRequestError

func (p *ControllerCreateDestinationResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return ControllerCreateDestinationResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var ControllerCreateDestinationResult_InternalError_DEFAULT *shared.InternalServiceError

func (p *ControllerCreateDestinationResult) GetInternalError() *shared.InternalServiceError {
	if !p.IsSetInternalError() {
		return ControllerCreateDestinationResult_InternalError_DEFAULT
	}
	return p.InternalError
}
func (p *ControllerCreateDestinationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ControllerCreateDestinationResult) IsSetEntityExistsError() bool {
	return p.EntityExistsError != nil
}

func (p *ControllerCreateDestinationResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *ControllerCreateDestinationResult) IsSetInternalError() bool {
	return p.InternalError != nil
}

func (p *ControllerCreateDestinationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerCreateDestinationResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &shared.DestinationDescription{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ControllerCreateDestinationResult) readField1(iprot thrift.TProtocol) error {
	p.EntityExistsError = &shared.EntityAlreadyExistsError{}
	if err := p.EntityExistsError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
	}
	return nil
}

func (p *ControllerCreateDestinationResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *ControllerCreateDestinationResult) readField3(iprot thrift.TProtocol) error {
	p.InternalError = &shared.InternalServiceError{}
	if err := p.InternalError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
	}
	return nil
}

func (p *ControllerCreateDestinationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createDestination_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerCreateDestinationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ControllerCreateDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityExistsError() {
		if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityExistsError: ", p), err)
		}
		if err := p.EntityExistsError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityExistsError: ", p), err)
		}
	}
	return err
}

func (p *ControllerCreateDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *ControllerCreateDestinationResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalError() {
		if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalError: ", p), err)
		}
		if err := p.InternalError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalError: ", p), err)
		}
	}
	return err
}

func (p *ControllerCreateDestinationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerCreateDestinationResult(%+v)", *p)
}

// Attributes:
//  - UpdateRequest
type ControllerUpdateDestinationArgs struct {
	UpdateRequest *shared.UpdateDestinationRequest `thrift:"updateRequest,1" json:"updateRequest"`
}

func NewControllerUpdateDestinationArgs() *ControllerUpdateDestinationArgs {
	return &ControllerUpdateDestinationArgs{}
}

var ControllerUpdateDestinationArgs_UpdateRequest_DEFAULT *shared.UpdateDestinationRequest

func (p *ControllerUpdateDestinationArgs) GetUpdateRequest() *shared.UpdateDestinationRequest {
	if !p.IsSetUpdateRequest() {
		return ControllerUpdateDestinationArgs_UpdateRequest_DEFAULT
	}
	return p.UpdateRequest
}
func (p *ControllerUpdateDestinationArgs) IsSetUpdateRequest() bool {
	return p.UpdateRequest != nil
}

func (p *ControllerUpdateDestinationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerUpdateDestinationArgs) readField1(iprot thrift.TProtocol) error {
	p.UpdateRequest = &shared.UpdateDestinationRequest{}
	if err := p.UpdateRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdateRequest), err)
	}
	return nil
}

func (p *ControllerUpdateDestinationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateDestination_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerUpdateDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateRequest: ", p), err)
	}
	if err := p.UpdateRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdateRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateRequest: ", p), err)
	}
	return err
}

func (p *ControllerUpdateDestinationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerUpdateDestinationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
//  - InternalError
type ControllerUpdateDestinationResult struct {
	Success       *shared.DestinationDescription `thrift:"success,0" json:"success,omitempty"`
	EntityError   *shared.EntityNotExistsError   `thrift:"entityError,1" json:"entityError,omitempty"`
	RequestError  *shared.BadRequestError        `thrift:"requestError,2" json:"requestError,omitempty"`
	InternalError *shared.InternalServiceError   `thrift:"internalError,3" json:"internalError,omitempty"`
}

func NewControllerUpdateDestinationResult() *ControllerUpdateDestinationResult {
	return &ControllerUpdateDestinationResult{}
}

var ControllerUpdateDestinationResult_Success_DEFAULT *shared.DestinationDescription

func (p *ControllerUpdateDestinationResult) GetSuccess() *shared.DestinationDescription {
	if !p.IsSetSuccess() {
		return ControllerUpdateDestinationResult_Success_DEFAULT
	}
	return p.Success
}

var ControllerUpdateDestinationResult_EntityError_DEFAULT *shared.EntityNotExistsError

func (p *ControllerUpdateDestinationResult) GetEntityError() *shared.EntityNotExistsError {
	if !p.IsSetEntityError() {
		return ControllerUpdateDestinationResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var ControllerUpdateDestinationResult_RequestError_DEFAULT *shared.BadRequestError

func (p *ControllerUpdateDestinationResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return ControllerUpdateDestinationResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var ControllerUpdateDestinationResult_InternalError_DEFAULT *shared.InternalServiceError

func (p *ControllerUpdateDestinationResult) GetInternalError() *shared.InternalServiceError {
	if !p.IsSetInternalError() {
		return ControllerUpdateDestinationResult_InternalError_DEFAULT
	}
	return p.InternalError
}
func (p *ControllerUpdateDestinationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ControllerUpdateDestinationResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *ControllerUpdateDestinationResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *ControllerUpdateDestinationResult) IsSetInternalError() bool {
	return p.InternalError != nil
}

func (p *ControllerUpdateDestinationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerUpdateDestinationResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &shared.DestinationDescription{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ControllerUpdateDestinationResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &shared.EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *ControllerUpdateDestinationResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *ControllerUpdateDestinationResult) readField3(iprot thrift.TProtocol) error {
	p.InternalError = &shared.InternalServiceError{}
	if err := p.InternalError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
	}
	return nil
}

func (p *ControllerUpdateDestinationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateDestination_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerUpdateDestinationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ControllerUpdateDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *ControllerUpdateDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *ControllerUpdateDestinationResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalError() {
		if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalError: ", p), err)
		}
		if err := p.InternalError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalError: ", p), err)
		}
	}
	return err
}

func (p *ControllerUpdateDestinationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerUpdateDestinationResult(%+v)", *p)
}

// Attributes:
//  - DeleteRequest
type ControllerDeleteDestinationArgs struct {
	DeleteRequest *shared.DeleteDestinationRequest `thrift:"deleteRequest,1" json:"deleteRequest"`
}

func NewControllerDeleteDestinationArgs() *ControllerDeleteDestinationArgs {
	return &ControllerDeleteDestinationArgs{}
}

var ControllerDeleteDestinationArgs_DeleteRequest_DEFAULT *shared.DeleteDestinationRequest

func (p *ControllerDeleteDestinationArgs) GetDeleteRequest() *shared.DeleteDestinationRequest {
	if !p.IsSetDeleteRequest() {
		return ControllerDeleteDestinationArgs_DeleteRequest_DEFAULT
	}
	return p.DeleteRequest
}
func (p *ControllerDeleteDestinationArgs) IsSetDeleteRequest() bool {
	return p.DeleteRequest != nil
}

func (p *ControllerDeleteDestinationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerDeleteDestinationArgs) readField1(iprot thrift.TProtocol) error {
	p.DeleteRequest = &shared.DeleteDestinationRequest{}
	if err := p.DeleteRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeleteRequest), err)
	}
	return nil
}

func (p *ControllerDeleteDestinationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteDestination_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerDeleteDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deleteRequest: ", p), err)
	}
	if err := p.DeleteRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeleteRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deleteRequest: ", p), err)
	}
	return err
}

func (p *ControllerDeleteDestinationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerDeleteDestinationArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
//  - InternalError
type ControllerDeleteDestinationResult struct {
	EntityError   *shared.EntityNotExistsError `thrift:"entityError,1" json:"entityError,omitempty"`
	RequestError  *shared.BadRequestError      `thrift:"requestError,2" json:"requestError,omitempty"`
	InternalError *shared.InternalServiceError `thrift:"internalError,3" json:"internalError,omitempty"`
}

func NewControllerDeleteDestinationResult() *ControllerDeleteDestinationResult {
	return &ControllerDeleteDestinationResult{}
}

var ControllerDeleteDestinationResult_EntityError_DEFAULT *shared.EntityNotExistsError

func (p *ControllerDeleteDestinationResult) GetEntityError() *shared.EntityNotExistsError {
	if !p.IsSetEntityError() {
		return ControllerDeleteDestinationResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var ControllerDeleteDestinationResult_RequestError_DEFAULT *shared.BadRequestError

func (p *ControllerDeleteDestinationResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return ControllerDeleteDestinationResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var ControllerDeleteDestinationResult_InternalError_DEFAULT *shared.InternalServiceError

func (p *ControllerDeleteDestinationResult) GetInternalError() *shared.InternalServiceError {
	if !p.IsSetInternalError() {
		return ControllerDeleteDestinationResult_InternalError_DEFAULT
	}
	return p.InternalError
}
func (p *ControllerDeleteDestinationResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *ControllerDeleteDestinationResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *ControllerDeleteDestinationResult) IsSetInternalError() bool {
	return p.InternalError != nil
}

func (p *ControllerDeleteDestinationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerDeleteDestinationResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &shared.EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *ControllerDeleteDestinationResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *ControllerDeleteDestinationResult) readField3(iprot thrift.TProtocol) error {
	p.InternalError = &shared.InternalServiceError{}
	if err := p.InternalError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
	}
	return nil
}

func (p *ControllerDeleteDestinationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteDestination_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerDeleteDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *ControllerDeleteDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *ControllerDeleteDestinationResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalError() {
		if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalError: ", p), err)
		}
		if err := p.InternalError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalError: ", p), err)
		}
	}
	return err
}

func (p *ControllerDeleteDestinationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerDeleteDestinationResult(%+v)", *p)
}

// Attributes:
//  - CreateRequest
type ControllerCreateConsumerGroupArgs struct {
	CreateRequest *shared.CreateConsumerGroupRequest `thrift:"createRequest,1" json:"createRequest"`
}

func NewControllerCreateConsumerGroupArgs() *ControllerCreateConsumerGroupArgs {
	return &ControllerCreateConsumerGroupArgs{}
}

var ControllerCreateConsumerGroupArgs_CreateRequest_DEFAULT *shared.CreateConsumerGroupRequest

func (p *ControllerCreateConsumerGroupArgs) GetCreateRequest() *shared.CreateConsumerGroupRequest {
	if !p.IsSetCreateRequest() {
		return ControllerCreateConsumerGroupArgs_CreateRequest_DEFAULT
	}
	return p.CreateRequest
}
func (p *ControllerCreateConsumerGroupArgs) IsSetCreateRequest() bool {
	return p.CreateRequest != nil
}

func (p *ControllerCreateConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerCreateConsumerGroupArgs) readField1(iprot thrift.TProtocol) error {
	p.CreateRequest = &shared.CreateConsumerGroupRequest{}
	if err := p.CreateRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateRequest), err)
	}
	return nil
}

func (p *ControllerCreateConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createConsumerGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerCreateConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:createRequest: ", p), err)
	}
	if err := p.CreateRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:createRequest: ", p), err)
	}
	return err
}

func (p *ControllerCreateConsumerGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerCreateConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityExistsError
//  - RequestError
//  - InternalError
type ControllerCreateConsumerGroupResult struct {
	Success           *shared.ConsumerGroupDescription `thrift:"success,0" json:"success,omitempty"`
	EntityExistsError *shared.EntityAlreadyExistsError `thrift:"entityExistsError,1" json:"entityExistsError,omitempty"`
	RequestError      *shared.BadRequestError          `thrift:"requestError,2" json:"requestError,omitempty"`
	InternalError     *shared.InternalServiceError     `thrift:"internalError,3" json:"internalError,omitempty"`
}

func NewControllerCreateConsumerGroupResult() *ControllerCreateConsumerGroupResult {
	return &ControllerCreateConsumerGroupResult{}
}

var ControllerCreateConsumerGroupResult_Success_DEFAULT *shared.ConsumerGroupDescription

func (p *ControllerCreateConsumerGroupResult) GetSuccess() *shared.ConsumerGroupDescription {
	if !p.IsSetSuccess() {
		return ControllerCreateConsumerGroupResult_Success_DEFAULT
	}
	return p.Success
}

var ControllerCreateConsumerGroupResult_EntityExistsError_DEFAULT *shared.EntityAlreadyExistsError

func (p *ControllerCreateConsumerGroupResult) GetEntityExistsError() *shared.EntityAlreadyExistsError {
	if !p.IsSetEntityExistsError() {
		return ControllerCreateConsumerGroupResult_EntityExistsError_DEFAULT
	}
	return p.EntityExistsError
}

var ControllerCreateConsumerGroupResult_RequestError_DEFAULT *shared.BadRequestError

func (p *ControllerCreateConsumerGroupResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return ControllerCreateConsumerGroupResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var ControllerCreateConsumerGroupResult_InternalError_DEFAULT *shared.InternalServiceError

func (p *ControllerCreateConsumerGroupResult) GetInternalError() *shared.InternalServiceError {
	if !p.IsSetInternalError() {
		return ControllerCreateConsumerGroupResult_InternalError_DEFAULT
	}
	return p.InternalError
}
func (p *ControllerCreateConsumerGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ControllerCreateConsumerGroupResult) IsSetEntityExistsError() bool {
	return p.EntityExistsError != nil
}

func (p *ControllerCreateConsumerGroupResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *ControllerCreateConsumerGroupResult) IsSetInternalError() bool {
	return p.InternalError != nil
}

func (p *ControllerCreateConsumerGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerCreateConsumerGroupResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &shared.ConsumerGroupDescription{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ControllerCreateConsumerGroupResult) readField1(iprot thrift.TProtocol) error {
	p.EntityExistsError = &shared.EntityAlreadyExistsError{}
	if err := p.EntityExistsError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
	}
	return nil
}

func (p *ControllerCreateConsumerGroupResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *ControllerCreateConsumerGroupResult) readField3(iprot thrift.TProtocol) error {
	p.InternalError = &shared.InternalServiceError{}
	if err := p.InternalError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
	}
	return nil
}

func (p *ControllerCreateConsumerGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createConsumerGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerCreateConsumerGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ControllerCreateConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityExistsError() {
		if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityExistsError: ", p), err)
		}
		if err := p.EntityExistsError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityExistsError: ", p), err)
		}
	}
	return err
}

func (p *ControllerCreateConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *ControllerCreateConsumerGroupResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalError() {
		if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalError: ", p), err)
		}
		if err := p.InternalError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalError: ", p), err)
		}
	}
	return err
}

func (p *ControllerCreateConsumerGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerCreateConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - UpdateRequest
type ControllerUpdateConsumerGroupArgs struct {
	UpdateRequest *shared.UpdateConsumerGroupRequest `thrift:"updateRequest,1" json:"updateRequest"`
}

func NewControllerUpdateConsumerGroupArgs() *ControllerUpdateConsumerGroupArgs {
	return &ControllerUpdateConsumerGroupArgs{}
}

var ControllerUpdateConsumerGroupArgs_UpdateRequest_DEFAULT *shared.UpdateConsumerGroupRequest

func (p *ControllerUpdateConsumerGroupArgs) GetUpdateRequest() *shared.UpdateConsumerGroupRequest {
	if !p.IsSetUpdateRequest() {
		return ControllerUpdateConsumerGroupArgs_UpdateRequest_DEFAULT
	}
	return p.UpdateRequest
}
func (p *ControllerUpdateConsumerGroupArgs) IsSetUpdateRequest() bool {
	return p.UpdateRequest != nil
}

func (p *ControllerUpdateConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerUpdateConsumerGroupArgs) readField1(iprot thrift.TProtocol) error {
	p.UpdateRequest = &shared.UpdateConsumerGroupRequest{}
	if err := p.UpdateRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdateRequest), err)
	}
	return nil
}

func (p *ControllerUpdateConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateConsumerGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerUpdateConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateRequest: ", p), err)
	}
	if err := p.UpdateRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdateRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateRequest: ", p), err)
	}
	return err
}

func (p *ControllerUpdateConsumerGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerUpdateConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
//  - InternalError
type ControllerUpdateConsumerGroupResult struct {
	Success       *shared.ConsumerGroupDescription `thrift:"success,0" json:"success,omitempty"`
	EntityError   *shared.EntityNotExistsError     `thrift:"entityError,1" json:"entityError,omitempty"`
	RequestError  *shared.BadRequestError          `thrift:"requestError,2" json:"requestError,omitempty"`
	InternalError *shared.InternalServiceError     `thrift:"internalError,3" json:"internalError,omitempty"`
}

func NewControllerUpdateConsumerGroupResult() *ControllerUpdateConsumerGroupResult {
	return &ControllerUpdateConsumerGroupResult{}
}

var ControllerUpdateConsumerGroupResult_Success_DEFAULT *shared.ConsumerGroupDescription

func (p *ControllerUpdateConsumerGroupResult) GetSuccess() *shared.ConsumerGroupDescription {
	if !p.IsSetSuccess() {
		return ControllerUpdateConsumerGroupResult_Success_DEFAULT
	}
	return p.Success
}

var ControllerUpdateConsumerGroupResult_EntityError_DEFAULT *shared.EntityNotExistsError

func (p *ControllerUpdateConsumerGroupResult) GetEntityError() *shared.EntityNotExistsError {
	if !p.IsSetEntityError() {
		return ControllerUpdateConsumerGroupResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var ControllerUpdateConsumerGroupResult_RequestError_DEFAULT *shared.BadRequestError

func (p *ControllerUpdateConsumerGroupResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return ControllerUpdateConsumerGroupResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var ControllerUpdateConsumerGroupResult_InternalError_DEFAULT *shared.InternalServiceError

func (p *ControllerUpdateConsumerGroupResult) GetInternalError() *shared.InternalServiceError {
	if !p.IsSetInternalError() {
		return ControllerUpdateConsumerGroupResult_InternalError_DEFAULT
	}
	return p.InternalError
}
func (p *ControllerUpdateConsumerGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ControllerUpdateConsumerGroupResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *ControllerUpdateConsumerGroupResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *ControllerUpdateConsumerGroupResult) IsSetInternalError() bool {
	return p.InternalError != nil
}

func (p *ControllerUpdateConsumerGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerUpdateConsumerGroupResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &shared.ConsumerGroupDescription{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ControllerUpdateConsumerGroupResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &shared.EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *ControllerUpdateConsumerGroupResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *ControllerUpdateConsumerGroupResult) readField3(iprot thrift.TProtocol) error {
	p.InternalError = &shared.InternalServiceError{}
	if err := p.InternalError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
	}
	return nil
}

func (p *ControllerUpdateConsumerGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateConsumerGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerUpdateConsumerGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ControllerUpdateConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *ControllerUpdateConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *ControllerUpdateConsumerGroupResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalError() {
		if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalError: ", p), err)
		}
		if err := p.InternalError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalError: ", p), err)
		}
	}
	return err
}

func (p *ControllerUpdateConsumerGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerUpdateConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - DeleteRequest
type ControllerDeleteConsumerGroupArgs struct {
	DeleteRequest *shared.DeleteConsumerGroupRequest `thrift:"deleteRequest,1" json:"deleteRequest"`
}

func NewControllerDeleteConsumerGroupArgs() *ControllerDeleteConsumerGroupArgs {
	return &ControllerDeleteConsumerGroupArgs{}
}

var ControllerDeleteConsumerGroupArgs_DeleteRequest_DEFAULT *shared.DeleteConsumerGroupRequest

func (p *ControllerDeleteConsumerGroupArgs) GetDeleteRequest() *shared.DeleteConsumerGroupRequest {
	if !p.IsSetDeleteRequest() {
		return ControllerDeleteConsumerGroupArgs_DeleteRequest_DEFAULT
	}
	return p.DeleteRequest
}
func (p *ControllerDeleteConsumerGroupArgs) IsSetDeleteRequest() bool {
	return p.DeleteRequest != nil
}

func (p *ControllerDeleteConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerDeleteConsumerGroupArgs) readField1(iprot thrift.TProtocol) error {
	p.DeleteRequest = &shared.DeleteConsumerGroupRequest{}
	if err := p.DeleteRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeleteRequest), err)
	}
	return nil
}

func (p *ControllerDeleteConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteConsumerGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerDeleteConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deleteRequest: ", p), err)
	}
	if err := p.DeleteRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeleteRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deleteRequest: ", p), err)
	}
	return err
}

func (p *ControllerDeleteConsumerGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerDeleteConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
//  - InternalError
type ControllerDeleteConsumerGroupResult struct {
	EntityError   *shared.EntityNotExistsError `thrift:"entityError,1" json:"entityError,omitempty"`
	RequestError  *shared.BadRequestError      `thrift:"requestError,2" json:"requestError,omitempty"`
	InternalError *shared.InternalServiceError `thrift:"internalError,3" json:"internalError,omitempty"`
}

func NewControllerDeleteConsumerGroupResult() *ControllerDeleteConsumerGroupResult {
	return &ControllerDeleteConsumerGroupResult{}
}

var ControllerDeleteConsumerGroupResult_EntityError_DEFAULT *shared.EntityNotExistsError

func (p *ControllerDeleteConsumerGroupResult) GetEntityError() *shared.EntityNotExistsError {
	if !p.IsSetEntityError() {
		return ControllerDeleteConsumerGroupResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var ControllerDeleteConsumerGroupResult_RequestError_DEFAULT *shared.BadRequestError

func (p *ControllerDeleteConsumerGroupResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return ControllerDeleteConsumerGroupResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var ControllerDeleteConsumerGroupResult_InternalError_DEFAULT *shared.InternalServiceError

func (p *ControllerDeleteConsumerGroupResult) GetInternalError() *shared.InternalServiceError {
	if !p.IsSetInternalError() {
		return ControllerDeleteConsumerGroupResult_InternalError_DEFAULT
	}
	return p.InternalError
}
func (p *ControllerDeleteConsumerGroupResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *ControllerDeleteConsumerGroupResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *ControllerDeleteConsumerGroupResult) IsSetInternalError() bool {
	return p.InternalError != nil
}

func (p *ControllerDeleteConsumerGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerDeleteConsumerGroupResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &shared.EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *ControllerDeleteConsumerGroupResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *ControllerDeleteConsumerGroupResult) readField3(iprot thrift.TProtocol) error {
	p.InternalError = &shared.InternalServiceError{}
	if err := p.InternalError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
	}
	return nil
}

func (p *ControllerDeleteConsumerGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteConsumerGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerDeleteConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *ControllerDeleteConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *ControllerDeleteConsumerGroupResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalError() {
		if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalError: ", p), err)
		}
		if err := p.InternalError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalError: ", p), err)
		}
	}
	return err
}

func (p *ControllerDeleteConsumerGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerDeleteConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - CreateRequest
type ControllerCreateRemoteZoneExtentArgs struct {
	CreateRequest *shared.CreateExtentRequest `thrift:"createRequest,1" json:"createRequest"`
}

func NewControllerCreateRemoteZoneExtentArgs() *ControllerCreateRemoteZoneExtentArgs {
	return &ControllerCreateRemoteZoneExtentArgs{}
}

var ControllerCreateRemoteZoneExtentArgs_CreateRequest_DEFAULT *shared.CreateExtentRequest

func (p *ControllerCreateRemoteZoneExtentArgs) GetCreateRequest() *shared.CreateExtentRequest {
	if !p.IsSetCreateRequest() {
		return ControllerCreateRemoteZoneExtentArgs_CreateRequest_DEFAULT
	}
	return p.CreateRequest
}
func (p *ControllerCreateRemoteZoneExtentArgs) IsSetCreateRequest() bool {
	return p.CreateRequest != nil
}

func (p *ControllerCreateRemoteZoneExtentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerCreateRemoteZoneExtentArgs) readField1(iprot thrift.TProtocol) error {
	p.CreateRequest = &shared.CreateExtentRequest{}
	if err := p.CreateRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateRequest), err)
	}
	return nil
}

func (p *ControllerCreateRemoteZoneExtentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createRemoteZoneExtent_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerCreateRemoteZoneExtentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:createRequest: ", p), err)
	}
	if err := p.CreateRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:createRequest: ", p), err)
	}
	return err
}

func (p *ControllerCreateRemoteZoneExtentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerCreateRemoteZoneExtentArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityExistsError
//  - RequestError
//  - InternalError
type ControllerCreateRemoteZoneExtentResult struct {
	Success           *shared.CreateExtentResult_      `thrift:"success,0" json:"success,omitempty"`
	EntityExistsError *shared.EntityAlreadyExistsError `thrift:"entityExistsError,1" json:"entityExistsError,omitempty"`
	RequestError      *shared.BadRequestError          `thrift:"requestError,2" json:"requestError,omitempty"`
	InternalError     *shared.InternalServiceError     `thrift:"internalError,3" json:"internalError,omitempty"`
}

func NewControllerCreateRemoteZoneExtentResult() *ControllerCreateRemoteZoneExtentResult {
	return &ControllerCreateRemoteZoneExtentResult{}
}

var ControllerCreateRemoteZoneExtentResult_Success_DEFAULT *shared.CreateExtentResult_

func (p *ControllerCreateRemoteZoneExtentResult) GetSuccess() *shared.CreateExtentResult_ {
	if !p.IsSetSuccess() {
		return ControllerCreateRemoteZoneExtentResult_Success_DEFAULT
	}
	return p.Success
}

var ControllerCreateRemoteZoneExtentResult_EntityExistsError_DEFAULT *shared.EntityAlreadyExistsError

func (p *ControllerCreateRemoteZoneExtentResult) GetEntityExistsError() *shared.EntityAlreadyExistsError {
	if !p.IsSetEntityExistsError() {
		return ControllerCreateRemoteZoneExtentResult_EntityExistsError_DEFAULT
	}
	return p.EntityExistsError
}

var ControllerCreateRemoteZoneExtentResult_RequestError_DEFAULT *shared.BadRequestError

func (p *ControllerCreateRemoteZoneExtentResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return ControllerCreateRemoteZoneExtentResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var ControllerCreateRemoteZoneExtentResult_InternalError_DEFAULT *shared.InternalServiceError

func (p *ControllerCreateRemoteZoneExtentResult) GetInternalError() *shared.InternalServiceError {
	if !p.IsSetInternalError() {
		return ControllerCreateRemoteZoneExtentResult_InternalError_DEFAULT
	}
	return p.InternalError
}
func (p *ControllerCreateRemoteZoneExtentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ControllerCreateRemoteZoneExtentResult) IsSetEntityExistsError() bool {
	return p.EntityExistsError != nil
}

func (p *ControllerCreateRemoteZoneExtentResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *ControllerCreateRemoteZoneExtentResult) IsSetInternalError() bool {
	return p.InternalError != nil
}

func (p *ControllerCreateRemoteZoneExtentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerCreateRemoteZoneExtentResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &shared.CreateExtentResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ControllerCreateRemoteZoneExtentResult) readField1(iprot thrift.TProtocol) error {
	p.EntityExistsError = &shared.EntityAlreadyExistsError{}
	if err := p.EntityExistsError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
	}
	return nil
}

func (p *ControllerCreateRemoteZoneExtentResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *ControllerCreateRemoteZoneExtentResult) readField3(iprot thrift.TProtocol) error {
	p.InternalError = &shared.InternalServiceError{}
	if err := p.InternalError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
	}
	return nil
}

func (p *ControllerCreateRemoteZoneExtentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createRemoteZoneExtent_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerCreateRemoteZoneExtentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ControllerCreateRemoteZoneExtentResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityExistsError() {
		if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityExistsError: ", p), err)
		}
		if err := p.EntityExistsError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityExistsError: ", p), err)
		}
	}
	return err
}

func (p *ControllerCreateRemoteZoneExtentResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *ControllerCreateRemoteZoneExtentResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalError() {
		if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalError: ", p), err)
		}
		if err := p.InternalError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalError: ", p), err)
		}
	}
	return err
}

func (p *ControllerCreateRemoteZoneExtentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerCreateRemoteZoneExtentResult(%+v)", *p)
}

// Attributes:
//  - ReportMetricRequest
type ControllerReportNodeMetricArgs struct {
	ReportMetricRequest *ReportNodeMetricRequest `thrift:"reportMetricRequest,1" json:"reportMetricRequest"`
}

func NewControllerReportNodeMetricArgs() *ControllerReportNodeMetricArgs {
	return &ControllerReportNodeMetricArgs{}
}

var ControllerReportNodeMetricArgs_ReportMetricRequest_DEFAULT *ReportNodeMetricRequest

func (p *ControllerReportNodeMetricArgs) GetReportMetricRequest() *ReportNodeMetricRequest {
	if !p.IsSetReportMetricRequest() {
		return ControllerReportNodeMetricArgs_ReportMetricRequest_DEFAULT
	}
	return p.ReportMetricRequest
}
func (p *ControllerReportNodeMetricArgs) IsSetReportMetricRequest() bool {
	return p.ReportMetricRequest != nil
}

func (p *ControllerReportNodeMetricArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerReportNodeMetricArgs) readField1(iprot thrift.TProtocol) error {
	p.ReportMetricRequest = &ReportNodeMetricRequest{}
	if err := p.ReportMetricRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ReportMetricRequest), err)
	}
	return nil
}

func (p *ControllerReportNodeMetricArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportNodeMetric_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerReportNodeMetricArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reportMetricRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reportMetricRequest: ", p), err)
	}
	if err := p.ReportMetricRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ReportMetricRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reportMetricRequest: ", p), err)
	}
	return err
}

func (p *ControllerReportNodeMetricArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerReportNodeMetricArgs(%+v)", *p)
}

type ControllerReportNodeMetricResult struct {
}

func NewControllerReportNodeMetricResult() *ControllerReportNodeMetricResult {
	return &ControllerReportNodeMetricResult{}
}

func (p *ControllerReportNodeMetricResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerReportNodeMetricResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportNodeMetric_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerReportNodeMetricResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerReportNodeMetricResult(%+v)", *p)
}

// Attributes:
//  - ReportMetricRequest
type ControllerReportDestinationMetricArgs struct {
	ReportMetricRequest *ReportDestinationMetricRequest `thrift:"reportMetricRequest,1" json:"reportMetricRequest"`
}

func NewControllerReportDestinationMetricArgs() *ControllerReportDestinationMetricArgs {
	return &ControllerReportDestinationMetricArgs{}
}

var ControllerReportDestinationMetricArgs_ReportMetricRequest_DEFAULT *ReportDestinationMetricRequest

func (p *ControllerReportDestinationMetricArgs) GetReportMetricRequest() *ReportDestinationMetricRequest {
	if !p.IsSetReportMetricRequest() {
		return ControllerReportDestinationMetricArgs_ReportMetricRequest_DEFAULT
	}
	return p.ReportMetricRequest
}
func (p *ControllerReportDestinationMetricArgs) IsSetReportMetricRequest() bool {
	return p.ReportMetricRequest != nil
}

func (p *ControllerReportDestinationMetricArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerReportDestinationMetricArgs) readField1(iprot thrift.TProtocol) error {
	p.ReportMetricRequest = &ReportDestinationMetricRequest{}
	if err := p.ReportMetricRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ReportMetricRequest), err)
	}
	return nil
}

func (p *ControllerReportDestinationMetricArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportDestinationMetric_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerReportDestinationMetricArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reportMetricRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reportMetricRequest: ", p), err)
	}
	if err := p.ReportMetricRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ReportMetricRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reportMetricRequest: ", p), err)
	}
	return err
}

func (p *ControllerReportDestinationMetricArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerReportDestinationMetricArgs(%+v)", *p)
}

type ControllerReportDestinationMetricResult struct {
}

func NewControllerReportDestinationMetricResult() *ControllerReportDestinationMetricResult {
	return &ControllerReportDestinationMetricResult{}
}

func (p *ControllerReportDestinationMetricResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerReportDestinationMetricResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportDestinationMetric_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerReportDestinationMetricResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerReportDestinationMetricResult(%+v)", *p)
}

// Attributes:
//  - ReportMetricRequest
type ControllerReportDestinationExtentMetricArgs struct {
	ReportMetricRequest *ReportDestinationExtentMetricRequest `thrift:"reportMetricRequest,1" json:"reportMetricRequest"`
}

func NewControllerReportDestinationExtentMetricArgs() *ControllerReportDestinationExtentMetricArgs {
	return &ControllerReportDestinationExtentMetricArgs{}
}

var ControllerReportDestinationExtentMetricArgs_ReportMetricRequest_DEFAULT *ReportDestinationExtentMetricRequest

func (p *ControllerReportDestinationExtentMetricArgs) GetReportMetricRequest() *ReportDestinationExtentMetricRequest {
	if !p.IsSetReportMetricRequest() {
		return ControllerReportDestinationExtentMetricArgs_ReportMetricRequest_DEFAULT
	}
	return p.ReportMetricRequest
}
func (p *ControllerReportDestinationExtentMetricArgs) IsSetReportMetricRequest() bool {
	return p.ReportMetricRequest != nil
}

func (p *ControllerReportDestinationExtentMetricArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerReportDestinationExtentMetricArgs) readField1(iprot thrift.TProtocol) error {
	p.ReportMetricRequest = &ReportDestinationExtentMetricRequest{}
	if err := p.ReportMetricRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ReportMetricRequest), err)
	}
	return nil
}

func (p *ControllerReportDestinationExtentMetricArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportDestinationExtentMetric_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerReportDestinationExtentMetricArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reportMetricRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reportMetricRequest: ", p), err)
	}
	if err := p.ReportMetricRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ReportMetricRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reportMetricRequest: ", p), err)
	}
	return err
}

func (p *ControllerReportDestinationExtentMetricArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerReportDestinationExtentMetricArgs(%+v)", *p)
}

type ControllerReportDestinationExtentMetricResult struct {
}

func NewControllerReportDestinationExtentMetricResult() *ControllerReportDestinationExtentMetricResult {
	return &ControllerReportDestinationExtentMetricResult{}
}

func (p *ControllerReportDestinationExtentMetricResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerReportDestinationExtentMetricResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportDestinationExtentMetric_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerReportDestinationExtentMetricResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerReportDestinationExtentMetricResult(%+v)", *p)
}

// Attributes:
//  - ReportMetricRequest
type ControllerReportConsumerGroupMetricArgs struct {
	ReportMetricRequest *ReportConsumerGroupMetricRequest `thrift:"reportMetricRequest,1" json:"reportMetricRequest"`
}

func NewControllerReportConsumerGroupMetricArgs() *ControllerReportConsumerGroupMetricArgs {
	return &ControllerReportConsumerGroupMetricArgs{}
}

var ControllerReportConsumerGroupMetricArgs_ReportMetricRequest_DEFAULT *ReportConsumerGroupMetricRequest

func (p *ControllerReportConsumerGroupMetricArgs) GetReportMetricRequest() *ReportConsumerGroupMetricRequest {
	if !p.IsSetReportMetricRequest() {
		return ControllerReportConsumerGroupMetricArgs_ReportMetricRequest_DEFAULT
	}
	return p.ReportMetricRequest
}
func (p *ControllerReportConsumerGroupMetricArgs) IsSetReportMetricRequest() bool {
	return p.ReportMetricRequest != nil
}

func (p *ControllerReportConsumerGroupMetricArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerReportConsumerGroupMetricArgs) readField1(iprot thrift.TProtocol) error {
	p.ReportMetricRequest = &ReportConsumerGroupMetricRequest{}
	if err := p.ReportMetricRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ReportMetricRequest), err)
	}
	return nil
}

func (p *ControllerReportConsumerGroupMetricArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportConsumerGroupMetric_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerReportConsumerGroupMetricArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reportMetricRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reportMetricRequest: ", p), err)
	}
	if err := p.ReportMetricRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ReportMetricRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reportMetricRequest: ", p), err)
	}
	return err
}

func (p *ControllerReportConsumerGroupMetricArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerReportConsumerGroupMetricArgs(%+v)", *p)
}

type ControllerReportConsumerGroupMetricResult struct {
}

func NewControllerReportConsumerGroupMetricResult() *ControllerReportConsumerGroupMetricResult {
	return &ControllerReportConsumerGroupMetricResult{}
}

func (p *ControllerReportConsumerGroupMetricResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerReportConsumerGroupMetricResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportConsumerGroupMetric_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerReportConsumerGroupMetricResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerReportConsumerGroupMetricResult(%+v)", *p)
}

// Attributes:
//  - ReportMetricRequest
type ControllerReportConsumerGroupExtentMetricArgs struct {
	ReportMetricRequest *ReportConsumerGroupExtentMetricRequest `thrift:"reportMetricRequest,1" json:"reportMetricRequest"`
}

func NewControllerReportConsumerGroupExtentMetricArgs() *ControllerReportConsumerGroupExtentMetricArgs {
	return &ControllerReportConsumerGroupExtentMetricArgs{}
}

var ControllerReportConsumerGroupExtentMetricArgs_ReportMetricRequest_DEFAULT *ReportConsumerGroupExtentMetricRequest

func (p *ControllerReportConsumerGroupExtentMetricArgs) GetReportMetricRequest() *ReportConsumerGroupExtentMetricRequest {
	if !p.IsSetReportMetricRequest() {
		return ControllerReportConsumerGroupExtentMetricArgs_ReportMetricRequest_DEFAULT
	}
	return p.ReportMetricRequest
}
func (p *ControllerReportConsumerGroupExtentMetricArgs) IsSetReportMetricRequest() bool {
	return p.ReportMetricRequest != nil
}

func (p *ControllerReportConsumerGroupExtentMetricArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerReportConsumerGroupExtentMetricArgs) readField1(iprot thrift.TProtocol) error {
	p.ReportMetricRequest = &ReportConsumerGroupExtentMetricRequest{}
	if err := p.ReportMetricRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ReportMetricRequest), err)
	}
	return nil
}

func (p *ControllerReportConsumerGroupExtentMetricArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportConsumerGroupExtentMetric_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerReportConsumerGroupExtentMetricArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reportMetricRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reportMetricRequest: ", p), err)
	}
	if err := p.ReportMetricRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ReportMetricRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reportMetricRequest: ", p), err)
	}
	return err
}

func (p *ControllerReportConsumerGroupExtentMetricArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerReportConsumerGroupExtentMetricArgs(%+v)", *p)
}

type ControllerReportConsumerGroupExtentMetricResult struct {
}

func NewControllerReportConsumerGroupExtentMetricResult() *ControllerReportConsumerGroupExtentMetricResult {
	return &ControllerReportConsumerGroupExtentMetricResult{}
}

func (p *ControllerReportConsumerGroupExtentMetricResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerReportConsumerGroupExtentMetricResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportConsumerGroupExtentMetric_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerReportConsumerGroupExtentMetricResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerReportConsumerGroupExtentMetricResult(%+v)", *p)
}

// Attributes:
//  - ReportMetricRequest
type ControllerReportStoreExtentMetricArgs struct {
	ReportMetricRequest *ReportStoreExtentMetricRequest `thrift:"reportMetricRequest,1" json:"reportMetricRequest"`
}

func NewControllerReportStoreExtentMetricArgs() *ControllerReportStoreExtentMetricArgs {
	return &ControllerReportStoreExtentMetricArgs{}
}

var ControllerReportStoreExtentMetricArgs_ReportMetricRequest_DEFAULT *ReportStoreExtentMetricRequest

func (p *ControllerReportStoreExtentMetricArgs) GetReportMetricRequest() *ReportStoreExtentMetricRequest {
	if !p.IsSetReportMetricRequest() {
		return ControllerReportStoreExtentMetricArgs_ReportMetricRequest_DEFAULT
	}
	return p.ReportMetricRequest
}
func (p *ControllerReportStoreExtentMetricArgs) IsSetReportMetricRequest() bool {
	return p.ReportMetricRequest != nil
}

func (p *ControllerReportStoreExtentMetricArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerReportStoreExtentMetricArgs) readField1(iprot thrift.TProtocol) error {
	p.ReportMetricRequest = &ReportStoreExtentMetricRequest{}
	if err := p.ReportMetricRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ReportMetricRequest), err)
	}
	return nil
}

func (p *ControllerReportStoreExtentMetricArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportStoreExtentMetric_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerReportStoreExtentMetricArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reportMetricRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reportMetricRequest: ", p), err)
	}
	if err := p.ReportMetricRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ReportMetricRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reportMetricRequest: ", p), err)
	}
	return err
}

func (p *ControllerReportStoreExtentMetricArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerReportStoreExtentMetricArgs(%+v)", *p)
}

type ControllerReportStoreExtentMetricResult struct {
}

func NewControllerReportStoreExtentMetricResult() *ControllerReportStoreExtentMetricResult {
	return &ControllerReportStoreExtentMetricResult{}
}

func (p *ControllerReportStoreExtentMetricResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerReportStoreExtentMetricResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportStoreExtentMetric_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerReportStoreExtentMetricResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerReportStoreExtentMetricResult(%+v)", *p)
}

// Attributes:
//  - UpsertCapacitiesRequest
type ControllerUpsertInputHostCapacitiesArgs struct {
	UpsertCapacitiesRequest *UpsertInputHostCapacitiesRequest `thrift:"upsertCapacitiesRequest,1" json:"upsertCapacitiesRequest"`
}

func NewControllerUpsertInputHostCapacitiesArgs() *ControllerUpsertInputHostCapacitiesArgs {
	return &ControllerUpsertInputHostCapacitiesArgs{}
}

var ControllerUpsertInputHostCapacitiesArgs_UpsertCapacitiesRequest_DEFAULT *UpsertInputHostCapacitiesRequest

func (p *ControllerUpsertInputHostCapacitiesArgs) GetUpsertCapacitiesRequest() *UpsertInputHostCapacitiesRequest {
	if !p.IsSetUpsertCapacitiesRequest() {
		return ControllerUpsertInputHostCapacitiesArgs_UpsertCapacitiesRequest_DEFAULT
	}
	return p.UpsertCapacitiesRequest
}
func (p *ControllerUpsertInputHostCapacitiesArgs) IsSetUpsertCapacitiesRequest() bool {
	return p.UpsertCapacitiesRequest != nil
}

func (p *ControllerUpsertInputHostCapacitiesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerUpsertInputHostCapacitiesArgs) readField1(iprot thrift.TProtocol) error {
	p.UpsertCapacitiesRequest = &UpsertInputHostCapacitiesRequest{}
	if err := p.UpsertCapacitiesRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpsertCapacitiesRequest), err)
	}
	return nil
}

func (p *ControllerUpsertInputHostCapacitiesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("upsertInputHostCapacities_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerUpsertInputHostCapacitiesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("upsertCapacitiesRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:upsertCapacitiesRequest: ", p), err)
	}
	if err := p.UpsertCapacitiesRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpsertCapacitiesRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:upsertCapacitiesRequest: ", p), err)
	}
	return err
}

func (p *ControllerUpsertInputHostCapacitiesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerUpsertInputHostCapacitiesArgs(%+v)", *p)
}

type ControllerUpsertInputHostCapacitiesResult struct {
}

func NewControllerUpsertInputHostCapacitiesResult() *ControllerUpsertInputHostCapacitiesResult {
	return &ControllerUpsertInputHostCapacitiesResult{}
}

func (p *ControllerUpsertInputHostCapacitiesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerUpsertInputHostCapacitiesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("upsertInputHostCapacities_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerUpsertInputHostCapacitiesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerUpsertInputHostCapacitiesResult(%+v)", *p)
}

// Attributes:
//  - UpsertCapacitiesRequest
type ControllerUpsertOutputHostCapacitiesArgs struct {
	UpsertCapacitiesRequest *UpsertOutputHostCapacitiesRequest `thrift:"upsertCapacitiesRequest,1" json:"upsertCapacitiesRequest"`
}

func NewControllerUpsertOutputHostCapacitiesArgs() *ControllerUpsertOutputHostCapacitiesArgs {
	return &ControllerUpsertOutputHostCapacitiesArgs{}
}

var ControllerUpsertOutputHostCapacitiesArgs_UpsertCapacitiesRequest_DEFAULT *UpsertOutputHostCapacitiesRequest

func (p *ControllerUpsertOutputHostCapacitiesArgs) GetUpsertCapacitiesRequest() *UpsertOutputHostCapacitiesRequest {
	if !p.IsSetUpsertCapacitiesRequest() {
		return ControllerUpsertOutputHostCapacitiesArgs_UpsertCapacitiesRequest_DEFAULT
	}
	return p.UpsertCapacitiesRequest
}
func (p *ControllerUpsertOutputHostCapacitiesArgs) IsSetUpsertCapacitiesRequest() bool {
	return p.UpsertCapacitiesRequest != nil
}

func (p *ControllerUpsertOutputHostCapacitiesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerUpsertOutputHostCapacitiesArgs) readField1(iprot thrift.TProtocol) error {
	p.UpsertCapacitiesRequest = &UpsertOutputHostCapacitiesRequest{}
	if err := p.UpsertCapacitiesRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpsertCapacitiesRequest), err)
	}
	return nil
}

func (p *ControllerUpsertOutputHostCapacitiesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("upsertOutputHostCapacities_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerUpsertOutputHostCapacitiesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("upsertCapacitiesRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:upsertCapacitiesRequest: ", p), err)
	}
	if err := p.UpsertCapacitiesRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpsertCapacitiesRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:upsertCapacitiesRequest: ", p), err)
	}
	return err
}

func (p *ControllerUpsertOutputHostCapacitiesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerUpsertOutputHostCapacitiesArgs(%+v)", *p)
}

type ControllerUpsertOutputHostCapacitiesResult struct {
}

func NewControllerUpsertOutputHostCapacitiesResult() *ControllerUpsertOutputHostCapacitiesResult {
	return &ControllerUpsertOutputHostCapacitiesResult{}
}

func (p *ControllerUpsertOutputHostCapacitiesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerUpsertOutputHostCapacitiesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("upsertOutputHostCapacities_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerUpsertOutputHostCapacitiesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerUpsertOutputHostCapacitiesResult(%+v)", *p)
}

// Attributes:
//  - UpsertCapacitiesRequest
type ControllerUpsertStoreCapacitiesArgs struct {
	UpsertCapacitiesRequest *UpsertStoreCapacitiesRequest `thrift:"upsertCapacitiesRequest,1" json:"upsertCapacitiesRequest"`
}

func NewControllerUpsertStoreCapacitiesArgs() *ControllerUpsertStoreCapacitiesArgs {
	return &ControllerUpsertStoreCapacitiesArgs{}
}

var ControllerUpsertStoreCapacitiesArgs_UpsertCapacitiesRequest_DEFAULT *UpsertStoreCapacitiesRequest

func (p *ControllerUpsertStoreCapacitiesArgs) GetUpsertCapacitiesRequest() *UpsertStoreCapacitiesRequest {
	if !p.IsSetUpsertCapacitiesRequest() {
		return ControllerUpsertStoreCapacitiesArgs_UpsertCapacitiesRequest_DEFAULT
	}
	return p.UpsertCapacitiesRequest
}
func (p *ControllerUpsertStoreCapacitiesArgs) IsSetUpsertCapacitiesRequest() bool {
	return p.UpsertCapacitiesRequest != nil
}

func (p *ControllerUpsertStoreCapacitiesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerUpsertStoreCapacitiesArgs) readField1(iprot thrift.TProtocol) error {
	p.UpsertCapacitiesRequest = &UpsertStoreCapacitiesRequest{}
	if err := p.UpsertCapacitiesRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpsertCapacitiesRequest), err)
	}
	return nil
}

func (p *ControllerUpsertStoreCapacitiesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("upsertStoreCapacities_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerUpsertStoreCapacitiesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("upsertCapacitiesRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:upsertCapacitiesRequest: ", p), err)
	}
	if err := p.UpsertCapacitiesRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpsertCapacitiesRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:upsertCapacitiesRequest: ", p), err)
	}
	return err
}

func (p *ControllerUpsertStoreCapacitiesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerUpsertStoreCapacitiesArgs(%+v)", *p)
}

type ControllerUpsertStoreCapacitiesResult struct {
}

func NewControllerUpsertStoreCapacitiesResult() *ControllerUpsertStoreCapacitiesResult {
	return &ControllerUpsertStoreCapacitiesResult{}
}

func (p *ControllerUpsertStoreCapacitiesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerUpsertStoreCapacitiesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("upsertStoreCapacities_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerUpsertStoreCapacitiesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerUpsertStoreCapacitiesResult(%+v)", *p)
}

// Attributes:
//  - RemoveCapacitiesRequest
type ControllerRemoveCapacitiesArgs struct {
	RemoveCapacitiesRequest *RemoveCapacitiesRequest `thrift:"removeCapacitiesRequest,1" json:"removeCapacitiesRequest"`
}

func NewControllerRemoveCapacitiesArgs() *ControllerRemoveCapacitiesArgs {
	return &ControllerRemoveCapacitiesArgs{}
}

var ControllerRemoveCapacitiesArgs_RemoveCapacitiesRequest_DEFAULT *RemoveCapacitiesRequest

func (p *ControllerRemoveCapacitiesArgs) GetRemoveCapacitiesRequest() *RemoveCapacitiesRequest {
	if !p.IsSetRemoveCapacitiesRequest() {
		return ControllerRemoveCapacitiesArgs_RemoveCapacitiesRequest_DEFAULT
	}
	return p.RemoveCapacitiesRequest
}
func (p *ControllerRemoveCapacitiesArgs) IsSetRemoveCapacitiesRequest() bool {
	return p.RemoveCapacitiesRequest != nil
}

func (p *ControllerRemoveCapacitiesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerRemoveCapacitiesArgs) readField1(iprot thrift.TProtocol) error {
	p.RemoveCapacitiesRequest = &RemoveCapacitiesRequest{}
	if err := p.RemoveCapacitiesRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RemoveCapacitiesRequest), err)
	}
	return nil
}

func (p *ControllerRemoveCapacitiesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeCapacities_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerRemoveCapacitiesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("removeCapacitiesRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:removeCapacitiesRequest: ", p), err)
	}
	if err := p.RemoveCapacitiesRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RemoveCapacitiesRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:removeCapacitiesRequest: ", p), err)
	}
	return err
}

func (p *ControllerRemoveCapacitiesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerRemoveCapacitiesArgs(%+v)", *p)
}

type ControllerRemoveCapacitiesResult struct {
}

func NewControllerRemoveCapacitiesResult() *ControllerRemoveCapacitiesResult {
	return &ControllerRemoveCapacitiesResult{}
}

func (p *ControllerRemoveCapacitiesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerRemoveCapacitiesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeCapacities_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerRemoveCapacitiesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerRemoveCapacitiesResult(%+v)", *p)
}

// Attributes:
//  - GetCapacitiesRequest
type ControllerGetCapacitiesArgs struct {
	GetCapacitiesRequest *GetCapacitiesRequest `thrift:"getCapacitiesRequest,1" json:"getCapacitiesRequest"`
}

func NewControllerGetCapacitiesArgs() *ControllerGetCapacitiesArgs {
	return &ControllerGetCapacitiesArgs{}
}

var ControllerGetCapacitiesArgs_GetCapacitiesRequest_DEFAULT *GetCapacitiesRequest

func (p *ControllerGetCapacitiesArgs) GetGetCapacitiesRequest() *GetCapacitiesRequest {
	if !p.IsSetGetCapacitiesRequest() {
		return ControllerGetCapacitiesArgs_GetCapacitiesRequest_DEFAULT
	}
	return p.GetCapacitiesRequest
}
func (p *ControllerGetCapacitiesArgs) IsSetGetCapacitiesRequest() bool {
	return p.GetCapacitiesRequest != nil
}

func (p *ControllerGetCapacitiesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerGetCapacitiesArgs) readField1(iprot thrift.TProtocol) error {
	p.GetCapacitiesRequest = &GetCapacitiesRequest{}
	if err := p.GetCapacitiesRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetCapacitiesRequest), err)
	}
	return nil
}

func (p *ControllerGetCapacitiesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCapacities_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerGetCapacitiesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("getCapacitiesRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getCapacitiesRequest: ", p), err)
	}
	if err := p.GetCapacitiesRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetCapacitiesRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getCapacitiesRequest: ", p), err)
	}
	return err
}

func (p *ControllerGetCapacitiesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerGetCapacitiesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ControllerGetCapacitiesResult struct {
	Success *GetCapacitiesResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewControllerGetCapacitiesResult() *ControllerGetCapacitiesResult {
	return &ControllerGetCapacitiesResult{}
}

var ControllerGetCapacitiesResult_Success_DEFAULT *GetCapacitiesResult_

func (p *ControllerGetCapacitiesResult) GetSuccess() *GetCapacitiesResult_ {
	if !p.IsSetSuccess() {
		return ControllerGetCapacitiesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ControllerGetCapacitiesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ControllerGetCapacitiesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerGetCapacitiesResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &GetCapacitiesResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ControllerGetCapacitiesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCapacities_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerGetCapacitiesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ControllerGetCapacitiesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerGetCapacitiesResult(%+v)", *p)
}

// Attributes:
//  - GetQueueDepthInfoRequest
type ControllerGetQueueDepthInfoArgs struct {
	GetQueueDepthInfoRequest *GetQueueDepthInfoRequest `thrift:"getQueueDepthInfoRequest,1" json:"getQueueDepthInfoRequest"`
}

func NewControllerGetQueueDepthInfoArgs() *ControllerGetQueueDepthInfoArgs {
	return &ControllerGetQueueDepthInfoArgs{}
}

var ControllerGetQueueDepthInfoArgs_GetQueueDepthInfoRequest_DEFAULT *GetQueueDepthInfoRequest

func (p *ControllerGetQueueDepthInfoArgs) GetGetQueueDepthInfoRequest() *GetQueueDepthInfoRequest {
	if !p.IsSetGetQueueDepthInfoRequest() {
		return ControllerGetQueueDepthInfoArgs_GetQueueDepthInfoRequest_DEFAULT
	}
	return p.GetQueueDepthInfoRequest
}
func (p *ControllerGetQueueDepthInfoArgs) IsSetGetQueueDepthInfoRequest() bool {
	return p.GetQueueDepthInfoRequest != nil
}

func (p *ControllerGetQueueDepthInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerGetQueueDepthInfoArgs) readField1(iprot thrift.TProtocol) error {
	p.GetQueueDepthInfoRequest = &GetQueueDepthInfoRequest{}
	if err := p.GetQueueDepthInfoRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetQueueDepthInfoRequest), err)
	}
	return nil
}

func (p *ControllerGetQueueDepthInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getQueueDepthInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerGetQueueDepthInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("getQueueDepthInfoRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getQueueDepthInfoRequest: ", p), err)
	}
	if err := p.GetQueueDepthInfoRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetQueueDepthInfoRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getQueueDepthInfoRequest: ", p), err)
	}
	return err
}

func (p *ControllerGetQueueDepthInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerGetQueueDepthInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - CacheMissError
type ControllerGetQueueDepthInfoResult struct {
	Success        *GetQueueDepthInfoResult_ `thrift:"success,0" json:"success,omitempty"`
	CacheMissError *QueueCacheMissError      `thrift:"cacheMissError,1" json:"cacheMissError,omitempty"`
}

func NewControllerGetQueueDepthInfoResult() *ControllerGetQueueDepthInfoResult {
	return &ControllerGetQueueDepthInfoResult{}
}

var ControllerGetQueueDepthInfoResult_Success_DEFAULT *GetQueueDepthInfoResult_

func (p *ControllerGetQueueDepthInfoResult) GetSuccess() *GetQueueDepthInfoResult_ {
	if !p.IsSetSuccess() {
		return ControllerGetQueueDepthInfoResult_Success_DEFAULT
	}
	return p.Success
}

var ControllerGetQueueDepthInfoResult_CacheMissError_DEFAULT *QueueCacheMissError

func (p *ControllerGetQueueDepthInfoResult) GetCacheMissError() *QueueCacheMissError {
	if !p.IsSetCacheMissError() {
		return ControllerGetQueueDepthInfoResult_CacheMissError_DEFAULT
	}
	return p.CacheMissError
}
func (p *ControllerGetQueueDepthInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ControllerGetQueueDepthInfoResult) IsSetCacheMissError() bool {
	return p.CacheMissError != nil
}

func (p *ControllerGetQueueDepthInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControllerGetQueueDepthInfoResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &GetQueueDepthInfoResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ControllerGetQueueDepthInfoResult) readField1(iprot thrift.TProtocol) error {
	p.CacheMissError = &QueueCacheMissError{}
	if err := p.CacheMissError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CacheMissError), err)
	}
	return nil
}

func (p *ControllerGetQueueDepthInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getQueueDepthInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControllerGetQueueDepthInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ControllerGetQueueDepthInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCacheMissError() {
		if err := oprot.WriteFieldBegin("cacheMissError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cacheMissError: ", p), err)
		}
		if err := p.CacheMissError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CacheMissError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cacheMissError: ", p), err)
		}
	}
	return err
}

func (p *ControllerGetQueueDepthInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControllerGetQueueDepthInfoResult(%+v)", *p)
}
