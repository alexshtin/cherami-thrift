// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package cherami

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type BIn interface {
	// Non-streaming publish API
	//
	//
	// Parameters:
	//  - Request
	PutMessageBatch(request *PutMessageBatchRequest) (r *PutMessageBatchResult_, err error)
}

type BInClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewBInClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BInClient {
	return &BInClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewBInClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BInClient {
	return &BInClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Non-streaming publish API
//
//
// Parameters:
//  - Request
func (p *BInClient) PutMessageBatch(request *PutMessageBatchRequest) (r *PutMessageBatchResult_, err error) {
	if err = p.sendPutMessageBatch(request); err != nil {
		return
	}
	return p.recvPutMessageBatch()
}

func (p *BInClient) sendPutMessageBatch(request *PutMessageBatchRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("putMessageBatch", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BInPutMessageBatchArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BInClient) recvPutMessageBatch() (value *PutMessageBatchResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "putMessageBatch" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "putMessageBatch failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "putMessageBatch failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error155 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error156 error
		error156, err = error155.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error156
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "putMessageBatch failed: invalid message type")
		return
	}
	result := BInPutMessageBatchResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.EntityDisabled != nil {
		err = result.EntityDisabled
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	value = result.GetSuccess()
	return
}

type BInProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      BIn
}

func (p *BInProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *BInProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *BInProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewBInProcessor(handler BIn) *BInProcessor {

	self157 := &BInProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self157.processorMap["putMessageBatch"] = &bInProcessorPutMessageBatch{handler: handler}
	return self157
}

func (p *BInProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x158 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x158.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x158

}

type bInProcessorPutMessageBatch struct {
	handler BIn
}

func (p *bInProcessorPutMessageBatch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BInPutMessageBatchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("putMessageBatch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BInPutMessageBatchResult{}
	var retval *PutMessageBatchResult_
	var err2 error
	if retval, err2 = p.handler.PutMessageBatch(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *EntityNotExistsError:
			result.EntityError = v
		case *EntityDisabledError:
			result.EntityDisabled = v
		case *BadRequestError:
			result.RequestError = v
		case *InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putMessageBatch: "+err2.Error())
			oprot.WriteMessageBegin("putMessageBatch", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("putMessageBatch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type BInPutMessageBatchArgs struct {
	Request *PutMessageBatchRequest `thrift:"request,1" json:"request"`
}

func NewBInPutMessageBatchArgs() *BInPutMessageBatchArgs {
	return &BInPutMessageBatchArgs{}
}

var BInPutMessageBatchArgs_Request_DEFAULT *PutMessageBatchRequest

func (p *BInPutMessageBatchArgs) GetRequest() *PutMessageBatchRequest {
	if !p.IsSetRequest() {
		return BInPutMessageBatchArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *BInPutMessageBatchArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BInPutMessageBatchArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BInPutMessageBatchArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &PutMessageBatchRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *BInPutMessageBatchArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("putMessageBatch_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BInPutMessageBatchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *BInPutMessageBatchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BInPutMessageBatchArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - EntityDisabled
//  - RequestError
//  - InternalServiceError
type BInPutMessageBatchResult struct {
	Success              *PutMessageBatchResult_ `thrift:"success,0" json:"success,omitempty"`
	EntityError          *EntityNotExistsError   `thrift:"entityError,1" json:"entityError,omitempty"`
	EntityDisabled       *EntityDisabledError    `thrift:"entityDisabled,2" json:"entityDisabled,omitempty"`
	RequestError         *BadRequestError        `thrift:"requestError,3" json:"requestError,omitempty"`
	InternalServiceError *InternalServiceError   `thrift:"internalServiceError,4" json:"internalServiceError,omitempty"`
}

func NewBInPutMessageBatchResult() *BInPutMessageBatchResult {
	return &BInPutMessageBatchResult{}
}

var BInPutMessageBatchResult_Success_DEFAULT *PutMessageBatchResult_

func (p *BInPutMessageBatchResult) GetSuccess() *PutMessageBatchResult_ {
	if !p.IsSetSuccess() {
		return BInPutMessageBatchResult_Success_DEFAULT
	}
	return p.Success
}

var BInPutMessageBatchResult_EntityError_DEFAULT *EntityNotExistsError

func (p *BInPutMessageBatchResult) GetEntityError() *EntityNotExistsError {
	if !p.IsSetEntityError() {
		return BInPutMessageBatchResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var BInPutMessageBatchResult_EntityDisabled_DEFAULT *EntityDisabledError

func (p *BInPutMessageBatchResult) GetEntityDisabled() *EntityDisabledError {
	if !p.IsSetEntityDisabled() {
		return BInPutMessageBatchResult_EntityDisabled_DEFAULT
	}
	return p.EntityDisabled
}

var BInPutMessageBatchResult_RequestError_DEFAULT *BadRequestError

func (p *BInPutMessageBatchResult) GetRequestError() *BadRequestError {
	if !p.IsSetRequestError() {
		return BInPutMessageBatchResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var BInPutMessageBatchResult_InternalServiceError_DEFAULT *InternalServiceError

func (p *BInPutMessageBatchResult) GetInternalServiceError() *InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return BInPutMessageBatchResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *BInPutMessageBatchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BInPutMessageBatchResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *BInPutMessageBatchResult) IsSetEntityDisabled() bool {
	return p.EntityDisabled != nil
}

func (p *BInPutMessageBatchResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BInPutMessageBatchResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *BInPutMessageBatchResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BInPutMessageBatchResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &PutMessageBatchResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BInPutMessageBatchResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *BInPutMessageBatchResult) readField2(iprot thrift.TProtocol) error {
	p.EntityDisabled = &EntityDisabledError{}
	if err := p.EntityDisabled.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityDisabled), err)
	}
	return nil
}

func (p *BInPutMessageBatchResult) readField3(iprot thrift.TProtocol) error {
	p.RequestError = &BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BInPutMessageBatchResult) readField4(iprot thrift.TProtocol) error {
	p.InternalServiceError = &InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *BInPutMessageBatchResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("putMessageBatch_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BInPutMessageBatchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BInPutMessageBatchResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *BInPutMessageBatchResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityDisabled() {
		if err := oprot.WriteFieldBegin("entityDisabled", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entityDisabled: ", p), err)
		}
		if err := p.EntityDisabled.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityDisabled), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entityDisabled: ", p), err)
		}
	}
	return err
}

func (p *BInPutMessageBatchResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:requestError: ", p), err)
		}
	}
	return err
}

func (p *BInPutMessageBatchResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *BInPutMessageBatchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BInPutMessageBatchResult(%+v)", *p)
}
