// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package cherami

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type BOut interface {
	// Parameters:
	//  - AckRequest
	AckMessages(ackRequest *AckMessagesRequest) (err error)
	// Parameters:
	//  - Request
	SetConsumedMessages(request *SetConsumedMessagesRequest) (err error)
	// Non-streaming consume API
	//
	//
	// Parameters:
	//  - Request
	ReceiveMessageBatch(request *ReceiveMessageBatchRequest) (r *ReceiveMessageBatchResult_, err error)
}

type BOutClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewBOutClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BOutClient {
	return &BOutClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewBOutClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BOutClient {
	return &BOutClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - AckRequest
func (p *BOutClient) AckMessages(ackRequest *AckMessagesRequest) (err error) {
	if err = p.sendAckMessages(ackRequest); err != nil {
		return
	}
	return p.recvAckMessages()
}

func (p *BOutClient) sendAckMessages(ackRequest *AckMessagesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ackMessages", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BOutAckMessagesArgs{
		AckRequest: ackRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BOutClient) recvAckMessages() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "ackMessages" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ackMessages failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ackMessages failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error165 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error166 error
		error166, err = error165.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error166
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ackMessages failed: invalid message type")
		return
	}
	result := BOutAckMessagesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	}
	return
}

// Parameters:
//  - Request
func (p *BOutClient) SetConsumedMessages(request *SetConsumedMessagesRequest) (err error) {
	if err = p.sendSetConsumedMessages(request); err != nil {
		return
	}
	return p.recvSetConsumedMessages()
}

func (p *BOutClient) sendSetConsumedMessages(request *SetConsumedMessagesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setConsumedMessages", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BOutSetConsumedMessagesArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BOutClient) recvSetConsumedMessages() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "setConsumedMessages" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setConsumedMessages failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setConsumedMessages failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error167 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error168 error
		error168, err = error167.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error168
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setConsumedMessages failed: invalid message type")
		return
	}
	result := BOutSetConsumedMessagesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	}
	return
}

// Non-streaming consume API
//
//
// Parameters:
//  - Request
func (p *BOutClient) ReceiveMessageBatch(request *ReceiveMessageBatchRequest) (r *ReceiveMessageBatchResult_, err error) {
	if err = p.sendReceiveMessageBatch(request); err != nil {
		return
	}
	return p.recvReceiveMessageBatch()
}

func (p *BOutClient) sendReceiveMessageBatch(request *ReceiveMessageBatchRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("receiveMessageBatch", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BOutReceiveMessageBatchArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BOutClient) recvReceiveMessageBatch() (value *ReceiveMessageBatchResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "receiveMessageBatch" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "receiveMessageBatch failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "receiveMessageBatch failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error169 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error170 error
		error170, err = error169.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error170
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "receiveMessageBatch failed: invalid message type")
		return
	}
	result := BOutReceiveMessageBatchResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.EntityDisabled != nil {
		err = result.EntityDisabled
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.TimeoutError != nil {
		err = result.TimeoutError
		return
	}
	value = result.GetSuccess()
	return
}

type BOutProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      BOut
}

func (p *BOutProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *BOutProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *BOutProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewBOutProcessor(handler BOut) *BOutProcessor {

	self171 := &BOutProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self171.processorMap["ackMessages"] = &bOutProcessorAckMessages{handler: handler}
	self171.processorMap["setConsumedMessages"] = &bOutProcessorSetConsumedMessages{handler: handler}
	self171.processorMap["receiveMessageBatch"] = &bOutProcessorReceiveMessageBatch{handler: handler}
	return self171
}

func (p *BOutProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x172 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x172.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x172

}

type bOutProcessorAckMessages struct {
	handler BOut
}

func (p *bOutProcessorAckMessages) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BOutAckMessagesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ackMessages", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BOutAckMessagesResult{}
	var err2 error
	if err2 = p.handler.AckMessages(args.AckRequest); err2 != nil {
		switch v := err2.(type) {
		case *InvalidAckIdError:
			result.EntityError = v
		case *BadRequestError:
			result.RequestError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ackMessages: "+err2.Error())
			oprot.WriteMessageBegin("ackMessages", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("ackMessages", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bOutProcessorSetConsumedMessages struct {
	handler BOut
}

func (p *bOutProcessorSetConsumedMessages) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BOutSetConsumedMessagesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setConsumedMessages", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BOutSetConsumedMessagesResult{}
	var err2 error
	if err2 = p.handler.SetConsumedMessages(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *InvalidAddressError:
			result.EntityError = v
		case *BadRequestError:
			result.RequestError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setConsumedMessages: "+err2.Error())
			oprot.WriteMessageBegin("setConsumedMessages", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("setConsumedMessages", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bOutProcessorReceiveMessageBatch struct {
	handler BOut
}

func (p *bOutProcessorReceiveMessageBatch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BOutReceiveMessageBatchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("receiveMessageBatch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BOutReceiveMessageBatchResult{}
	var retval *ReceiveMessageBatchResult_
	var err2 error
	if retval, err2 = p.handler.ReceiveMessageBatch(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *EntityNotExistsError:
			result.EntityError = v
		case *EntityDisabledError:
			result.EntityDisabled = v
		case *BadRequestError:
			result.RequestError = v
		case *TimeoutError:
			result.TimeoutError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing receiveMessageBatch: "+err2.Error())
			oprot.WriteMessageBegin("receiveMessageBatch", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("receiveMessageBatch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - AckRequest
type BOutAckMessagesArgs struct {
	AckRequest *AckMessagesRequest `thrift:"ackRequest,1" json:"ackRequest"`
}

func NewBOutAckMessagesArgs() *BOutAckMessagesArgs {
	return &BOutAckMessagesArgs{}
}

var BOutAckMessagesArgs_AckRequest_DEFAULT *AckMessagesRequest

func (p *BOutAckMessagesArgs) GetAckRequest() *AckMessagesRequest {
	if !p.IsSetAckRequest() {
		return BOutAckMessagesArgs_AckRequest_DEFAULT
	}
	return p.AckRequest
}
func (p *BOutAckMessagesArgs) IsSetAckRequest() bool {
	return p.AckRequest != nil
}

func (p *BOutAckMessagesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BOutAckMessagesArgs) readField1(iprot thrift.TProtocol) error {
	p.AckRequest = &AckMessagesRequest{}
	if err := p.AckRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AckRequest), err)
	}
	return nil
}

func (p *BOutAckMessagesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ackMessages_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BOutAckMessagesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ackRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ackRequest: ", p), err)
	}
	if err := p.AckRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AckRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ackRequest: ", p), err)
	}
	return err
}

func (p *BOutAckMessagesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BOutAckMessagesArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
type BOutAckMessagesResult struct {
	EntityError  *InvalidAckIdError `thrift:"entityError,1" json:"entityError,omitempty"`
	RequestError *BadRequestError   `thrift:"requestError,2" json:"requestError,omitempty"`
}

func NewBOutAckMessagesResult() *BOutAckMessagesResult {
	return &BOutAckMessagesResult{}
}

var BOutAckMessagesResult_EntityError_DEFAULT *InvalidAckIdError

func (p *BOutAckMessagesResult) GetEntityError() *InvalidAckIdError {
	if !p.IsSetEntityError() {
		return BOutAckMessagesResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var BOutAckMessagesResult_RequestError_DEFAULT *BadRequestError

func (p *BOutAckMessagesResult) GetRequestError() *BadRequestError {
	if !p.IsSetRequestError() {
		return BOutAckMessagesResult_RequestError_DEFAULT
	}
	return p.RequestError
}
func (p *BOutAckMessagesResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *BOutAckMessagesResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BOutAckMessagesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BOutAckMessagesResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &InvalidAckIdError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *BOutAckMessagesResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BOutAckMessagesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ackMessages_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BOutAckMessagesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *BOutAckMessagesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *BOutAckMessagesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BOutAckMessagesResult(%+v)", *p)
}

// Attributes:
//  - Request
type BOutSetConsumedMessagesArgs struct {
	Request *SetConsumedMessagesRequest `thrift:"request,1" json:"request"`
}

func NewBOutSetConsumedMessagesArgs() *BOutSetConsumedMessagesArgs {
	return &BOutSetConsumedMessagesArgs{}
}

var BOutSetConsumedMessagesArgs_Request_DEFAULT *SetConsumedMessagesRequest

func (p *BOutSetConsumedMessagesArgs) GetRequest() *SetConsumedMessagesRequest {
	if !p.IsSetRequest() {
		return BOutSetConsumedMessagesArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *BOutSetConsumedMessagesArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BOutSetConsumedMessagesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BOutSetConsumedMessagesArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &SetConsumedMessagesRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *BOutSetConsumedMessagesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setConsumedMessages_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BOutSetConsumedMessagesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *BOutSetConsumedMessagesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BOutSetConsumedMessagesArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
type BOutSetConsumedMessagesResult struct {
	EntityError  *InvalidAddressError `thrift:"entityError,1" json:"entityError,omitempty"`
	RequestError *BadRequestError     `thrift:"requestError,2" json:"requestError,omitempty"`
}

func NewBOutSetConsumedMessagesResult() *BOutSetConsumedMessagesResult {
	return &BOutSetConsumedMessagesResult{}
}

var BOutSetConsumedMessagesResult_EntityError_DEFAULT *InvalidAddressError

func (p *BOutSetConsumedMessagesResult) GetEntityError() *InvalidAddressError {
	if !p.IsSetEntityError() {
		return BOutSetConsumedMessagesResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var BOutSetConsumedMessagesResult_RequestError_DEFAULT *BadRequestError

func (p *BOutSetConsumedMessagesResult) GetRequestError() *BadRequestError {
	if !p.IsSetRequestError() {
		return BOutSetConsumedMessagesResult_RequestError_DEFAULT
	}
	return p.RequestError
}
func (p *BOutSetConsumedMessagesResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *BOutSetConsumedMessagesResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BOutSetConsumedMessagesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BOutSetConsumedMessagesResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &InvalidAddressError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *BOutSetConsumedMessagesResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BOutSetConsumedMessagesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setConsumedMessages_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BOutSetConsumedMessagesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *BOutSetConsumedMessagesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *BOutSetConsumedMessagesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BOutSetConsumedMessagesResult(%+v)", *p)
}

// Attributes:
//  - Request
type BOutReceiveMessageBatchArgs struct {
	Request *ReceiveMessageBatchRequest `thrift:"request,1" json:"request"`
}

func NewBOutReceiveMessageBatchArgs() *BOutReceiveMessageBatchArgs {
	return &BOutReceiveMessageBatchArgs{}
}

var BOutReceiveMessageBatchArgs_Request_DEFAULT *ReceiveMessageBatchRequest

func (p *BOutReceiveMessageBatchArgs) GetRequest() *ReceiveMessageBatchRequest {
	if !p.IsSetRequest() {
		return BOutReceiveMessageBatchArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *BOutReceiveMessageBatchArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BOutReceiveMessageBatchArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BOutReceiveMessageBatchArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &ReceiveMessageBatchRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *BOutReceiveMessageBatchArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("receiveMessageBatch_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BOutReceiveMessageBatchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *BOutReceiveMessageBatchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BOutReceiveMessageBatchArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - EntityDisabled
//  - RequestError
//  - TimeoutError
type BOutReceiveMessageBatchResult struct {
	Success        *ReceiveMessageBatchResult_ `thrift:"success,0" json:"success,omitempty"`
	EntityError    *EntityNotExistsError       `thrift:"entityError,1" json:"entityError,omitempty"`
	EntityDisabled *EntityDisabledError        `thrift:"entityDisabled,2" json:"entityDisabled,omitempty"`
	RequestError   *BadRequestError            `thrift:"requestError,3" json:"requestError,omitempty"`
	TimeoutError   *TimeoutError               `thrift:"timeoutError,4" json:"timeoutError,omitempty"`
}

func NewBOutReceiveMessageBatchResult() *BOutReceiveMessageBatchResult {
	return &BOutReceiveMessageBatchResult{}
}

var BOutReceiveMessageBatchResult_Success_DEFAULT *ReceiveMessageBatchResult_

func (p *BOutReceiveMessageBatchResult) GetSuccess() *ReceiveMessageBatchResult_ {
	if !p.IsSetSuccess() {
		return BOutReceiveMessageBatchResult_Success_DEFAULT
	}
	return p.Success
}

var BOutReceiveMessageBatchResult_EntityError_DEFAULT *EntityNotExistsError

func (p *BOutReceiveMessageBatchResult) GetEntityError() *EntityNotExistsError {
	if !p.IsSetEntityError() {
		return BOutReceiveMessageBatchResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var BOutReceiveMessageBatchResult_EntityDisabled_DEFAULT *EntityDisabledError

func (p *BOutReceiveMessageBatchResult) GetEntityDisabled() *EntityDisabledError {
	if !p.IsSetEntityDisabled() {
		return BOutReceiveMessageBatchResult_EntityDisabled_DEFAULT
	}
	return p.EntityDisabled
}

var BOutReceiveMessageBatchResult_RequestError_DEFAULT *BadRequestError

func (p *BOutReceiveMessageBatchResult) GetRequestError() *BadRequestError {
	if !p.IsSetRequestError() {
		return BOutReceiveMessageBatchResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var BOutReceiveMessageBatchResult_TimeoutError_DEFAULT *TimeoutError

func (p *BOutReceiveMessageBatchResult) GetTimeoutError() *TimeoutError {
	if !p.IsSetTimeoutError() {
		return BOutReceiveMessageBatchResult_TimeoutError_DEFAULT
	}
	return p.TimeoutError
}
func (p *BOutReceiveMessageBatchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BOutReceiveMessageBatchResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *BOutReceiveMessageBatchResult) IsSetEntityDisabled() bool {
	return p.EntityDisabled != nil
}

func (p *BOutReceiveMessageBatchResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BOutReceiveMessageBatchResult) IsSetTimeoutError() bool {
	return p.TimeoutError != nil
}

func (p *BOutReceiveMessageBatchResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BOutReceiveMessageBatchResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ReceiveMessageBatchResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BOutReceiveMessageBatchResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *BOutReceiveMessageBatchResult) readField2(iprot thrift.TProtocol) error {
	p.EntityDisabled = &EntityDisabledError{}
	if err := p.EntityDisabled.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityDisabled), err)
	}
	return nil
}

func (p *BOutReceiveMessageBatchResult) readField3(iprot thrift.TProtocol) error {
	p.RequestError = &BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BOutReceiveMessageBatchResult) readField4(iprot thrift.TProtocol) error {
	p.TimeoutError = &TimeoutError{}
	if err := p.TimeoutError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TimeoutError), err)
	}
	return nil
}

func (p *BOutReceiveMessageBatchResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("receiveMessageBatch_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BOutReceiveMessageBatchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BOutReceiveMessageBatchResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *BOutReceiveMessageBatchResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityDisabled() {
		if err := oprot.WriteFieldBegin("entityDisabled", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entityDisabled: ", p), err)
		}
		if err := p.EntityDisabled.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityDisabled), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entityDisabled: ", p), err)
		}
	}
	return err
}

func (p *BOutReceiveMessageBatchResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:requestError: ", p), err)
		}
	}
	return err
}

func (p *BOutReceiveMessageBatchResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeoutError() {
		if err := oprot.WriteFieldBegin("timeoutError", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timeoutError: ", p), err)
		}
		if err := p.TimeoutError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TimeoutError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timeoutError: ", p), err)
		}
	}
	return err
}

func (p *BOutReceiveMessageBatchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BOutReceiveMessageBatchResult(%+v)", *p)
}
