// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package cherami

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type BFrontend interface {
	HostPort() (r string, err error)
	// *** Destination CRUD *********************
	//
	// Parameters:
	//  - CreateRequest
	CreateDestination(createRequest *CreateDestinationRequest) (r *DestinationDescription, err error)
	// Parameters:
	//  - GetRequest
	ReadDestination(getRequest *ReadDestinationRequest) (r *DestinationDescription, err error)
	// Parameters:
	//  - UpdateRequest
	UpdateDestination(updateRequest *UpdateDestinationRequest) (r *DestinationDescription, err error)
	// Parameters:
	//  - DeleteRequest
	DeleteDestination(deleteRequest *DeleteDestinationRequest) (err error)
	// Parameters:
	//  - ListRequest
	ListDestinations(listRequest *ListDestinationsRequest) (r *ListDestinationsResult_, err error)
	// *** ConsumerGroup CRUD *******************
	//
	// Parameters:
	//  - RegisterRequest
	CreateConsumerGroup(registerRequest *CreateConsumerGroupRequest) (r *ConsumerGroupDescription, err error)
	// Parameters:
	//  - GetRequest
	ReadConsumerGroup(getRequest *ReadConsumerGroupRequest) (r *ConsumerGroupDescription, err error)
	// Parameters:
	//  - UpdateRequest
	UpdateConsumerGroup(updateRequest *UpdateConsumerGroupRequest) (r *ConsumerGroupDescription, err error)
	// Parameters:
	//  - DeleteRequest
	DeleteConsumerGroup(deleteRequest *DeleteConsumerGroupRequest) (err error)
	// Parameters:
	//  - ListRequest
	ListConsumerGroups(listRequest *ListConsumerGroupRequest) (r *ListConsumerGroupResult_, err error)
	//  * readDestinationHosts will be replaced by readPublisherOptions soon
	// *
	//
	// Parameters:
	//  - GetHostsRequest
	ReadDestinationHosts(getHostsRequest *ReadDestinationHostsRequest) (r *ReadDestinationHostsResult_, err error)
	// Parameters:
	//  - GetPublisherOptionsRequest
	ReadPublisherOptions(getPublisherOptionsRequest *ReadPublisherOptionsRequest) (r *ReadPublisherOptionsResult_, err error)
	// Parameters:
	//  - GetHostsRequest
	ReadConsumerGroupHosts(getHostsRequest *ReadConsumerGroupHostsRequest) (r *ReadConsumerGroupHostsResult_, err error)
	// *************** DLQ Management ***********
	//
	// Parameters:
	//  - PurgeRequest
	PurgeDLQForConsumerGroup(purgeRequest *PurgeDLQForConsumerGroupRequest) (err error)
	// Parameters:
	//  - MergeRequest
	MergeDLQForConsumerGroup(mergeRequest *MergeDLQForConsumerGroupRequest) (err error)
	// ********* Queue Information  *****************************
	//
	// Parameters:
	//  - GetQueueDepthInfoRequest
	GetQueueDepthInfo(getQueueDepthInfoRequest *GetQueueDepthInfoRequest) (r *GetQueueDepthInfoResult_, err error)
}

type BFrontendClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewBFrontendClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BFrontendClient {
	return &BFrontendClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewBFrontendClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BFrontendClient {
	return &BFrontendClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

func (p *BFrontendClient) HostPort() (r string, err error) {
	if err = p.sendHostPort(); err != nil {
		return
	}
	return p.recvHostPort()
}

func (p *BFrontendClient) sendHostPort() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("HostPort", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BFrontendHostPortArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BFrontendClient) recvHostPort() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "HostPort" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "HostPort failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "HostPort failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error23 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error24 error
		error24, err = error23.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error24
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "HostPort failed: invalid message type")
		return
	}
	result := BFrontendHostPortResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// *** Destination CRUD *********************
//
// Parameters:
//  - CreateRequest
func (p *BFrontendClient) CreateDestination(createRequest *CreateDestinationRequest) (r *DestinationDescription, err error) {
	if err = p.sendCreateDestination(createRequest); err != nil {
		return
	}
	return p.recvCreateDestination()
}

func (p *BFrontendClient) sendCreateDestination(createRequest *CreateDestinationRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createDestination", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BFrontendCreateDestinationArgs{
		CreateRequest: createRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BFrontendClient) recvCreateDestination() (value *DestinationDescription, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createDestination" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createDestination failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createDestination failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error25 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error26 error
		error26, err = error25.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error26
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createDestination failed: invalid message type")
		return
	}
	result := BFrontendCreateDestinationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityExistsError != nil {
		err = result.EntityExistsError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GetRequest
func (p *BFrontendClient) ReadDestination(getRequest *ReadDestinationRequest) (r *DestinationDescription, err error) {
	if err = p.sendReadDestination(getRequest); err != nil {
		return
	}
	return p.recvReadDestination()
}

func (p *BFrontendClient) sendReadDestination(getRequest *ReadDestinationRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("readDestination", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BFrontendReadDestinationArgs{
		GetRequest: getRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BFrontendClient) recvReadDestination() (value *DestinationDescription, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "readDestination" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readDestination failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readDestination failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error27 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error28 error
		error28, err = error27.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error28
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readDestination failed: invalid message type")
		return
	}
	result := BFrontendReadDestinationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UpdateRequest
func (p *BFrontendClient) UpdateDestination(updateRequest *UpdateDestinationRequest) (r *DestinationDescription, err error) {
	if err = p.sendUpdateDestination(updateRequest); err != nil {
		return
	}
	return p.recvUpdateDestination()
}

func (p *BFrontendClient) sendUpdateDestination(updateRequest *UpdateDestinationRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateDestination", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BFrontendUpdateDestinationArgs{
		UpdateRequest: updateRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BFrontendClient) recvUpdateDestination() (value *DestinationDescription, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateDestination" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateDestination failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateDestination failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error29 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error30 error
		error30, err = error29.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error30
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateDestination failed: invalid message type")
		return
	}
	result := BFrontendUpdateDestinationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DeleteRequest
func (p *BFrontendClient) DeleteDestination(deleteRequest *DeleteDestinationRequest) (err error) {
	if err = p.sendDeleteDestination(deleteRequest); err != nil {
		return
	}
	return p.recvDeleteDestination()
}

func (p *BFrontendClient) sendDeleteDestination(deleteRequest *DeleteDestinationRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteDestination", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BFrontendDeleteDestinationArgs{
		DeleteRequest: deleteRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BFrontendClient) recvDeleteDestination() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deleteDestination" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteDestination failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteDestination failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error31 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error32 error
		error32, err = error31.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error32
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteDestination failed: invalid message type")
		return
	}
	result := BFrontendDeleteDestinationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	}
	return
}

// Parameters:
//  - ListRequest
func (p *BFrontendClient) ListDestinations(listRequest *ListDestinationsRequest) (r *ListDestinationsResult_, err error) {
	if err = p.sendListDestinations(listRequest); err != nil {
		return
	}
	return p.recvListDestinations()
}

func (p *BFrontendClient) sendListDestinations(listRequest *ListDestinationsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listDestinations", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BFrontendListDestinationsArgs{
		ListRequest: listRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BFrontendClient) recvListDestinations() (value *ListDestinationsResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "listDestinations" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listDestinations failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listDestinations failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error33 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error34 error
		error34, err = error33.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error34
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listDestinations failed: invalid message type")
		return
	}
	result := BFrontendListDestinationsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	}
	value = result.GetSuccess()
	return
}

// *** ConsumerGroup CRUD *******************
//
// Parameters:
//  - RegisterRequest
func (p *BFrontendClient) CreateConsumerGroup(registerRequest *CreateConsumerGroupRequest) (r *ConsumerGroupDescription, err error) {
	if err = p.sendCreateConsumerGroup(registerRequest); err != nil {
		return
	}
	return p.recvCreateConsumerGroup()
}

func (p *BFrontendClient) sendCreateConsumerGroup(registerRequest *CreateConsumerGroupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createConsumerGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BFrontendCreateConsumerGroupArgs{
		RegisterRequest: registerRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BFrontendClient) recvCreateConsumerGroup() (value *ConsumerGroupDescription, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createConsumerGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createConsumerGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createConsumerGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error35 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error36 error
		error36, err = error35.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error36
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createConsumerGroup failed: invalid message type")
		return
	}
	result := BFrontendCreateConsumerGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityExistsError != nil {
		err = result.EntityExistsError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GetRequest
func (p *BFrontendClient) ReadConsumerGroup(getRequest *ReadConsumerGroupRequest) (r *ConsumerGroupDescription, err error) {
	if err = p.sendReadConsumerGroup(getRequest); err != nil {
		return
	}
	return p.recvReadConsumerGroup()
}

func (p *BFrontendClient) sendReadConsumerGroup(getRequest *ReadConsumerGroupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("readConsumerGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BFrontendReadConsumerGroupArgs{
		GetRequest: getRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BFrontendClient) recvReadConsumerGroup() (value *ConsumerGroupDescription, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "readConsumerGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readConsumerGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readConsumerGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error37 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error38 error
		error38, err = error37.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error38
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readConsumerGroup failed: invalid message type")
		return
	}
	result := BFrontendReadConsumerGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UpdateRequest
func (p *BFrontendClient) UpdateConsumerGroup(updateRequest *UpdateConsumerGroupRequest) (r *ConsumerGroupDescription, err error) {
	if err = p.sendUpdateConsumerGroup(updateRequest); err != nil {
		return
	}
	return p.recvUpdateConsumerGroup()
}

func (p *BFrontendClient) sendUpdateConsumerGroup(updateRequest *UpdateConsumerGroupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateConsumerGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BFrontendUpdateConsumerGroupArgs{
		UpdateRequest: updateRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BFrontendClient) recvUpdateConsumerGroup() (value *ConsumerGroupDescription, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateConsumerGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateConsumerGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateConsumerGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error39 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error40 error
		error40, err = error39.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error40
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateConsumerGroup failed: invalid message type")
		return
	}
	result := BFrontendUpdateConsumerGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DeleteRequest
func (p *BFrontendClient) DeleteConsumerGroup(deleteRequest *DeleteConsumerGroupRequest) (err error) {
	if err = p.sendDeleteConsumerGroup(deleteRequest); err != nil {
		return
	}
	return p.recvDeleteConsumerGroup()
}

func (p *BFrontendClient) sendDeleteConsumerGroup(deleteRequest *DeleteConsumerGroupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteConsumerGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BFrontendDeleteConsumerGroupArgs{
		DeleteRequest: deleteRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BFrontendClient) recvDeleteConsumerGroup() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deleteConsumerGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteConsumerGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteConsumerGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error41 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error42 error
		error42, err = error41.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error42
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteConsumerGroup failed: invalid message type")
		return
	}
	result := BFrontendDeleteConsumerGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	}
	return
}

// Parameters:
//  - ListRequest
func (p *BFrontendClient) ListConsumerGroups(listRequest *ListConsumerGroupRequest) (r *ListConsumerGroupResult_, err error) {
	if err = p.sendListConsumerGroups(listRequest); err != nil {
		return
	}
	return p.recvListConsumerGroups()
}

func (p *BFrontendClient) sendListConsumerGroups(listRequest *ListConsumerGroupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listConsumerGroups", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BFrontendListConsumerGroupsArgs{
		ListRequest: listRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BFrontendClient) recvListConsumerGroups() (value *ListConsumerGroupResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "listConsumerGroups" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listConsumerGroups failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listConsumerGroups failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error43 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error44 error
		error44, err = error43.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error44
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listConsumerGroups failed: invalid message type")
		return
	}
	result := BFrontendListConsumerGroupsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	}
	value = result.GetSuccess()
	return
}

//  * readDestinationHosts will be replaced by readPublisherOptions soon
// *
//
// Parameters:
//  - GetHostsRequest
func (p *BFrontendClient) ReadDestinationHosts(getHostsRequest *ReadDestinationHostsRequest) (r *ReadDestinationHostsResult_, err error) {
	if err = p.sendReadDestinationHosts(getHostsRequest); err != nil {
		return
	}
	return p.recvReadDestinationHosts()
}

func (p *BFrontendClient) sendReadDestinationHosts(getHostsRequest *ReadDestinationHostsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("readDestinationHosts", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BFrontendReadDestinationHostsArgs{
		GetHostsRequest: getHostsRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BFrontendClient) recvReadDestinationHosts() (value *ReadDestinationHostsResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "readDestinationHosts" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readDestinationHosts failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readDestinationHosts failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error45 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error46 error
		error46, err = error45.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error46
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readDestinationHosts failed: invalid message type")
		return
	}
	result := BFrontendReadDestinationHostsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.EntityDisabled != nil {
		err = result.EntityDisabled
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GetPublisherOptionsRequest
func (p *BFrontendClient) ReadPublisherOptions(getPublisherOptionsRequest *ReadPublisherOptionsRequest) (r *ReadPublisherOptionsResult_, err error) {
	if err = p.sendReadPublisherOptions(getPublisherOptionsRequest); err != nil {
		return
	}
	return p.recvReadPublisherOptions()
}

func (p *BFrontendClient) sendReadPublisherOptions(getPublisherOptionsRequest *ReadPublisherOptionsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("readPublisherOptions", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BFrontendReadPublisherOptionsArgs{
		GetPublisherOptionsRequest: getPublisherOptionsRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BFrontendClient) recvReadPublisherOptions() (value *ReadPublisherOptionsResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "readPublisherOptions" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readPublisherOptions failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readPublisherOptions failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error47 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error48 error
		error48, err = error47.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error48
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readPublisherOptions failed: invalid message type")
		return
	}
	result := BFrontendReadPublisherOptionsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.EntityDisabled != nil {
		err = result.EntityDisabled
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GetHostsRequest
func (p *BFrontendClient) ReadConsumerGroupHosts(getHostsRequest *ReadConsumerGroupHostsRequest) (r *ReadConsumerGroupHostsResult_, err error) {
	if err = p.sendReadConsumerGroupHosts(getHostsRequest); err != nil {
		return
	}
	return p.recvReadConsumerGroupHosts()
}

func (p *BFrontendClient) sendReadConsumerGroupHosts(getHostsRequest *ReadConsumerGroupHostsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("readConsumerGroupHosts", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BFrontendReadConsumerGroupHostsArgs{
		GetHostsRequest: getHostsRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BFrontendClient) recvReadConsumerGroupHosts() (value *ReadConsumerGroupHostsResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "readConsumerGroupHosts" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readConsumerGroupHosts failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readConsumerGroupHosts failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error49 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error50 error
		error50, err = error49.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error50
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readConsumerGroupHosts failed: invalid message type")
		return
	}
	result := BFrontendReadConsumerGroupHostsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.EntityDisabled != nil {
		err = result.EntityDisabled
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	}
	value = result.GetSuccess()
	return
}

// *************** DLQ Management ***********
//
// Parameters:
//  - PurgeRequest
func (p *BFrontendClient) PurgeDLQForConsumerGroup(purgeRequest *PurgeDLQForConsumerGroupRequest) (err error) {
	if err = p.sendPurgeDLQForConsumerGroup(purgeRequest); err != nil {
		return
	}
	return p.recvPurgeDLQForConsumerGroup()
}

func (p *BFrontendClient) sendPurgeDLQForConsumerGroup(purgeRequest *PurgeDLQForConsumerGroupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("purgeDLQForConsumerGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BFrontendPurgeDLQForConsumerGroupArgs{
		PurgeRequest: purgeRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BFrontendClient) recvPurgeDLQForConsumerGroup() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "purgeDLQForConsumerGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "purgeDLQForConsumerGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "purgeDLQForConsumerGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error51 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error52 error
		error52, err = error51.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error52
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "purgeDLQForConsumerGroup failed: invalid message type")
		return
	}
	result := BFrontendPurgeDLQForConsumerGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	}
	return
}

// Parameters:
//  - MergeRequest
func (p *BFrontendClient) MergeDLQForConsumerGroup(mergeRequest *MergeDLQForConsumerGroupRequest) (err error) {
	if err = p.sendMergeDLQForConsumerGroup(mergeRequest); err != nil {
		return
	}
	return p.recvMergeDLQForConsumerGroup()
}

func (p *BFrontendClient) sendMergeDLQForConsumerGroup(mergeRequest *MergeDLQForConsumerGroupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("mergeDLQForConsumerGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BFrontendMergeDLQForConsumerGroupArgs{
		MergeRequest: mergeRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BFrontendClient) recvMergeDLQForConsumerGroup() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "mergeDLQForConsumerGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "mergeDLQForConsumerGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "mergeDLQForConsumerGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error53 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error54 error
		error54, err = error53.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error54
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "mergeDLQForConsumerGroup failed: invalid message type")
		return
	}
	result := BFrontendMergeDLQForConsumerGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	}
	return
}

// ********* Queue Information  *****************************
//
// Parameters:
//  - GetQueueDepthInfoRequest
func (p *BFrontendClient) GetQueueDepthInfo(getQueueDepthInfoRequest *GetQueueDepthInfoRequest) (r *GetQueueDepthInfoResult_, err error) {
	if err = p.sendGetQueueDepthInfo(getQueueDepthInfoRequest); err != nil {
		return
	}
	return p.recvGetQueueDepthInfo()
}

func (p *BFrontendClient) sendGetQueueDepthInfo(getQueueDepthInfoRequest *GetQueueDepthInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getQueueDepthInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BFrontendGetQueueDepthInfoArgs{
		GetQueueDepthInfoRequest: getQueueDepthInfoRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BFrontendClient) recvGetQueueDepthInfo() (value *GetQueueDepthInfoResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getQueueDepthInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getQueueDepthInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getQueueDepthInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error55 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error56 error
		error56, err = error55.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error56
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getQueueDepthInfo failed: invalid message type")
		return
	}
	result := BFrontendGetQueueDepthInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.CacheMissError != nil {
		err = result.CacheMissError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	}
	value = result.GetSuccess()
	return
}

type BFrontendProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      BFrontend
}

func (p *BFrontendProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *BFrontendProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *BFrontendProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewBFrontendProcessor(handler BFrontend) *BFrontendProcessor {

	self57 := &BFrontendProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self57.processorMap["HostPort"] = &bFrontendProcessorHostPort{handler: handler}
	self57.processorMap["createDestination"] = &bFrontendProcessorCreateDestination{handler: handler}
	self57.processorMap["readDestination"] = &bFrontendProcessorReadDestination{handler: handler}
	self57.processorMap["updateDestination"] = &bFrontendProcessorUpdateDestination{handler: handler}
	self57.processorMap["deleteDestination"] = &bFrontendProcessorDeleteDestination{handler: handler}
	self57.processorMap["listDestinations"] = &bFrontendProcessorListDestinations{handler: handler}
	self57.processorMap["createConsumerGroup"] = &bFrontendProcessorCreateConsumerGroup{handler: handler}
	self57.processorMap["readConsumerGroup"] = &bFrontendProcessorReadConsumerGroup{handler: handler}
	self57.processorMap["updateConsumerGroup"] = &bFrontendProcessorUpdateConsumerGroup{handler: handler}
	self57.processorMap["deleteConsumerGroup"] = &bFrontendProcessorDeleteConsumerGroup{handler: handler}
	self57.processorMap["listConsumerGroups"] = &bFrontendProcessorListConsumerGroups{handler: handler}
	self57.processorMap["readDestinationHosts"] = &bFrontendProcessorReadDestinationHosts{handler: handler}
	self57.processorMap["readPublisherOptions"] = &bFrontendProcessorReadPublisherOptions{handler: handler}
	self57.processorMap["readConsumerGroupHosts"] = &bFrontendProcessorReadConsumerGroupHosts{handler: handler}
	self57.processorMap["purgeDLQForConsumerGroup"] = &bFrontendProcessorPurgeDLQForConsumerGroup{handler: handler}
	self57.processorMap["mergeDLQForConsumerGroup"] = &bFrontendProcessorMergeDLQForConsumerGroup{handler: handler}
	self57.processorMap["getQueueDepthInfo"] = &bFrontendProcessorGetQueueDepthInfo{handler: handler}
	return self57
}

func (p *BFrontendProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x58 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x58.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x58

}

type bFrontendProcessorHostPort struct {
	handler BFrontend
}

func (p *bFrontendProcessorHostPort) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BFrontendHostPortArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("HostPort", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BFrontendHostPortResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.HostPort(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing HostPort: "+err2.Error())
		oprot.WriteMessageBegin("HostPort", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("HostPort", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bFrontendProcessorCreateDestination struct {
	handler BFrontend
}

func (p *bFrontendProcessorCreateDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BFrontendCreateDestinationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createDestination", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BFrontendCreateDestinationResult{}
	var retval *DestinationDescription
	var err2 error
	if retval, err2 = p.handler.CreateDestination(args.CreateRequest); err2 != nil {
		switch v := err2.(type) {
		case *EntityAlreadyExistsError:
			result.EntityExistsError = v
		case *BadRequestError:
			result.RequestError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createDestination: "+err2.Error())
			oprot.WriteMessageBegin("createDestination", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createDestination", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bFrontendProcessorReadDestination struct {
	handler BFrontend
}

func (p *bFrontendProcessorReadDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BFrontendReadDestinationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("readDestination", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BFrontendReadDestinationResult{}
	var retval *DestinationDescription
	var err2 error
	if retval, err2 = p.handler.ReadDestination(args.GetRequest); err2 != nil {
		switch v := err2.(type) {
		case *EntityNotExistsError:
			result.EntityError = v
		case *BadRequestError:
			result.RequestError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readDestination: "+err2.Error())
			oprot.WriteMessageBegin("readDestination", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("readDestination", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bFrontendProcessorUpdateDestination struct {
	handler BFrontend
}

func (p *bFrontendProcessorUpdateDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BFrontendUpdateDestinationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateDestination", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BFrontendUpdateDestinationResult{}
	var retval *DestinationDescription
	var err2 error
	if retval, err2 = p.handler.UpdateDestination(args.UpdateRequest); err2 != nil {
		switch v := err2.(type) {
		case *EntityNotExistsError:
			result.EntityError = v
		case *BadRequestError:
			result.RequestError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateDestination: "+err2.Error())
			oprot.WriteMessageBegin("updateDestination", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updateDestination", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bFrontendProcessorDeleteDestination struct {
	handler BFrontend
}

func (p *bFrontendProcessorDeleteDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BFrontendDeleteDestinationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteDestination", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BFrontendDeleteDestinationResult{}
	var err2 error
	if err2 = p.handler.DeleteDestination(args.DeleteRequest); err2 != nil {
		switch v := err2.(type) {
		case *EntityNotExistsError:
			result.EntityError = v
		case *BadRequestError:
			result.RequestError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteDestination: "+err2.Error())
			oprot.WriteMessageBegin("deleteDestination", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteDestination", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bFrontendProcessorListDestinations struct {
	handler BFrontend
}

func (p *bFrontendProcessorListDestinations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BFrontendListDestinationsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listDestinations", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BFrontendListDestinationsResult{}
	var retval *ListDestinationsResult_
	var err2 error
	if retval, err2 = p.handler.ListDestinations(args.ListRequest); err2 != nil {
		switch v := err2.(type) {
		case *BadRequestError:
			result.RequestError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listDestinations: "+err2.Error())
			oprot.WriteMessageBegin("listDestinations", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listDestinations", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bFrontendProcessorCreateConsumerGroup struct {
	handler BFrontend
}

func (p *bFrontendProcessorCreateConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BFrontendCreateConsumerGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createConsumerGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BFrontendCreateConsumerGroupResult{}
	var retval *ConsumerGroupDescription
	var err2 error
	if retval, err2 = p.handler.CreateConsumerGroup(args.RegisterRequest); err2 != nil {
		switch v := err2.(type) {
		case *EntityAlreadyExistsError:
			result.EntityExistsError = v
		case *BadRequestError:
			result.RequestError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createConsumerGroup: "+err2.Error())
			oprot.WriteMessageBegin("createConsumerGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createConsumerGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bFrontendProcessorReadConsumerGroup struct {
	handler BFrontend
}

func (p *bFrontendProcessorReadConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BFrontendReadConsumerGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("readConsumerGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BFrontendReadConsumerGroupResult{}
	var retval *ConsumerGroupDescription
	var err2 error
	if retval, err2 = p.handler.ReadConsumerGroup(args.GetRequest); err2 != nil {
		switch v := err2.(type) {
		case *EntityNotExistsError:
			result.EntityError = v
		case *BadRequestError:
			result.RequestError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readConsumerGroup: "+err2.Error())
			oprot.WriteMessageBegin("readConsumerGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("readConsumerGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bFrontendProcessorUpdateConsumerGroup struct {
	handler BFrontend
}

func (p *bFrontendProcessorUpdateConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BFrontendUpdateConsumerGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateConsumerGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BFrontendUpdateConsumerGroupResult{}
	var retval *ConsumerGroupDescription
	var err2 error
	if retval, err2 = p.handler.UpdateConsumerGroup(args.UpdateRequest); err2 != nil {
		switch v := err2.(type) {
		case *EntityNotExistsError:
			result.EntityError = v
		case *BadRequestError:
			result.RequestError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateConsumerGroup: "+err2.Error())
			oprot.WriteMessageBegin("updateConsumerGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updateConsumerGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bFrontendProcessorDeleteConsumerGroup struct {
	handler BFrontend
}

func (p *bFrontendProcessorDeleteConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BFrontendDeleteConsumerGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteConsumerGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BFrontendDeleteConsumerGroupResult{}
	var err2 error
	if err2 = p.handler.DeleteConsumerGroup(args.DeleteRequest); err2 != nil {
		switch v := err2.(type) {
		case *EntityNotExistsError:
			result.EntityError = v
		case *BadRequestError:
			result.RequestError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteConsumerGroup: "+err2.Error())
			oprot.WriteMessageBegin("deleteConsumerGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteConsumerGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bFrontendProcessorListConsumerGroups struct {
	handler BFrontend
}

func (p *bFrontendProcessorListConsumerGroups) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BFrontendListConsumerGroupsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listConsumerGroups", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BFrontendListConsumerGroupsResult{}
	var retval *ListConsumerGroupResult_
	var err2 error
	if retval, err2 = p.handler.ListConsumerGroups(args.ListRequest); err2 != nil {
		switch v := err2.(type) {
		case *BadRequestError:
			result.RequestError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listConsumerGroups: "+err2.Error())
			oprot.WriteMessageBegin("listConsumerGroups", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listConsumerGroups", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bFrontendProcessorReadDestinationHosts struct {
	handler BFrontend
}

func (p *bFrontendProcessorReadDestinationHosts) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BFrontendReadDestinationHostsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("readDestinationHosts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BFrontendReadDestinationHostsResult{}
	var retval *ReadDestinationHostsResult_
	var err2 error
	if retval, err2 = p.handler.ReadDestinationHosts(args.GetHostsRequest); err2 != nil {
		switch v := err2.(type) {
		case *EntityNotExistsError:
			result.EntityError = v
		case *EntityDisabledError:
			result.EntityDisabled = v
		case *BadRequestError:
			result.RequestError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readDestinationHosts: "+err2.Error())
			oprot.WriteMessageBegin("readDestinationHosts", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("readDestinationHosts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bFrontendProcessorReadPublisherOptions struct {
	handler BFrontend
}

func (p *bFrontendProcessorReadPublisherOptions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BFrontendReadPublisherOptionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("readPublisherOptions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BFrontendReadPublisherOptionsResult{}
	var retval *ReadPublisherOptionsResult_
	var err2 error
	if retval, err2 = p.handler.ReadPublisherOptions(args.GetPublisherOptionsRequest); err2 != nil {
		switch v := err2.(type) {
		case *EntityNotExistsError:
			result.EntityError = v
		case *EntityDisabledError:
			result.EntityDisabled = v
		case *BadRequestError:
			result.RequestError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readPublisherOptions: "+err2.Error())
			oprot.WriteMessageBegin("readPublisherOptions", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("readPublisherOptions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bFrontendProcessorReadConsumerGroupHosts struct {
	handler BFrontend
}

func (p *bFrontendProcessorReadConsumerGroupHosts) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BFrontendReadConsumerGroupHostsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("readConsumerGroupHosts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BFrontendReadConsumerGroupHostsResult{}
	var retval *ReadConsumerGroupHostsResult_
	var err2 error
	if retval, err2 = p.handler.ReadConsumerGroupHosts(args.GetHostsRequest); err2 != nil {
		switch v := err2.(type) {
		case *EntityNotExistsError:
			result.EntityError = v
		case *EntityDisabledError:
			result.EntityDisabled = v
		case *BadRequestError:
			result.RequestError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readConsumerGroupHosts: "+err2.Error())
			oprot.WriteMessageBegin("readConsumerGroupHosts", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("readConsumerGroupHosts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bFrontendProcessorPurgeDLQForConsumerGroup struct {
	handler BFrontend
}

func (p *bFrontendProcessorPurgeDLQForConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BFrontendPurgeDLQForConsumerGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("purgeDLQForConsumerGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BFrontendPurgeDLQForConsumerGroupResult{}
	var err2 error
	if err2 = p.handler.PurgeDLQForConsumerGroup(args.PurgeRequest); err2 != nil {
		switch v := err2.(type) {
		case *EntityNotExistsError:
			result.EntityError = v
		case *BadRequestError:
			result.RequestError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing purgeDLQForConsumerGroup: "+err2.Error())
			oprot.WriteMessageBegin("purgeDLQForConsumerGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("purgeDLQForConsumerGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bFrontendProcessorMergeDLQForConsumerGroup struct {
	handler BFrontend
}

func (p *bFrontendProcessorMergeDLQForConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BFrontendMergeDLQForConsumerGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mergeDLQForConsumerGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BFrontendMergeDLQForConsumerGroupResult{}
	var err2 error
	if err2 = p.handler.MergeDLQForConsumerGroup(args.MergeRequest); err2 != nil {
		switch v := err2.(type) {
		case *EntityNotExistsError:
			result.EntityError = v
		case *BadRequestError:
			result.RequestError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mergeDLQForConsumerGroup: "+err2.Error())
			oprot.WriteMessageBegin("mergeDLQForConsumerGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("mergeDLQForConsumerGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bFrontendProcessorGetQueueDepthInfo struct {
	handler BFrontend
}

func (p *bFrontendProcessorGetQueueDepthInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BFrontendGetQueueDepthInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getQueueDepthInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BFrontendGetQueueDepthInfoResult{}
	var retval *GetQueueDepthInfoResult_
	var err2 error
	if retval, err2 = p.handler.GetQueueDepthInfo(args.GetQueueDepthInfoRequest); err2 != nil {
		switch v := err2.(type) {
		case *QueueCacheMissError:
			result.CacheMissError = v
		case *BadRequestError:
			result.RequestError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getQueueDepthInfo: "+err2.Error())
			oprot.WriteMessageBegin("getQueueDepthInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getQueueDepthInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type BFrontendHostPortArgs struct {
}

func NewBFrontendHostPortArgs() *BFrontendHostPortArgs {
	return &BFrontendHostPortArgs{}
}

func (p *BFrontendHostPortArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendHostPortArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HostPort_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendHostPortArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendHostPortArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFrontendHostPortResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewBFrontendHostPortResult() *BFrontendHostPortResult {
	return &BFrontendHostPortResult{}
}

var BFrontendHostPortResult_Success_DEFAULT string

func (p *BFrontendHostPortResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return BFrontendHostPortResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *BFrontendHostPortResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BFrontendHostPortResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendHostPortResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *BFrontendHostPortResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HostPort_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendHostPortResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BFrontendHostPortResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendHostPortResult(%+v)", *p)
}

// Attributes:
//  - CreateRequest
type BFrontendCreateDestinationArgs struct {
	CreateRequest *CreateDestinationRequest `thrift:"createRequest,1" json:"createRequest"`
}

func NewBFrontendCreateDestinationArgs() *BFrontendCreateDestinationArgs {
	return &BFrontendCreateDestinationArgs{}
}

var BFrontendCreateDestinationArgs_CreateRequest_DEFAULT *CreateDestinationRequest

func (p *BFrontendCreateDestinationArgs) GetCreateRequest() *CreateDestinationRequest {
	if !p.IsSetCreateRequest() {
		return BFrontendCreateDestinationArgs_CreateRequest_DEFAULT
	}
	return p.CreateRequest
}
func (p *BFrontendCreateDestinationArgs) IsSetCreateRequest() bool {
	return p.CreateRequest != nil
}

func (p *BFrontendCreateDestinationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendCreateDestinationArgs) readField1(iprot thrift.TProtocol) error {
	p.CreateRequest = &CreateDestinationRequest{
		ChecksumOption: 0,
	}
	if err := p.CreateRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateRequest), err)
	}
	return nil
}

func (p *BFrontendCreateDestinationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createDestination_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendCreateDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:createRequest: ", p), err)
	}
	if err := p.CreateRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:createRequest: ", p), err)
	}
	return err
}

func (p *BFrontendCreateDestinationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendCreateDestinationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityExistsError
//  - RequestError
type BFrontendCreateDestinationResult struct {
	Success           *DestinationDescription   `thrift:"success,0" json:"success,omitempty"`
	EntityExistsError *EntityAlreadyExistsError `thrift:"entityExistsError,1" json:"entityExistsError,omitempty"`
	RequestError      *BadRequestError          `thrift:"requestError,2" json:"requestError,omitempty"`
}

func NewBFrontendCreateDestinationResult() *BFrontendCreateDestinationResult {
	return &BFrontendCreateDestinationResult{}
}

var BFrontendCreateDestinationResult_Success_DEFAULT *DestinationDescription

func (p *BFrontendCreateDestinationResult) GetSuccess() *DestinationDescription {
	if !p.IsSetSuccess() {
		return BFrontendCreateDestinationResult_Success_DEFAULT
	}
	return p.Success
}

var BFrontendCreateDestinationResult_EntityExistsError_DEFAULT *EntityAlreadyExistsError

func (p *BFrontendCreateDestinationResult) GetEntityExistsError() *EntityAlreadyExistsError {
	if !p.IsSetEntityExistsError() {
		return BFrontendCreateDestinationResult_EntityExistsError_DEFAULT
	}
	return p.EntityExistsError
}

var BFrontendCreateDestinationResult_RequestError_DEFAULT *BadRequestError

func (p *BFrontendCreateDestinationResult) GetRequestError() *BadRequestError {
	if !p.IsSetRequestError() {
		return BFrontendCreateDestinationResult_RequestError_DEFAULT
	}
	return p.RequestError
}
func (p *BFrontendCreateDestinationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BFrontendCreateDestinationResult) IsSetEntityExistsError() bool {
	return p.EntityExistsError != nil
}

func (p *BFrontendCreateDestinationResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BFrontendCreateDestinationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendCreateDestinationResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &DestinationDescription{
		ChecksumOption: 0,
	}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BFrontendCreateDestinationResult) readField1(iprot thrift.TProtocol) error {
	p.EntityExistsError = &EntityAlreadyExistsError{}
	if err := p.EntityExistsError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
	}
	return nil
}

func (p *BFrontendCreateDestinationResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BFrontendCreateDestinationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createDestination_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendCreateDestinationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BFrontendCreateDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityExistsError() {
		if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityExistsError: ", p), err)
		}
		if err := p.EntityExistsError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityExistsError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendCreateDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendCreateDestinationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendCreateDestinationResult(%+v)", *p)
}

// Attributes:
//  - GetRequest
type BFrontendReadDestinationArgs struct {
	GetRequest *ReadDestinationRequest `thrift:"getRequest,1" json:"getRequest"`
}

func NewBFrontendReadDestinationArgs() *BFrontendReadDestinationArgs {
	return &BFrontendReadDestinationArgs{}
}

var BFrontendReadDestinationArgs_GetRequest_DEFAULT *ReadDestinationRequest

func (p *BFrontendReadDestinationArgs) GetGetRequest() *ReadDestinationRequest {
	if !p.IsSetGetRequest() {
		return BFrontendReadDestinationArgs_GetRequest_DEFAULT
	}
	return p.GetRequest
}
func (p *BFrontendReadDestinationArgs) IsSetGetRequest() bool {
	return p.GetRequest != nil
}

func (p *BFrontendReadDestinationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendReadDestinationArgs) readField1(iprot thrift.TProtocol) error {
	p.GetRequest = &ReadDestinationRequest{}
	if err := p.GetRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetRequest), err)
	}
	return nil
}

func (p *BFrontendReadDestinationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readDestination_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendReadDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("getRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getRequest: ", p), err)
	}
	if err := p.GetRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getRequest: ", p), err)
	}
	return err
}

func (p *BFrontendReadDestinationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendReadDestinationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
type BFrontendReadDestinationResult struct {
	Success      *DestinationDescription `thrift:"success,0" json:"success,omitempty"`
	EntityError  *EntityNotExistsError   `thrift:"entityError,1" json:"entityError,omitempty"`
	RequestError *BadRequestError        `thrift:"requestError,2" json:"requestError,omitempty"`
}

func NewBFrontendReadDestinationResult() *BFrontendReadDestinationResult {
	return &BFrontendReadDestinationResult{}
}

var BFrontendReadDestinationResult_Success_DEFAULT *DestinationDescription

func (p *BFrontendReadDestinationResult) GetSuccess() *DestinationDescription {
	if !p.IsSetSuccess() {
		return BFrontendReadDestinationResult_Success_DEFAULT
	}
	return p.Success
}

var BFrontendReadDestinationResult_EntityError_DEFAULT *EntityNotExistsError

func (p *BFrontendReadDestinationResult) GetEntityError() *EntityNotExistsError {
	if !p.IsSetEntityError() {
		return BFrontendReadDestinationResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var BFrontendReadDestinationResult_RequestError_DEFAULT *BadRequestError

func (p *BFrontendReadDestinationResult) GetRequestError() *BadRequestError {
	if !p.IsSetRequestError() {
		return BFrontendReadDestinationResult_RequestError_DEFAULT
	}
	return p.RequestError
}
func (p *BFrontendReadDestinationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BFrontendReadDestinationResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *BFrontendReadDestinationResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BFrontendReadDestinationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendReadDestinationResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &DestinationDescription{
		ChecksumOption: 0,
	}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BFrontendReadDestinationResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *BFrontendReadDestinationResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BFrontendReadDestinationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readDestination_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendReadDestinationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BFrontendReadDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendReadDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendReadDestinationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendReadDestinationResult(%+v)", *p)
}

// Attributes:
//  - UpdateRequest
type BFrontendUpdateDestinationArgs struct {
	UpdateRequest *UpdateDestinationRequest `thrift:"updateRequest,1" json:"updateRequest"`
}

func NewBFrontendUpdateDestinationArgs() *BFrontendUpdateDestinationArgs {
	return &BFrontendUpdateDestinationArgs{}
}

var BFrontendUpdateDestinationArgs_UpdateRequest_DEFAULT *UpdateDestinationRequest

func (p *BFrontendUpdateDestinationArgs) GetUpdateRequest() *UpdateDestinationRequest {
	if !p.IsSetUpdateRequest() {
		return BFrontendUpdateDestinationArgs_UpdateRequest_DEFAULT
	}
	return p.UpdateRequest
}
func (p *BFrontendUpdateDestinationArgs) IsSetUpdateRequest() bool {
	return p.UpdateRequest != nil
}

func (p *BFrontendUpdateDestinationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendUpdateDestinationArgs) readField1(iprot thrift.TProtocol) error {
	p.UpdateRequest = &UpdateDestinationRequest{}
	if err := p.UpdateRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdateRequest), err)
	}
	return nil
}

func (p *BFrontendUpdateDestinationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateDestination_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendUpdateDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateRequest: ", p), err)
	}
	if err := p.UpdateRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdateRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateRequest: ", p), err)
	}
	return err
}

func (p *BFrontendUpdateDestinationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendUpdateDestinationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
type BFrontendUpdateDestinationResult struct {
	Success      *DestinationDescription `thrift:"success,0" json:"success,omitempty"`
	EntityError  *EntityNotExistsError   `thrift:"entityError,1" json:"entityError,omitempty"`
	RequestError *BadRequestError        `thrift:"requestError,2" json:"requestError,omitempty"`
}

func NewBFrontendUpdateDestinationResult() *BFrontendUpdateDestinationResult {
	return &BFrontendUpdateDestinationResult{}
}

var BFrontendUpdateDestinationResult_Success_DEFAULT *DestinationDescription

func (p *BFrontendUpdateDestinationResult) GetSuccess() *DestinationDescription {
	if !p.IsSetSuccess() {
		return BFrontendUpdateDestinationResult_Success_DEFAULT
	}
	return p.Success
}

var BFrontendUpdateDestinationResult_EntityError_DEFAULT *EntityNotExistsError

func (p *BFrontendUpdateDestinationResult) GetEntityError() *EntityNotExistsError {
	if !p.IsSetEntityError() {
		return BFrontendUpdateDestinationResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var BFrontendUpdateDestinationResult_RequestError_DEFAULT *BadRequestError

func (p *BFrontendUpdateDestinationResult) GetRequestError() *BadRequestError {
	if !p.IsSetRequestError() {
		return BFrontendUpdateDestinationResult_RequestError_DEFAULT
	}
	return p.RequestError
}
func (p *BFrontendUpdateDestinationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BFrontendUpdateDestinationResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *BFrontendUpdateDestinationResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BFrontendUpdateDestinationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendUpdateDestinationResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &DestinationDescription{
		ChecksumOption: 0,
	}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BFrontendUpdateDestinationResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *BFrontendUpdateDestinationResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BFrontendUpdateDestinationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateDestination_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendUpdateDestinationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BFrontendUpdateDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendUpdateDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendUpdateDestinationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendUpdateDestinationResult(%+v)", *p)
}

// Attributes:
//  - DeleteRequest
type BFrontendDeleteDestinationArgs struct {
	DeleteRequest *DeleteDestinationRequest `thrift:"deleteRequest,1" json:"deleteRequest"`
}

func NewBFrontendDeleteDestinationArgs() *BFrontendDeleteDestinationArgs {
	return &BFrontendDeleteDestinationArgs{}
}

var BFrontendDeleteDestinationArgs_DeleteRequest_DEFAULT *DeleteDestinationRequest

func (p *BFrontendDeleteDestinationArgs) GetDeleteRequest() *DeleteDestinationRequest {
	if !p.IsSetDeleteRequest() {
		return BFrontendDeleteDestinationArgs_DeleteRequest_DEFAULT
	}
	return p.DeleteRequest
}
func (p *BFrontendDeleteDestinationArgs) IsSetDeleteRequest() bool {
	return p.DeleteRequest != nil
}

func (p *BFrontendDeleteDestinationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendDeleteDestinationArgs) readField1(iprot thrift.TProtocol) error {
	p.DeleteRequest = &DeleteDestinationRequest{}
	if err := p.DeleteRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeleteRequest), err)
	}
	return nil
}

func (p *BFrontendDeleteDestinationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteDestination_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendDeleteDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deleteRequest: ", p), err)
	}
	if err := p.DeleteRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeleteRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deleteRequest: ", p), err)
	}
	return err
}

func (p *BFrontendDeleteDestinationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendDeleteDestinationArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
type BFrontendDeleteDestinationResult struct {
	EntityError  *EntityNotExistsError `thrift:"entityError,1" json:"entityError,omitempty"`
	RequestError *BadRequestError      `thrift:"requestError,2" json:"requestError,omitempty"`
}

func NewBFrontendDeleteDestinationResult() *BFrontendDeleteDestinationResult {
	return &BFrontendDeleteDestinationResult{}
}

var BFrontendDeleteDestinationResult_EntityError_DEFAULT *EntityNotExistsError

func (p *BFrontendDeleteDestinationResult) GetEntityError() *EntityNotExistsError {
	if !p.IsSetEntityError() {
		return BFrontendDeleteDestinationResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var BFrontendDeleteDestinationResult_RequestError_DEFAULT *BadRequestError

func (p *BFrontendDeleteDestinationResult) GetRequestError() *BadRequestError {
	if !p.IsSetRequestError() {
		return BFrontendDeleteDestinationResult_RequestError_DEFAULT
	}
	return p.RequestError
}
func (p *BFrontendDeleteDestinationResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *BFrontendDeleteDestinationResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BFrontendDeleteDestinationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendDeleteDestinationResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *BFrontendDeleteDestinationResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BFrontendDeleteDestinationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteDestination_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendDeleteDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendDeleteDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendDeleteDestinationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendDeleteDestinationResult(%+v)", *p)
}

// Attributes:
//  - ListRequest
type BFrontendListDestinationsArgs struct {
	ListRequest *ListDestinationsRequest `thrift:"listRequest,1" json:"listRequest"`
}

func NewBFrontendListDestinationsArgs() *BFrontendListDestinationsArgs {
	return &BFrontendListDestinationsArgs{}
}

var BFrontendListDestinationsArgs_ListRequest_DEFAULT *ListDestinationsRequest

func (p *BFrontendListDestinationsArgs) GetListRequest() *ListDestinationsRequest {
	if !p.IsSetListRequest() {
		return BFrontendListDestinationsArgs_ListRequest_DEFAULT
	}
	return p.ListRequest
}
func (p *BFrontendListDestinationsArgs) IsSetListRequest() bool {
	return p.ListRequest != nil
}

func (p *BFrontendListDestinationsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendListDestinationsArgs) readField1(iprot thrift.TProtocol) error {
	p.ListRequest = &ListDestinationsRequest{}
	if err := p.ListRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ListRequest), err)
	}
	return nil
}

func (p *BFrontendListDestinationsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listDestinations_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendListDestinationsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("listRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listRequest: ", p), err)
	}
	if err := p.ListRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ListRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listRequest: ", p), err)
	}
	return err
}

func (p *BFrontendListDestinationsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendListDestinationsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
type BFrontendListDestinationsResult struct {
	Success      *ListDestinationsResult_ `thrift:"success,0" json:"success,omitempty"`
	RequestError *BadRequestError         `thrift:"requestError,1" json:"requestError,omitempty"`
}

func NewBFrontendListDestinationsResult() *BFrontendListDestinationsResult {
	return &BFrontendListDestinationsResult{}
}

var BFrontendListDestinationsResult_Success_DEFAULT *ListDestinationsResult_

func (p *BFrontendListDestinationsResult) GetSuccess() *ListDestinationsResult_ {
	if !p.IsSetSuccess() {
		return BFrontendListDestinationsResult_Success_DEFAULT
	}
	return p.Success
}

var BFrontendListDestinationsResult_RequestError_DEFAULT *BadRequestError

func (p *BFrontendListDestinationsResult) GetRequestError() *BadRequestError {
	if !p.IsSetRequestError() {
		return BFrontendListDestinationsResult_RequestError_DEFAULT
	}
	return p.RequestError
}
func (p *BFrontendListDestinationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BFrontendListDestinationsResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BFrontendListDestinationsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendListDestinationsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ListDestinationsResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BFrontendListDestinationsResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BFrontendListDestinationsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listDestinations_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendListDestinationsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BFrontendListDestinationsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendListDestinationsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendListDestinationsResult(%+v)", *p)
}

// Attributes:
//  - RegisterRequest
type BFrontendCreateConsumerGroupArgs struct {
	RegisterRequest *CreateConsumerGroupRequest `thrift:"registerRequest,1" json:"registerRequest"`
}

func NewBFrontendCreateConsumerGroupArgs() *BFrontendCreateConsumerGroupArgs {
	return &BFrontendCreateConsumerGroupArgs{}
}

var BFrontendCreateConsumerGroupArgs_RegisterRequest_DEFAULT *CreateConsumerGroupRequest

func (p *BFrontendCreateConsumerGroupArgs) GetRegisterRequest() *CreateConsumerGroupRequest {
	if !p.IsSetRegisterRequest() {
		return BFrontendCreateConsumerGroupArgs_RegisterRequest_DEFAULT
	}
	return p.RegisterRequest
}
func (p *BFrontendCreateConsumerGroupArgs) IsSetRegisterRequest() bool {
	return p.RegisterRequest != nil
}

func (p *BFrontendCreateConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendCreateConsumerGroupArgs) readField1(iprot thrift.TProtocol) error {
	p.RegisterRequest = &CreateConsumerGroupRequest{}
	if err := p.RegisterRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RegisterRequest), err)
	}
	return nil
}

func (p *BFrontendCreateConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createConsumerGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendCreateConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("registerRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:registerRequest: ", p), err)
	}
	if err := p.RegisterRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RegisterRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:registerRequest: ", p), err)
	}
	return err
}

func (p *BFrontendCreateConsumerGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendCreateConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityExistsError
//  - RequestError
type BFrontendCreateConsumerGroupResult struct {
	Success           *ConsumerGroupDescription `thrift:"success,0" json:"success,omitempty"`
	EntityExistsError *EntityAlreadyExistsError `thrift:"entityExistsError,1" json:"entityExistsError,omitempty"`
	RequestError      *BadRequestError          `thrift:"requestError,2" json:"requestError,omitempty"`
}

func NewBFrontendCreateConsumerGroupResult() *BFrontendCreateConsumerGroupResult {
	return &BFrontendCreateConsumerGroupResult{}
}

var BFrontendCreateConsumerGroupResult_Success_DEFAULT *ConsumerGroupDescription

func (p *BFrontendCreateConsumerGroupResult) GetSuccess() *ConsumerGroupDescription {
	if !p.IsSetSuccess() {
		return BFrontendCreateConsumerGroupResult_Success_DEFAULT
	}
	return p.Success
}

var BFrontendCreateConsumerGroupResult_EntityExistsError_DEFAULT *EntityAlreadyExistsError

func (p *BFrontendCreateConsumerGroupResult) GetEntityExistsError() *EntityAlreadyExistsError {
	if !p.IsSetEntityExistsError() {
		return BFrontendCreateConsumerGroupResult_EntityExistsError_DEFAULT
	}
	return p.EntityExistsError
}

var BFrontendCreateConsumerGroupResult_RequestError_DEFAULT *BadRequestError

func (p *BFrontendCreateConsumerGroupResult) GetRequestError() *BadRequestError {
	if !p.IsSetRequestError() {
		return BFrontendCreateConsumerGroupResult_RequestError_DEFAULT
	}
	return p.RequestError
}
func (p *BFrontendCreateConsumerGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BFrontendCreateConsumerGroupResult) IsSetEntityExistsError() bool {
	return p.EntityExistsError != nil
}

func (p *BFrontendCreateConsumerGroupResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BFrontendCreateConsumerGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendCreateConsumerGroupResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ConsumerGroupDescription{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BFrontendCreateConsumerGroupResult) readField1(iprot thrift.TProtocol) error {
	p.EntityExistsError = &EntityAlreadyExistsError{}
	if err := p.EntityExistsError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
	}
	return nil
}

func (p *BFrontendCreateConsumerGroupResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BFrontendCreateConsumerGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createConsumerGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendCreateConsumerGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BFrontendCreateConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityExistsError() {
		if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityExistsError: ", p), err)
		}
		if err := p.EntityExistsError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityExistsError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendCreateConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendCreateConsumerGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendCreateConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - GetRequest
type BFrontendReadConsumerGroupArgs struct {
	GetRequest *ReadConsumerGroupRequest `thrift:"getRequest,1" json:"getRequest"`
}

func NewBFrontendReadConsumerGroupArgs() *BFrontendReadConsumerGroupArgs {
	return &BFrontendReadConsumerGroupArgs{}
}

var BFrontendReadConsumerGroupArgs_GetRequest_DEFAULT *ReadConsumerGroupRequest

func (p *BFrontendReadConsumerGroupArgs) GetGetRequest() *ReadConsumerGroupRequest {
	if !p.IsSetGetRequest() {
		return BFrontendReadConsumerGroupArgs_GetRequest_DEFAULT
	}
	return p.GetRequest
}
func (p *BFrontendReadConsumerGroupArgs) IsSetGetRequest() bool {
	return p.GetRequest != nil
}

func (p *BFrontendReadConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendReadConsumerGroupArgs) readField1(iprot thrift.TProtocol) error {
	p.GetRequest = &ReadConsumerGroupRequest{}
	if err := p.GetRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetRequest), err)
	}
	return nil
}

func (p *BFrontendReadConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readConsumerGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendReadConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("getRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getRequest: ", p), err)
	}
	if err := p.GetRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getRequest: ", p), err)
	}
	return err
}

func (p *BFrontendReadConsumerGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendReadConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
type BFrontendReadConsumerGroupResult struct {
	Success      *ConsumerGroupDescription `thrift:"success,0" json:"success,omitempty"`
	EntityError  *EntityNotExistsError     `thrift:"entityError,1" json:"entityError,omitempty"`
	RequestError *BadRequestError          `thrift:"requestError,2" json:"requestError,omitempty"`
}

func NewBFrontendReadConsumerGroupResult() *BFrontendReadConsumerGroupResult {
	return &BFrontendReadConsumerGroupResult{}
}

var BFrontendReadConsumerGroupResult_Success_DEFAULT *ConsumerGroupDescription

func (p *BFrontendReadConsumerGroupResult) GetSuccess() *ConsumerGroupDescription {
	if !p.IsSetSuccess() {
		return BFrontendReadConsumerGroupResult_Success_DEFAULT
	}
	return p.Success
}

var BFrontendReadConsumerGroupResult_EntityError_DEFAULT *EntityNotExistsError

func (p *BFrontendReadConsumerGroupResult) GetEntityError() *EntityNotExistsError {
	if !p.IsSetEntityError() {
		return BFrontendReadConsumerGroupResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var BFrontendReadConsumerGroupResult_RequestError_DEFAULT *BadRequestError

func (p *BFrontendReadConsumerGroupResult) GetRequestError() *BadRequestError {
	if !p.IsSetRequestError() {
		return BFrontendReadConsumerGroupResult_RequestError_DEFAULT
	}
	return p.RequestError
}
func (p *BFrontendReadConsumerGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BFrontendReadConsumerGroupResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *BFrontendReadConsumerGroupResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BFrontendReadConsumerGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendReadConsumerGroupResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ConsumerGroupDescription{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BFrontendReadConsumerGroupResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *BFrontendReadConsumerGroupResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BFrontendReadConsumerGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readConsumerGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendReadConsumerGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BFrontendReadConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendReadConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendReadConsumerGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendReadConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - UpdateRequest
type BFrontendUpdateConsumerGroupArgs struct {
	UpdateRequest *UpdateConsumerGroupRequest `thrift:"updateRequest,1" json:"updateRequest"`
}

func NewBFrontendUpdateConsumerGroupArgs() *BFrontendUpdateConsumerGroupArgs {
	return &BFrontendUpdateConsumerGroupArgs{}
}

var BFrontendUpdateConsumerGroupArgs_UpdateRequest_DEFAULT *UpdateConsumerGroupRequest

func (p *BFrontendUpdateConsumerGroupArgs) GetUpdateRequest() *UpdateConsumerGroupRequest {
	if !p.IsSetUpdateRequest() {
		return BFrontendUpdateConsumerGroupArgs_UpdateRequest_DEFAULT
	}
	return p.UpdateRequest
}
func (p *BFrontendUpdateConsumerGroupArgs) IsSetUpdateRequest() bool {
	return p.UpdateRequest != nil
}

func (p *BFrontendUpdateConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendUpdateConsumerGroupArgs) readField1(iprot thrift.TProtocol) error {
	p.UpdateRequest = &UpdateConsumerGroupRequest{}
	if err := p.UpdateRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdateRequest), err)
	}
	return nil
}

func (p *BFrontendUpdateConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateConsumerGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendUpdateConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateRequest: ", p), err)
	}
	if err := p.UpdateRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdateRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateRequest: ", p), err)
	}
	return err
}

func (p *BFrontendUpdateConsumerGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendUpdateConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
type BFrontendUpdateConsumerGroupResult struct {
	Success      *ConsumerGroupDescription `thrift:"success,0" json:"success,omitempty"`
	EntityError  *EntityNotExistsError     `thrift:"entityError,1" json:"entityError,omitempty"`
	RequestError *BadRequestError          `thrift:"requestError,2" json:"requestError,omitempty"`
}

func NewBFrontendUpdateConsumerGroupResult() *BFrontendUpdateConsumerGroupResult {
	return &BFrontendUpdateConsumerGroupResult{}
}

var BFrontendUpdateConsumerGroupResult_Success_DEFAULT *ConsumerGroupDescription

func (p *BFrontendUpdateConsumerGroupResult) GetSuccess() *ConsumerGroupDescription {
	if !p.IsSetSuccess() {
		return BFrontendUpdateConsumerGroupResult_Success_DEFAULT
	}
	return p.Success
}

var BFrontendUpdateConsumerGroupResult_EntityError_DEFAULT *EntityNotExistsError

func (p *BFrontendUpdateConsumerGroupResult) GetEntityError() *EntityNotExistsError {
	if !p.IsSetEntityError() {
		return BFrontendUpdateConsumerGroupResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var BFrontendUpdateConsumerGroupResult_RequestError_DEFAULT *BadRequestError

func (p *BFrontendUpdateConsumerGroupResult) GetRequestError() *BadRequestError {
	if !p.IsSetRequestError() {
		return BFrontendUpdateConsumerGroupResult_RequestError_DEFAULT
	}
	return p.RequestError
}
func (p *BFrontendUpdateConsumerGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BFrontendUpdateConsumerGroupResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *BFrontendUpdateConsumerGroupResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BFrontendUpdateConsumerGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendUpdateConsumerGroupResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ConsumerGroupDescription{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BFrontendUpdateConsumerGroupResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *BFrontendUpdateConsumerGroupResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BFrontendUpdateConsumerGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateConsumerGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendUpdateConsumerGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BFrontendUpdateConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendUpdateConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendUpdateConsumerGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendUpdateConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - DeleteRequest
type BFrontendDeleteConsumerGroupArgs struct {
	DeleteRequest *DeleteConsumerGroupRequest `thrift:"deleteRequest,1" json:"deleteRequest"`
}

func NewBFrontendDeleteConsumerGroupArgs() *BFrontendDeleteConsumerGroupArgs {
	return &BFrontendDeleteConsumerGroupArgs{}
}

var BFrontendDeleteConsumerGroupArgs_DeleteRequest_DEFAULT *DeleteConsumerGroupRequest

func (p *BFrontendDeleteConsumerGroupArgs) GetDeleteRequest() *DeleteConsumerGroupRequest {
	if !p.IsSetDeleteRequest() {
		return BFrontendDeleteConsumerGroupArgs_DeleteRequest_DEFAULT
	}
	return p.DeleteRequest
}
func (p *BFrontendDeleteConsumerGroupArgs) IsSetDeleteRequest() bool {
	return p.DeleteRequest != nil
}

func (p *BFrontendDeleteConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendDeleteConsumerGroupArgs) readField1(iprot thrift.TProtocol) error {
	p.DeleteRequest = &DeleteConsumerGroupRequest{}
	if err := p.DeleteRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeleteRequest), err)
	}
	return nil
}

func (p *BFrontendDeleteConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteConsumerGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendDeleteConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deleteRequest: ", p), err)
	}
	if err := p.DeleteRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeleteRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deleteRequest: ", p), err)
	}
	return err
}

func (p *BFrontendDeleteConsumerGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendDeleteConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
type BFrontendDeleteConsumerGroupResult struct {
	EntityError  *EntityNotExistsError `thrift:"entityError,1" json:"entityError,omitempty"`
	RequestError *BadRequestError      `thrift:"requestError,2" json:"requestError,omitempty"`
}

func NewBFrontendDeleteConsumerGroupResult() *BFrontendDeleteConsumerGroupResult {
	return &BFrontendDeleteConsumerGroupResult{}
}

var BFrontendDeleteConsumerGroupResult_EntityError_DEFAULT *EntityNotExistsError

func (p *BFrontendDeleteConsumerGroupResult) GetEntityError() *EntityNotExistsError {
	if !p.IsSetEntityError() {
		return BFrontendDeleteConsumerGroupResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var BFrontendDeleteConsumerGroupResult_RequestError_DEFAULT *BadRequestError

func (p *BFrontendDeleteConsumerGroupResult) GetRequestError() *BadRequestError {
	if !p.IsSetRequestError() {
		return BFrontendDeleteConsumerGroupResult_RequestError_DEFAULT
	}
	return p.RequestError
}
func (p *BFrontendDeleteConsumerGroupResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *BFrontendDeleteConsumerGroupResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BFrontendDeleteConsumerGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendDeleteConsumerGroupResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *BFrontendDeleteConsumerGroupResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BFrontendDeleteConsumerGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteConsumerGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendDeleteConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendDeleteConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendDeleteConsumerGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendDeleteConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - ListRequest
type BFrontendListConsumerGroupsArgs struct {
	ListRequest *ListConsumerGroupRequest `thrift:"listRequest,1" json:"listRequest"`
}

func NewBFrontendListConsumerGroupsArgs() *BFrontendListConsumerGroupsArgs {
	return &BFrontendListConsumerGroupsArgs{}
}

var BFrontendListConsumerGroupsArgs_ListRequest_DEFAULT *ListConsumerGroupRequest

func (p *BFrontendListConsumerGroupsArgs) GetListRequest() *ListConsumerGroupRequest {
	if !p.IsSetListRequest() {
		return BFrontendListConsumerGroupsArgs_ListRequest_DEFAULT
	}
	return p.ListRequest
}
func (p *BFrontendListConsumerGroupsArgs) IsSetListRequest() bool {
	return p.ListRequest != nil
}

func (p *BFrontendListConsumerGroupsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendListConsumerGroupsArgs) readField1(iprot thrift.TProtocol) error {
	p.ListRequest = &ListConsumerGroupRequest{}
	if err := p.ListRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ListRequest), err)
	}
	return nil
}

func (p *BFrontendListConsumerGroupsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listConsumerGroups_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendListConsumerGroupsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("listRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listRequest: ", p), err)
	}
	if err := p.ListRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ListRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listRequest: ", p), err)
	}
	return err
}

func (p *BFrontendListConsumerGroupsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendListConsumerGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
type BFrontendListConsumerGroupsResult struct {
	Success      *ListConsumerGroupResult_ `thrift:"success,0" json:"success,omitempty"`
	RequestError *BadRequestError          `thrift:"requestError,1" json:"requestError,omitempty"`
}

func NewBFrontendListConsumerGroupsResult() *BFrontendListConsumerGroupsResult {
	return &BFrontendListConsumerGroupsResult{}
}

var BFrontendListConsumerGroupsResult_Success_DEFAULT *ListConsumerGroupResult_

func (p *BFrontendListConsumerGroupsResult) GetSuccess() *ListConsumerGroupResult_ {
	if !p.IsSetSuccess() {
		return BFrontendListConsumerGroupsResult_Success_DEFAULT
	}
	return p.Success
}

var BFrontendListConsumerGroupsResult_RequestError_DEFAULT *BadRequestError

func (p *BFrontendListConsumerGroupsResult) GetRequestError() *BadRequestError {
	if !p.IsSetRequestError() {
		return BFrontendListConsumerGroupsResult_RequestError_DEFAULT
	}
	return p.RequestError
}
func (p *BFrontendListConsumerGroupsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BFrontendListConsumerGroupsResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BFrontendListConsumerGroupsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendListConsumerGroupsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ListConsumerGroupResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BFrontendListConsumerGroupsResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BFrontendListConsumerGroupsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listConsumerGroups_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendListConsumerGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BFrontendListConsumerGroupsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendListConsumerGroupsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendListConsumerGroupsResult(%+v)", *p)
}

// Attributes:
//  - GetHostsRequest
type BFrontendReadDestinationHostsArgs struct {
	GetHostsRequest *ReadDestinationHostsRequest `thrift:"getHostsRequest,1" json:"getHostsRequest"`
}

func NewBFrontendReadDestinationHostsArgs() *BFrontendReadDestinationHostsArgs {
	return &BFrontendReadDestinationHostsArgs{}
}

var BFrontendReadDestinationHostsArgs_GetHostsRequest_DEFAULT *ReadDestinationHostsRequest

func (p *BFrontendReadDestinationHostsArgs) GetGetHostsRequest() *ReadDestinationHostsRequest {
	if !p.IsSetGetHostsRequest() {
		return BFrontendReadDestinationHostsArgs_GetHostsRequest_DEFAULT
	}
	return p.GetHostsRequest
}
func (p *BFrontendReadDestinationHostsArgs) IsSetGetHostsRequest() bool {
	return p.GetHostsRequest != nil
}

func (p *BFrontendReadDestinationHostsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendReadDestinationHostsArgs) readField1(iprot thrift.TProtocol) error {
	p.GetHostsRequest = &ReadDestinationHostsRequest{}
	if err := p.GetHostsRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetHostsRequest), err)
	}
	return nil
}

func (p *BFrontendReadDestinationHostsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readDestinationHosts_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendReadDestinationHostsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("getHostsRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getHostsRequest: ", p), err)
	}
	if err := p.GetHostsRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetHostsRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getHostsRequest: ", p), err)
	}
	return err
}

func (p *BFrontendReadDestinationHostsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendReadDestinationHostsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - EntityDisabled
//  - RequestError
type BFrontendReadDestinationHostsResult struct {
	Success        *ReadDestinationHostsResult_ `thrift:"success,0" json:"success,omitempty"`
	EntityError    *EntityNotExistsError        `thrift:"entityError,1" json:"entityError,omitempty"`
	EntityDisabled *EntityDisabledError         `thrift:"entityDisabled,2" json:"entityDisabled,omitempty"`
	RequestError   *BadRequestError             `thrift:"requestError,3" json:"requestError,omitempty"`
}

func NewBFrontendReadDestinationHostsResult() *BFrontendReadDestinationHostsResult {
	return &BFrontendReadDestinationHostsResult{}
}

var BFrontendReadDestinationHostsResult_Success_DEFAULT *ReadDestinationHostsResult_

func (p *BFrontendReadDestinationHostsResult) GetSuccess() *ReadDestinationHostsResult_ {
	if !p.IsSetSuccess() {
		return BFrontendReadDestinationHostsResult_Success_DEFAULT
	}
	return p.Success
}

var BFrontendReadDestinationHostsResult_EntityError_DEFAULT *EntityNotExistsError

func (p *BFrontendReadDestinationHostsResult) GetEntityError() *EntityNotExistsError {
	if !p.IsSetEntityError() {
		return BFrontendReadDestinationHostsResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var BFrontendReadDestinationHostsResult_EntityDisabled_DEFAULT *EntityDisabledError

func (p *BFrontendReadDestinationHostsResult) GetEntityDisabled() *EntityDisabledError {
	if !p.IsSetEntityDisabled() {
		return BFrontendReadDestinationHostsResult_EntityDisabled_DEFAULT
	}
	return p.EntityDisabled
}

var BFrontendReadDestinationHostsResult_RequestError_DEFAULT *BadRequestError

func (p *BFrontendReadDestinationHostsResult) GetRequestError() *BadRequestError {
	if !p.IsSetRequestError() {
		return BFrontendReadDestinationHostsResult_RequestError_DEFAULT
	}
	return p.RequestError
}
func (p *BFrontendReadDestinationHostsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BFrontendReadDestinationHostsResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *BFrontendReadDestinationHostsResult) IsSetEntityDisabled() bool {
	return p.EntityDisabled != nil
}

func (p *BFrontendReadDestinationHostsResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BFrontendReadDestinationHostsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendReadDestinationHostsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ReadDestinationHostsResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BFrontendReadDestinationHostsResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *BFrontendReadDestinationHostsResult) readField2(iprot thrift.TProtocol) error {
	p.EntityDisabled = &EntityDisabledError{}
	if err := p.EntityDisabled.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityDisabled), err)
	}
	return nil
}

func (p *BFrontendReadDestinationHostsResult) readField3(iprot thrift.TProtocol) error {
	p.RequestError = &BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BFrontendReadDestinationHostsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readDestinationHosts_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendReadDestinationHostsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BFrontendReadDestinationHostsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendReadDestinationHostsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityDisabled() {
		if err := oprot.WriteFieldBegin("entityDisabled", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entityDisabled: ", p), err)
		}
		if err := p.EntityDisabled.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityDisabled), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entityDisabled: ", p), err)
		}
	}
	return err
}

func (p *BFrontendReadDestinationHostsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:requestError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendReadDestinationHostsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendReadDestinationHostsResult(%+v)", *p)
}

// Attributes:
//  - GetPublisherOptionsRequest
type BFrontendReadPublisherOptionsArgs struct {
	GetPublisherOptionsRequest *ReadPublisherOptionsRequest `thrift:"getPublisherOptionsRequest,1" json:"getPublisherOptionsRequest"`
}

func NewBFrontendReadPublisherOptionsArgs() *BFrontendReadPublisherOptionsArgs {
	return &BFrontendReadPublisherOptionsArgs{}
}

var BFrontendReadPublisherOptionsArgs_GetPublisherOptionsRequest_DEFAULT *ReadPublisherOptionsRequest

func (p *BFrontendReadPublisherOptionsArgs) GetGetPublisherOptionsRequest() *ReadPublisherOptionsRequest {
	if !p.IsSetGetPublisherOptionsRequest() {
		return BFrontendReadPublisherOptionsArgs_GetPublisherOptionsRequest_DEFAULT
	}
	return p.GetPublisherOptionsRequest
}
func (p *BFrontendReadPublisherOptionsArgs) IsSetGetPublisherOptionsRequest() bool {
	return p.GetPublisherOptionsRequest != nil
}

func (p *BFrontendReadPublisherOptionsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendReadPublisherOptionsArgs) readField1(iprot thrift.TProtocol) error {
	p.GetPublisherOptionsRequest = &ReadPublisherOptionsRequest{}
	if err := p.GetPublisherOptionsRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetPublisherOptionsRequest), err)
	}
	return nil
}

func (p *BFrontendReadPublisherOptionsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readPublisherOptions_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendReadPublisherOptionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("getPublisherOptionsRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getPublisherOptionsRequest: ", p), err)
	}
	if err := p.GetPublisherOptionsRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetPublisherOptionsRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getPublisherOptionsRequest: ", p), err)
	}
	return err
}

func (p *BFrontendReadPublisherOptionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendReadPublisherOptionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - EntityDisabled
//  - RequestError
type BFrontendReadPublisherOptionsResult struct {
	Success        *ReadPublisherOptionsResult_ `thrift:"success,0" json:"success,omitempty"`
	EntityError    *EntityNotExistsError        `thrift:"entityError,1" json:"entityError,omitempty"`
	EntityDisabled *EntityDisabledError         `thrift:"entityDisabled,2" json:"entityDisabled,omitempty"`
	RequestError   *BadRequestError             `thrift:"requestError,3" json:"requestError,omitempty"`
}

func NewBFrontendReadPublisherOptionsResult() *BFrontendReadPublisherOptionsResult {
	return &BFrontendReadPublisherOptionsResult{}
}

var BFrontendReadPublisherOptionsResult_Success_DEFAULT *ReadPublisherOptionsResult_

func (p *BFrontendReadPublisherOptionsResult) GetSuccess() *ReadPublisherOptionsResult_ {
	if !p.IsSetSuccess() {
		return BFrontendReadPublisherOptionsResult_Success_DEFAULT
	}
	return p.Success
}

var BFrontendReadPublisherOptionsResult_EntityError_DEFAULT *EntityNotExistsError

func (p *BFrontendReadPublisherOptionsResult) GetEntityError() *EntityNotExistsError {
	if !p.IsSetEntityError() {
		return BFrontendReadPublisherOptionsResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var BFrontendReadPublisherOptionsResult_EntityDisabled_DEFAULT *EntityDisabledError

func (p *BFrontendReadPublisherOptionsResult) GetEntityDisabled() *EntityDisabledError {
	if !p.IsSetEntityDisabled() {
		return BFrontendReadPublisherOptionsResult_EntityDisabled_DEFAULT
	}
	return p.EntityDisabled
}

var BFrontendReadPublisherOptionsResult_RequestError_DEFAULT *BadRequestError

func (p *BFrontendReadPublisherOptionsResult) GetRequestError() *BadRequestError {
	if !p.IsSetRequestError() {
		return BFrontendReadPublisherOptionsResult_RequestError_DEFAULT
	}
	return p.RequestError
}
func (p *BFrontendReadPublisherOptionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BFrontendReadPublisherOptionsResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *BFrontendReadPublisherOptionsResult) IsSetEntityDisabled() bool {
	return p.EntityDisabled != nil
}

func (p *BFrontendReadPublisherOptionsResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BFrontendReadPublisherOptionsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendReadPublisherOptionsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ReadPublisherOptionsResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BFrontendReadPublisherOptionsResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *BFrontendReadPublisherOptionsResult) readField2(iprot thrift.TProtocol) error {
	p.EntityDisabled = &EntityDisabledError{}
	if err := p.EntityDisabled.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityDisabled), err)
	}
	return nil
}

func (p *BFrontendReadPublisherOptionsResult) readField3(iprot thrift.TProtocol) error {
	p.RequestError = &BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BFrontendReadPublisherOptionsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readPublisherOptions_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendReadPublisherOptionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BFrontendReadPublisherOptionsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendReadPublisherOptionsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityDisabled() {
		if err := oprot.WriteFieldBegin("entityDisabled", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entityDisabled: ", p), err)
		}
		if err := p.EntityDisabled.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityDisabled), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entityDisabled: ", p), err)
		}
	}
	return err
}

func (p *BFrontendReadPublisherOptionsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:requestError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendReadPublisherOptionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendReadPublisherOptionsResult(%+v)", *p)
}

// Attributes:
//  - GetHostsRequest
type BFrontendReadConsumerGroupHostsArgs struct {
	GetHostsRequest *ReadConsumerGroupHostsRequest `thrift:"getHostsRequest,1" json:"getHostsRequest"`
}

func NewBFrontendReadConsumerGroupHostsArgs() *BFrontendReadConsumerGroupHostsArgs {
	return &BFrontendReadConsumerGroupHostsArgs{}
}

var BFrontendReadConsumerGroupHostsArgs_GetHostsRequest_DEFAULT *ReadConsumerGroupHostsRequest

func (p *BFrontendReadConsumerGroupHostsArgs) GetGetHostsRequest() *ReadConsumerGroupHostsRequest {
	if !p.IsSetGetHostsRequest() {
		return BFrontendReadConsumerGroupHostsArgs_GetHostsRequest_DEFAULT
	}
	return p.GetHostsRequest
}
func (p *BFrontendReadConsumerGroupHostsArgs) IsSetGetHostsRequest() bool {
	return p.GetHostsRequest != nil
}

func (p *BFrontendReadConsumerGroupHostsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendReadConsumerGroupHostsArgs) readField1(iprot thrift.TProtocol) error {
	p.GetHostsRequest = &ReadConsumerGroupHostsRequest{}
	if err := p.GetHostsRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetHostsRequest), err)
	}
	return nil
}

func (p *BFrontendReadConsumerGroupHostsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readConsumerGroupHosts_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendReadConsumerGroupHostsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("getHostsRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getHostsRequest: ", p), err)
	}
	if err := p.GetHostsRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetHostsRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getHostsRequest: ", p), err)
	}
	return err
}

func (p *BFrontendReadConsumerGroupHostsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendReadConsumerGroupHostsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - EntityDisabled
//  - RequestError
type BFrontendReadConsumerGroupHostsResult struct {
	Success        *ReadConsumerGroupHostsResult_ `thrift:"success,0" json:"success,omitempty"`
	EntityError    *EntityNotExistsError          `thrift:"entityError,1" json:"entityError,omitempty"`
	EntityDisabled *EntityDisabledError           `thrift:"entityDisabled,2" json:"entityDisabled,omitempty"`
	RequestError   *BadRequestError               `thrift:"requestError,3" json:"requestError,omitempty"`
}

func NewBFrontendReadConsumerGroupHostsResult() *BFrontendReadConsumerGroupHostsResult {
	return &BFrontendReadConsumerGroupHostsResult{}
}

var BFrontendReadConsumerGroupHostsResult_Success_DEFAULT *ReadConsumerGroupHostsResult_

func (p *BFrontendReadConsumerGroupHostsResult) GetSuccess() *ReadConsumerGroupHostsResult_ {
	if !p.IsSetSuccess() {
		return BFrontendReadConsumerGroupHostsResult_Success_DEFAULT
	}
	return p.Success
}

var BFrontendReadConsumerGroupHostsResult_EntityError_DEFAULT *EntityNotExistsError

func (p *BFrontendReadConsumerGroupHostsResult) GetEntityError() *EntityNotExistsError {
	if !p.IsSetEntityError() {
		return BFrontendReadConsumerGroupHostsResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var BFrontendReadConsumerGroupHostsResult_EntityDisabled_DEFAULT *EntityDisabledError

func (p *BFrontendReadConsumerGroupHostsResult) GetEntityDisabled() *EntityDisabledError {
	if !p.IsSetEntityDisabled() {
		return BFrontendReadConsumerGroupHostsResult_EntityDisabled_DEFAULT
	}
	return p.EntityDisabled
}

var BFrontendReadConsumerGroupHostsResult_RequestError_DEFAULT *BadRequestError

func (p *BFrontendReadConsumerGroupHostsResult) GetRequestError() *BadRequestError {
	if !p.IsSetRequestError() {
		return BFrontendReadConsumerGroupHostsResult_RequestError_DEFAULT
	}
	return p.RequestError
}
func (p *BFrontendReadConsumerGroupHostsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BFrontendReadConsumerGroupHostsResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *BFrontendReadConsumerGroupHostsResult) IsSetEntityDisabled() bool {
	return p.EntityDisabled != nil
}

func (p *BFrontendReadConsumerGroupHostsResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BFrontendReadConsumerGroupHostsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendReadConsumerGroupHostsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ReadConsumerGroupHostsResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BFrontendReadConsumerGroupHostsResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *BFrontendReadConsumerGroupHostsResult) readField2(iprot thrift.TProtocol) error {
	p.EntityDisabled = &EntityDisabledError{}
	if err := p.EntityDisabled.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityDisabled), err)
	}
	return nil
}

func (p *BFrontendReadConsumerGroupHostsResult) readField3(iprot thrift.TProtocol) error {
	p.RequestError = &BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BFrontendReadConsumerGroupHostsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readConsumerGroupHosts_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendReadConsumerGroupHostsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BFrontendReadConsumerGroupHostsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendReadConsumerGroupHostsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityDisabled() {
		if err := oprot.WriteFieldBegin("entityDisabled", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entityDisabled: ", p), err)
		}
		if err := p.EntityDisabled.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityDisabled), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entityDisabled: ", p), err)
		}
	}
	return err
}

func (p *BFrontendReadConsumerGroupHostsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:requestError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendReadConsumerGroupHostsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendReadConsumerGroupHostsResult(%+v)", *p)
}

// Attributes:
//  - PurgeRequest
type BFrontendPurgeDLQForConsumerGroupArgs struct {
	PurgeRequest *PurgeDLQForConsumerGroupRequest `thrift:"purgeRequest,1" json:"purgeRequest"`
}

func NewBFrontendPurgeDLQForConsumerGroupArgs() *BFrontendPurgeDLQForConsumerGroupArgs {
	return &BFrontendPurgeDLQForConsumerGroupArgs{}
}

var BFrontendPurgeDLQForConsumerGroupArgs_PurgeRequest_DEFAULT *PurgeDLQForConsumerGroupRequest

func (p *BFrontendPurgeDLQForConsumerGroupArgs) GetPurgeRequest() *PurgeDLQForConsumerGroupRequest {
	if !p.IsSetPurgeRequest() {
		return BFrontendPurgeDLQForConsumerGroupArgs_PurgeRequest_DEFAULT
	}
	return p.PurgeRequest
}
func (p *BFrontendPurgeDLQForConsumerGroupArgs) IsSetPurgeRequest() bool {
	return p.PurgeRequest != nil
}

func (p *BFrontendPurgeDLQForConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendPurgeDLQForConsumerGroupArgs) readField1(iprot thrift.TProtocol) error {
	p.PurgeRequest = &PurgeDLQForConsumerGroupRequest{}
	if err := p.PurgeRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PurgeRequest), err)
	}
	return nil
}

func (p *BFrontendPurgeDLQForConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("purgeDLQForConsumerGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendPurgeDLQForConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("purgeRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:purgeRequest: ", p), err)
	}
	if err := p.PurgeRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PurgeRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:purgeRequest: ", p), err)
	}
	return err
}

func (p *BFrontendPurgeDLQForConsumerGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendPurgeDLQForConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
type BFrontendPurgeDLQForConsumerGroupResult struct {
	EntityError  *EntityNotExistsError `thrift:"entityError,1" json:"entityError,omitempty"`
	RequestError *BadRequestError      `thrift:"requestError,2" json:"requestError,omitempty"`
}

func NewBFrontendPurgeDLQForConsumerGroupResult() *BFrontendPurgeDLQForConsumerGroupResult {
	return &BFrontendPurgeDLQForConsumerGroupResult{}
}

var BFrontendPurgeDLQForConsumerGroupResult_EntityError_DEFAULT *EntityNotExistsError

func (p *BFrontendPurgeDLQForConsumerGroupResult) GetEntityError() *EntityNotExistsError {
	if !p.IsSetEntityError() {
		return BFrontendPurgeDLQForConsumerGroupResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var BFrontendPurgeDLQForConsumerGroupResult_RequestError_DEFAULT *BadRequestError

func (p *BFrontendPurgeDLQForConsumerGroupResult) GetRequestError() *BadRequestError {
	if !p.IsSetRequestError() {
		return BFrontendPurgeDLQForConsumerGroupResult_RequestError_DEFAULT
	}
	return p.RequestError
}
func (p *BFrontendPurgeDLQForConsumerGroupResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *BFrontendPurgeDLQForConsumerGroupResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BFrontendPurgeDLQForConsumerGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendPurgeDLQForConsumerGroupResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *BFrontendPurgeDLQForConsumerGroupResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BFrontendPurgeDLQForConsumerGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("purgeDLQForConsumerGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendPurgeDLQForConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendPurgeDLQForConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendPurgeDLQForConsumerGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendPurgeDLQForConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - MergeRequest
type BFrontendMergeDLQForConsumerGroupArgs struct {
	MergeRequest *MergeDLQForConsumerGroupRequest `thrift:"mergeRequest,1" json:"mergeRequest"`
}

func NewBFrontendMergeDLQForConsumerGroupArgs() *BFrontendMergeDLQForConsumerGroupArgs {
	return &BFrontendMergeDLQForConsumerGroupArgs{}
}

var BFrontendMergeDLQForConsumerGroupArgs_MergeRequest_DEFAULT *MergeDLQForConsumerGroupRequest

func (p *BFrontendMergeDLQForConsumerGroupArgs) GetMergeRequest() *MergeDLQForConsumerGroupRequest {
	if !p.IsSetMergeRequest() {
		return BFrontendMergeDLQForConsumerGroupArgs_MergeRequest_DEFAULT
	}
	return p.MergeRequest
}
func (p *BFrontendMergeDLQForConsumerGroupArgs) IsSetMergeRequest() bool {
	return p.MergeRequest != nil
}

func (p *BFrontendMergeDLQForConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendMergeDLQForConsumerGroupArgs) readField1(iprot thrift.TProtocol) error {
	p.MergeRequest = &MergeDLQForConsumerGroupRequest{}
	if err := p.MergeRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MergeRequest), err)
	}
	return nil
}

func (p *BFrontendMergeDLQForConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mergeDLQForConsumerGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendMergeDLQForConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mergeRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mergeRequest: ", p), err)
	}
	if err := p.MergeRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MergeRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mergeRequest: ", p), err)
	}
	return err
}

func (p *BFrontendMergeDLQForConsumerGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendMergeDLQForConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
type BFrontendMergeDLQForConsumerGroupResult struct {
	EntityError  *EntityNotExistsError `thrift:"entityError,1" json:"entityError,omitempty"`
	RequestError *BadRequestError      `thrift:"requestError,2" json:"requestError,omitempty"`
}

func NewBFrontendMergeDLQForConsumerGroupResult() *BFrontendMergeDLQForConsumerGroupResult {
	return &BFrontendMergeDLQForConsumerGroupResult{}
}

var BFrontendMergeDLQForConsumerGroupResult_EntityError_DEFAULT *EntityNotExistsError

func (p *BFrontendMergeDLQForConsumerGroupResult) GetEntityError() *EntityNotExistsError {
	if !p.IsSetEntityError() {
		return BFrontendMergeDLQForConsumerGroupResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var BFrontendMergeDLQForConsumerGroupResult_RequestError_DEFAULT *BadRequestError

func (p *BFrontendMergeDLQForConsumerGroupResult) GetRequestError() *BadRequestError {
	if !p.IsSetRequestError() {
		return BFrontendMergeDLQForConsumerGroupResult_RequestError_DEFAULT
	}
	return p.RequestError
}
func (p *BFrontendMergeDLQForConsumerGroupResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *BFrontendMergeDLQForConsumerGroupResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BFrontendMergeDLQForConsumerGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendMergeDLQForConsumerGroupResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *BFrontendMergeDLQForConsumerGroupResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BFrontendMergeDLQForConsumerGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mergeDLQForConsumerGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendMergeDLQForConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendMergeDLQForConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendMergeDLQForConsumerGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendMergeDLQForConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - GetQueueDepthInfoRequest
type BFrontendGetQueueDepthInfoArgs struct {
	GetQueueDepthInfoRequest *GetQueueDepthInfoRequest `thrift:"getQueueDepthInfoRequest,1" json:"getQueueDepthInfoRequest"`
}

func NewBFrontendGetQueueDepthInfoArgs() *BFrontendGetQueueDepthInfoArgs {
	return &BFrontendGetQueueDepthInfoArgs{}
}

var BFrontendGetQueueDepthInfoArgs_GetQueueDepthInfoRequest_DEFAULT *GetQueueDepthInfoRequest

func (p *BFrontendGetQueueDepthInfoArgs) GetGetQueueDepthInfoRequest() *GetQueueDepthInfoRequest {
	if !p.IsSetGetQueueDepthInfoRequest() {
		return BFrontendGetQueueDepthInfoArgs_GetQueueDepthInfoRequest_DEFAULT
	}
	return p.GetQueueDepthInfoRequest
}
func (p *BFrontendGetQueueDepthInfoArgs) IsSetGetQueueDepthInfoRequest() bool {
	return p.GetQueueDepthInfoRequest != nil
}

func (p *BFrontendGetQueueDepthInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendGetQueueDepthInfoArgs) readField1(iprot thrift.TProtocol) error {
	p.GetQueueDepthInfoRequest = &GetQueueDepthInfoRequest{}
	if err := p.GetQueueDepthInfoRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetQueueDepthInfoRequest), err)
	}
	return nil
}

func (p *BFrontendGetQueueDepthInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getQueueDepthInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendGetQueueDepthInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("getQueueDepthInfoRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getQueueDepthInfoRequest: ", p), err)
	}
	if err := p.GetQueueDepthInfoRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetQueueDepthInfoRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getQueueDepthInfoRequest: ", p), err)
	}
	return err
}

func (p *BFrontendGetQueueDepthInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendGetQueueDepthInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - CacheMissError
//  - RequestError
type BFrontendGetQueueDepthInfoResult struct {
	Success        *GetQueueDepthInfoResult_ `thrift:"success,0" json:"success,omitempty"`
	CacheMissError *QueueCacheMissError      `thrift:"cacheMissError,1" json:"cacheMissError,omitempty"`
	RequestError   *BadRequestError          `thrift:"requestError,2" json:"requestError,omitempty"`
}

func NewBFrontendGetQueueDepthInfoResult() *BFrontendGetQueueDepthInfoResult {
	return &BFrontendGetQueueDepthInfoResult{}
}

var BFrontendGetQueueDepthInfoResult_Success_DEFAULT *GetQueueDepthInfoResult_

func (p *BFrontendGetQueueDepthInfoResult) GetSuccess() *GetQueueDepthInfoResult_ {
	if !p.IsSetSuccess() {
		return BFrontendGetQueueDepthInfoResult_Success_DEFAULT
	}
	return p.Success
}

var BFrontendGetQueueDepthInfoResult_CacheMissError_DEFAULT *QueueCacheMissError

func (p *BFrontendGetQueueDepthInfoResult) GetCacheMissError() *QueueCacheMissError {
	if !p.IsSetCacheMissError() {
		return BFrontendGetQueueDepthInfoResult_CacheMissError_DEFAULT
	}
	return p.CacheMissError
}

var BFrontendGetQueueDepthInfoResult_RequestError_DEFAULT *BadRequestError

func (p *BFrontendGetQueueDepthInfoResult) GetRequestError() *BadRequestError {
	if !p.IsSetRequestError() {
		return BFrontendGetQueueDepthInfoResult_RequestError_DEFAULT
	}
	return p.RequestError
}
func (p *BFrontendGetQueueDepthInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BFrontendGetQueueDepthInfoResult) IsSetCacheMissError() bool {
	return p.CacheMissError != nil
}

func (p *BFrontendGetQueueDepthInfoResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BFrontendGetQueueDepthInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BFrontendGetQueueDepthInfoResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &GetQueueDepthInfoResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BFrontendGetQueueDepthInfoResult) readField1(iprot thrift.TProtocol) error {
	p.CacheMissError = &QueueCacheMissError{}
	if err := p.CacheMissError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CacheMissError), err)
	}
	return nil
}

func (p *BFrontendGetQueueDepthInfoResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BFrontendGetQueueDepthInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getQueueDepthInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BFrontendGetQueueDepthInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BFrontendGetQueueDepthInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCacheMissError() {
		if err := oprot.WriteFieldBegin("cacheMissError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cacheMissError: ", p), err)
		}
		if err := p.CacheMissError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CacheMissError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cacheMissError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendGetQueueDepthInfoResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *BFrontendGetQueueDepthInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BFrontendGetQueueDepthInfoResult(%+v)", *p)
}
