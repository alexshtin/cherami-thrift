// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package cherami

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type Protocol int64

const (
	Protocol_TCHANNEL Protocol = 0
	Protocol_WS       Protocol = 1
	Protocol_WSS      Protocol = 2
)

func (p Protocol) String() string {
	switch p {
	case Protocol_TCHANNEL:
		return "TCHANNEL"
	case Protocol_WS:
		return "WS"
	case Protocol_WSS:
		return "WSS"
	}
	return "<UNSET>"
}

func ProtocolFromString(s string) (Protocol, error) {
	switch s {
	case "TCHANNEL":
		return Protocol_TCHANNEL, nil
	case "WS":
		return Protocol_WS, nil
	case "WSS":
		return Protocol_WSS, nil
	}
	return Protocol(0), fmt.Errorf("not a valid Protocol string")
}

func ProtocolPtr(v Protocol) *Protocol { return &v }

func (p Protocol) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Protocol) UnmarshalText(text []byte) error {
	q, err := ProtocolFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type DestinationStatus int64

const (
	DestinationStatus_ENABLED     DestinationStatus = 0
	DestinationStatus_DISABLED    DestinationStatus = 1
	DestinationStatus_SENDONLY    DestinationStatus = 2
	DestinationStatus_RECEIVEONLY DestinationStatus = 3
)

func (p DestinationStatus) String() string {
	switch p {
	case DestinationStatus_ENABLED:
		return "ENABLED"
	case DestinationStatus_DISABLED:
		return "DISABLED"
	case DestinationStatus_SENDONLY:
		return "SENDONLY"
	case DestinationStatus_RECEIVEONLY:
		return "RECEIVEONLY"
	}
	return "<UNSET>"
}

func DestinationStatusFromString(s string) (DestinationStatus, error) {
	switch s {
	case "ENABLED":
		return DestinationStatus_ENABLED, nil
	case "DISABLED":
		return DestinationStatus_DISABLED, nil
	case "SENDONLY":
		return DestinationStatus_SENDONLY, nil
	case "RECEIVEONLY":
		return DestinationStatus_RECEIVEONLY, nil
	}
	return DestinationStatus(0), fmt.Errorf("not a valid DestinationStatus string")
}

func DestinationStatusPtr(v DestinationStatus) *DestinationStatus { return &v }

func (p DestinationStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *DestinationStatus) UnmarshalText(text []byte) error {
	q, err := DestinationStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ConsumerGroupStatus int64

const (
	ConsumerGroupStatus_ENABLED  ConsumerGroupStatus = 0
	ConsumerGroupStatus_DISABLED ConsumerGroupStatus = 1
)

func (p ConsumerGroupStatus) String() string {
	switch p {
	case ConsumerGroupStatus_ENABLED:
		return "ENABLED"
	case ConsumerGroupStatus_DISABLED:
		return "DISABLED"
	}
	return "<UNSET>"
}

func ConsumerGroupStatusFromString(s string) (ConsumerGroupStatus, error) {
	switch s {
	case "ENABLED":
		return ConsumerGroupStatus_ENABLED, nil
	case "DISABLED":
		return ConsumerGroupStatus_DISABLED, nil
	}
	return ConsumerGroupStatus(0), fmt.Errorf("not a valid ConsumerGroupStatus string")
}

func ConsumerGroupStatusPtr(v ConsumerGroupStatus) *ConsumerGroupStatus { return &v }

func (p ConsumerGroupStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ConsumerGroupStatus) UnmarshalText(text []byte) error {
	q, err := ConsumerGroupStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// * We support 2 type of Destinations, backed up by their own BStore implementations.
// * DestinationType needs to be specified at the time of creation and is immutable.
//*
type DestinationType int64

const (
	DestinationType_PLAIN DestinationType = 0
	DestinationType_TIMER DestinationType = 1
	DestinationType_LOG   DestinationType = 2
)

func (p DestinationType) String() string {
	switch p {
	case DestinationType_PLAIN:
		return "PLAIN"
	case DestinationType_TIMER:
		return "TIMER"
	case DestinationType_LOG:
		return "LOG"
	}
	return "<UNSET>"
}

func DestinationTypeFromString(s string) (DestinationType, error) {
	switch s {
	case "PLAIN":
		return DestinationType_PLAIN, nil
	case "TIMER":
		return DestinationType_TIMER, nil
	case "LOG":
		return DestinationType_LOG, nil
	}
	return DestinationType(0), fmt.Errorf("not a valid DestinationType string")
}

func DestinationTypePtr(v DestinationType) *DestinationType { return &v }

func (p DestinationType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *DestinationType) UnmarshalText(text []byte) error {
	q, err := DestinationTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ConsumerGroupType int64

const (
	ConsumerGroupType_COMPETING ConsumerGroupType = 0
	ConsumerGroupType_STREAMING ConsumerGroupType = 1
)

func (p ConsumerGroupType) String() string {
	switch p {
	case ConsumerGroupType_COMPETING:
		return "COMPETING"
	case ConsumerGroupType_STREAMING:
		return "STREAMING"
	}
	return "<UNSET>"
}

func ConsumerGroupTypeFromString(s string) (ConsumerGroupType, error) {
	switch s {
	case "COMPETING":
		return ConsumerGroupType_COMPETING, nil
	case "STREAMING":
		return ConsumerGroupType_STREAMING, nil
	}
	return ConsumerGroupType(0), fmt.Errorf("not a valid ConsumerGroupType string")
}

func ConsumerGroupTypePtr(v ConsumerGroupType) *ConsumerGroupType { return &v }

func (p ConsumerGroupType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ConsumerGroupType) UnmarshalText(text []byte) error {
	q, err := ConsumerGroupTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ChecksumOption int64

const (
	ChecksumOption_CRC32IEEE ChecksumOption = 0
	ChecksumOption_MD5       ChecksumOption = 1
)

func (p ChecksumOption) String() string {
	switch p {
	case ChecksumOption_CRC32IEEE:
		return "CRC32IEEE"
	case ChecksumOption_MD5:
		return "MD5"
	}
	return "<UNSET>"
}

func ChecksumOptionFromString(s string) (ChecksumOption, error) {
	switch s {
	case "CRC32IEEE":
		return ChecksumOption_CRC32IEEE, nil
	case "MD5":
		return ChecksumOption_MD5, nil
	}
	return ChecksumOption(0), fmt.Errorf("not a valid ChecksumOption string")
}

func ChecksumOptionPtr(v ChecksumOption) *ChecksumOption { return &v }

func (p ChecksumOption) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ChecksumOption) UnmarshalText(text []byte) error {
	q, err := ChecksumOptionFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type Status int64

const (
	Status_OK        Status = 0
	Status_FAILED    Status = 1
	Status_TIMEDOUT  Status = 2
	Status_THROTTLED Status = 3
)

func (p Status) String() string {
	switch p {
	case Status_OK:
		return "OK"
	case Status_FAILED:
		return "FAILED"
	case Status_TIMEDOUT:
		return "TIMEDOUT"
	case Status_THROTTLED:
		return "THROTTLED"
	}
	return "<UNSET>"
}

func StatusFromString(s string) (Status, error) {
	switch s {
	case "OK":
		return Status_OK, nil
	case "FAILED":
		return Status_FAILED, nil
	case "TIMEDOUT":
		return Status_TIMEDOUT, nil
	case "THROTTLED":
		return Status_THROTTLED, nil
	}
	return Status(0), fmt.Errorf("not a valid Status string")
}

func StatusPtr(v Status) *Status { return &v }

func (p Status) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Status) UnmarshalText(text []byte) error {
	q, err := StatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type InputHostCommandType int64

const (
	InputHostCommandType_ACK         InputHostCommandType = 0
	InputHostCommandType_RECONFIGURE InputHostCommandType = 1
)

func (p InputHostCommandType) String() string {
	switch p {
	case InputHostCommandType_ACK:
		return "ACK"
	case InputHostCommandType_RECONFIGURE:
		return "RECONFIGURE"
	}
	return "<UNSET>"
}

func InputHostCommandTypeFromString(s string) (InputHostCommandType, error) {
	switch s {
	case "ACK":
		return InputHostCommandType_ACK, nil
	case "RECONFIGURE":
		return InputHostCommandType_RECONFIGURE, nil
	}
	return InputHostCommandType(0), fmt.Errorf("not a valid InputHostCommandType string")
}

func InputHostCommandTypePtr(v InputHostCommandType) *InputHostCommandType { return &v }

func (p InputHostCommandType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *InputHostCommandType) UnmarshalText(text []byte) error {
	q, err := InputHostCommandTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type OutputHostCommandType int64

const (
	OutputHostCommandType_MESSAGE       OutputHostCommandType = 0
	OutputHostCommandType_RECONFIGURE   OutputHostCommandType = 1
	OutputHostCommandType_END_OF_STREAM OutputHostCommandType = 2
)

func (p OutputHostCommandType) String() string {
	switch p {
	case OutputHostCommandType_MESSAGE:
		return "MESSAGE"
	case OutputHostCommandType_RECONFIGURE:
		return "RECONFIGURE"
	case OutputHostCommandType_END_OF_STREAM:
		return "END_OF_STREAM"
	}
	return "<UNSET>"
}

func OutputHostCommandTypeFromString(s string) (OutputHostCommandType, error) {
	switch s {
	case "MESSAGE":
		return OutputHostCommandType_MESSAGE, nil
	case "RECONFIGURE":
		return OutputHostCommandType_RECONFIGURE, nil
	case "END_OF_STREAM":
		return OutputHostCommandType_END_OF_STREAM, nil
	}
	return OutputHostCommandType(0), fmt.Errorf("not a valid OutputHostCommandType string")
}

func OutputHostCommandTypePtr(v OutputHostCommandType) *OutputHostCommandType { return &v }

func (p OutputHostCommandType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *OutputHostCommandType) UnmarshalText(text []byte) error {
	q, err := OutputHostCommandTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Attributes:
//  - Message
type EntityNotExistsError struct {
	Message string `thrift:"message,1,required" json:"message"`
}

func NewEntityNotExistsError() *EntityNotExistsError {
	return &EntityNotExistsError{}
}

func (p *EntityNotExistsError) GetMessage() string {
	return p.Message
}
func (p *EntityNotExistsError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMessage bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetMessage = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMessage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"))
	}
	return nil
}

func (p *EntityNotExistsError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *EntityNotExistsError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EntityNotExistsError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EntityNotExistsError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *EntityNotExistsError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EntityNotExistsError(%+v)", *p)
}

func (p *EntityNotExistsError) Error() string {
	return p.String()
}

// Attributes:
//  - Message
type EntityAlreadyExistsError struct {
	Message string `thrift:"message,1,required" json:"message"`
}

func NewEntityAlreadyExistsError() *EntityAlreadyExistsError {
	return &EntityAlreadyExistsError{}
}

func (p *EntityAlreadyExistsError) GetMessage() string {
	return p.Message
}
func (p *EntityAlreadyExistsError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMessage bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetMessage = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMessage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"))
	}
	return nil
}

func (p *EntityAlreadyExistsError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *EntityAlreadyExistsError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EntityAlreadyExistsError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EntityAlreadyExistsError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *EntityAlreadyExistsError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EntityAlreadyExistsError(%+v)", *p)
}

func (p *EntityAlreadyExistsError) Error() string {
	return p.String()
}

// Attributes:
//  - Message
type EntityDisabledError struct {
	Message string `thrift:"message,1,required" json:"message"`
}

func NewEntityDisabledError() *EntityDisabledError {
	return &EntityDisabledError{}
}

func (p *EntityDisabledError) GetMessage() string {
	return p.Message
}
func (p *EntityDisabledError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMessage bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetMessage = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMessage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"))
	}
	return nil
}

func (p *EntityDisabledError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *EntityDisabledError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EntityDisabledError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EntityDisabledError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *EntityDisabledError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EntityDisabledError(%+v)", *p)
}

func (p *EntityDisabledError) Error() string {
	return p.String()
}

// Attributes:
//  - Message
type BadRequestError struct {
	Message string `thrift:"message,1,required" json:"message"`
}

func NewBadRequestError() *BadRequestError {
	return &BadRequestError{}
}

func (p *BadRequestError) GetMessage() string {
	return p.Message
}
func (p *BadRequestError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMessage bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetMessage = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMessage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"))
	}
	return nil
}

func (p *BadRequestError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *BadRequestError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BadRequestError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BadRequestError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *BadRequestError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BadRequestError(%+v)", *p)
}

func (p *BadRequestError) Error() string {
	return p.String()
}

// Attributes:
//  - Message
type InvalidAddressError struct {
	Message string `thrift:"message,1,required" json:"message"`
}

func NewInvalidAddressError() *InvalidAddressError {
	return &InvalidAddressError{}
}

func (p *InvalidAddressError) GetMessage() string {
	return p.Message
}
func (p *InvalidAddressError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMessage bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetMessage = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMessage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"))
	}
	return nil
}

func (p *InvalidAddressError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *InvalidAddressError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InvalidAddressError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InvalidAddressError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *InvalidAddressError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidAddressError(%+v)", *p)
}

func (p *InvalidAddressError) Error() string {
	return p.String()
}

// Attributes:
//  - Message
type InternalServiceError struct {
	Message string `thrift:"message,1,required" json:"message"`
}

func NewInternalServiceError() *InternalServiceError {
	return &InternalServiceError{}
}

func (p *InternalServiceError) GetMessage() string {
	return p.Message
}
func (p *InternalServiceError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMessage bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetMessage = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMessage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"))
	}
	return nil
}

func (p *InternalServiceError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *InternalServiceError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InternalServiceError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InternalServiceError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *InternalServiceError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InternalServiceError(%+v)", *p)
}

func (p *InternalServiceError) Error() string {
	return p.String()
}

// Attributes:
//  - Message
type TimeoutError struct {
	Message string `thrift:"message,1,required" json:"message"`
}

func NewTimeoutError() *TimeoutError {
	return &TimeoutError{}
}

func (p *TimeoutError) GetMessage() string {
	return p.Message
}
func (p *TimeoutError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMessage bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetMessage = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMessage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"))
	}
	return nil
}

func (p *TimeoutError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *TimeoutError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TimeoutError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeoutError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *TimeoutError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeoutError(%+v)", *p)
}

func (p *TimeoutError) Error() string {
	return p.String()
}

// Attributes:
//  - Message
type QueueCacheMissError struct {
	Message string `thrift:"message,1,required" json:"message"`
}

func NewQueueCacheMissError() *QueueCacheMissError {
	return &QueueCacheMissError{}
}

func (p *QueueCacheMissError) GetMessage() string {
	return p.Message
}
func (p *QueueCacheMissError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMessage bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetMessage = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMessage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"))
	}
	return nil
}

func (p *QueueCacheMissError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *QueueCacheMissError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueueCacheMissError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueueCacheMissError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *QueueCacheMissError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueueCacheMissError(%+v)", *p)
}

func (p *QueueCacheMissError) Error() string {
	return p.String()
}

//  * This describes the entity and associated configuration, used by client application to send messages.
//  *
//  * @param path.  Path which uniquely identifies the destination.
//  * @param type.  Type of destination (PLAIN, TIMER).
//  * @param status.  Status of destination.
//  * @param consumedMessagesRetention.  Time in seconds to keep consumed messages before deleting from storage.
//  * @param unconsumedMessagesRetention.  Time in seconds to keep messages that may not have been consumed, before deleting from storage.
//  * @param createdAt.  Time when destination was created.
// *
//
// Attributes:
//  - Path
//  - Type
//  - Status
//  - ConsumedMessagesRetention
//  - UnconsumedMessagesRetention
//  - DestinationUUID
//  - OwnerEmail
//  - ChecksumOption
//  - IsMultiZone
//  - ZoneConfigs
//  - SchemaInfo
type DestinationDescription struct {
	Path                        *string            `thrift:"path,1" json:"path,omitempty"`
	Type                        *DestinationType   `thrift:"type,2" json:"type,omitempty"`
	Status                      *DestinationStatus `thrift:"status,3" json:"status,omitempty"`
	ConsumedMessagesRetention   *int32             `thrift:"consumedMessagesRetention,4" json:"consumedMessagesRetention,omitempty"`
	UnconsumedMessagesRetention *int32             `thrift:"unconsumedMessagesRetention,5" json:"unconsumedMessagesRetention,omitempty"`
	DestinationUUID             *string            `thrift:"destinationUUID,6" json:"destinationUUID,omitempty"`
	OwnerEmail                  *string            `thrift:"ownerEmail,7" json:"ownerEmail,omitempty"`
	ChecksumOption              ChecksumOption     `thrift:"checksumOption,8" json:"checksumOption,omitempty"`
	// unused field # 9
	IsMultiZone *bool                   `thrift:"isMultiZone,10" json:"isMultiZone,omitempty"`
	ZoneConfigs *DestinationZoneConfigs `thrift:"zoneConfigs,11" json:"zoneConfigs,omitempty"`
	// unused fields # 12 to 19
	SchemaInfo *SchemaInfo `thrift:"schemaInfo,20" json:"schemaInfo,omitempty"`
}

func NewDestinationDescription() *DestinationDescription {
	return &DestinationDescription{
		ChecksumOption: 0,
	}
}

var DestinationDescription_Path_DEFAULT string

func (p *DestinationDescription) GetPath() string {
	if !p.IsSetPath() {
		return DestinationDescription_Path_DEFAULT
	}
	return *p.Path
}

var DestinationDescription_Type_DEFAULT DestinationType

func (p *DestinationDescription) GetType() DestinationType {
	if !p.IsSetType() {
		return DestinationDescription_Type_DEFAULT
	}
	return *p.Type
}

var DestinationDescription_Status_DEFAULT DestinationStatus

func (p *DestinationDescription) GetStatus() DestinationStatus {
	if !p.IsSetStatus() {
		return DestinationDescription_Status_DEFAULT
	}
	return *p.Status
}

var DestinationDescription_ConsumedMessagesRetention_DEFAULT int32

func (p *DestinationDescription) GetConsumedMessagesRetention() int32 {
	if !p.IsSetConsumedMessagesRetention() {
		return DestinationDescription_ConsumedMessagesRetention_DEFAULT
	}
	return *p.ConsumedMessagesRetention
}

var DestinationDescription_UnconsumedMessagesRetention_DEFAULT int32

func (p *DestinationDescription) GetUnconsumedMessagesRetention() int32 {
	if !p.IsSetUnconsumedMessagesRetention() {
		return DestinationDescription_UnconsumedMessagesRetention_DEFAULT
	}
	return *p.UnconsumedMessagesRetention
}

var DestinationDescription_DestinationUUID_DEFAULT string

func (p *DestinationDescription) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return DestinationDescription_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var DestinationDescription_OwnerEmail_DEFAULT string

func (p *DestinationDescription) GetOwnerEmail() string {
	if !p.IsSetOwnerEmail() {
		return DestinationDescription_OwnerEmail_DEFAULT
	}
	return *p.OwnerEmail
}

var DestinationDescription_ChecksumOption_DEFAULT ChecksumOption = 0

func (p *DestinationDescription) GetChecksumOption() ChecksumOption {
	return p.ChecksumOption
}

var DestinationDescription_IsMultiZone_DEFAULT bool

func (p *DestinationDescription) GetIsMultiZone() bool {
	if !p.IsSetIsMultiZone() {
		return DestinationDescription_IsMultiZone_DEFAULT
	}
	return *p.IsMultiZone
}

var DestinationDescription_ZoneConfigs_DEFAULT DestinationZoneConfigs

func (p *DestinationDescription) GetZoneConfigs() DestinationZoneConfigs {
	if !p.IsSetZoneConfigs() {
		return DestinationDescription_ZoneConfigs_DEFAULT
	}
	return *p.ZoneConfigs
}

var DestinationDescription_SchemaInfo_DEFAULT SchemaInfo

func (p *DestinationDescription) GetSchemaInfo() SchemaInfo {
	if !p.IsSetSchemaInfo() {
		return DestinationDescription_SchemaInfo_DEFAULT
	}
	return *p.SchemaInfo
}
func (p *DestinationDescription) IsSetPath() bool {
	return p.Path != nil
}

func (p *DestinationDescription) IsSetType() bool {
	return p.Type != nil
}

func (p *DestinationDescription) IsSetStatus() bool {
	return p.Status != nil
}

func (p *DestinationDescription) IsSetConsumedMessagesRetention() bool {
	return p.ConsumedMessagesRetention != nil
}

func (p *DestinationDescription) IsSetUnconsumedMessagesRetention() bool {
	return p.UnconsumedMessagesRetention != nil
}

func (p *DestinationDescription) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *DestinationDescription) IsSetOwnerEmail() bool {
	return p.OwnerEmail != nil
}

func (p *DestinationDescription) IsSetChecksumOption() bool {
	return p.ChecksumOption != DestinationDescription_ChecksumOption_DEFAULT
}

func (p *DestinationDescription) IsSetIsMultiZone() bool {
	return p.IsMultiZone != nil
}

func (p *DestinationDescription) IsSetZoneConfigs() bool {
	return p.ZoneConfigs != nil
}

func (p *DestinationDescription) IsSetSchemaInfo() bool {
	return p.SchemaInfo != nil
}

func (p *DestinationDescription) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DestinationDescription) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = &v
	}
	return nil
}

func (p *DestinationDescription) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := DestinationType(v)
		p.Type = &temp
	}
	return nil
}

func (p *DestinationDescription) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := DestinationStatus(v)
		p.Status = &temp
	}
	return nil
}

func (p *DestinationDescription) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ConsumedMessagesRetention = &v
	}
	return nil
}

func (p *DestinationDescription) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.UnconsumedMessagesRetention = &v
	}
	return nil
}

func (p *DestinationDescription) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *DestinationDescription) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.OwnerEmail = &v
	}
	return nil
}

func (p *DestinationDescription) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := ChecksumOption(v)
		p.ChecksumOption = temp
	}
	return nil
}

func (p *DestinationDescription) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.IsMultiZone = &v
	}
	return nil
}

func (p *DestinationDescription) readField11(iprot thrift.TProtocol) error {
	p.ZoneConfigs = &DestinationZoneConfigs{}
	if err := p.ZoneConfigs.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ZoneConfigs), err)
	}
	return nil
}

func (p *DestinationDescription) readField20(iprot thrift.TProtocol) error {
	p.SchemaInfo = &SchemaInfo{}
	if err := p.SchemaInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaInfo), err)
	}
	return nil
}

func (p *DestinationDescription) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DestinationDescription"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DestinationDescription) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPath() {
		if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Path)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
		}
	}
	return err
}

func (p *DestinationDescription) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
		}
	}
	return err
}

func (p *DestinationDescription) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err)
		}
	}
	return err
}

func (p *DestinationDescription) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumedMessagesRetention() {
		if err := oprot.WriteFieldBegin("consumedMessagesRetention", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:consumedMessagesRetention: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ConsumedMessagesRetention)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumedMessagesRetention (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:consumedMessagesRetention: ", p), err)
		}
	}
	return err
}

func (p *DestinationDescription) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnconsumedMessagesRetention() {
		if err := oprot.WriteFieldBegin("unconsumedMessagesRetention", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:unconsumedMessagesRetention: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.UnconsumedMessagesRetention)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.unconsumedMessagesRetention (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:unconsumedMessagesRetention: ", p), err)
		}
	}
	return err
}

func (p *DestinationDescription) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *DestinationDescription) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetOwnerEmail() {
		if err := oprot.WriteFieldBegin("ownerEmail", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ownerEmail: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OwnerEmail)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ownerEmail (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ownerEmail: ", p), err)
		}
	}
	return err
}

func (p *DestinationDescription) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetChecksumOption() {
		if err := oprot.WriteFieldBegin("checksumOption", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:checksumOption: ", p), err)
		}
		if err := oprot.WriteI32(int32(p.ChecksumOption)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.checksumOption (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:checksumOption: ", p), err)
		}
	}
	return err
}

func (p *DestinationDescription) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsMultiZone() {
		if err := oprot.WriteFieldBegin("isMultiZone", thrift.BOOL, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:isMultiZone: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IsMultiZone)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isMultiZone (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:isMultiZone: ", p), err)
		}
	}
	return err
}

func (p *DestinationDescription) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetZoneConfigs() {
		if err := oprot.WriteFieldBegin("zoneConfigs", thrift.STRUCT, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:zoneConfigs: ", p), err)
		}
		if err := p.ZoneConfigs.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ZoneConfigs), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:zoneConfigs: ", p), err)
		}
	}
	return err
}

func (p *DestinationDescription) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchemaInfo() {
		if err := oprot.WriteFieldBegin("schemaInfo", thrift.STRUCT, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:schemaInfo: ", p), err)
		}
		if err := p.SchemaInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:schemaInfo: ", p), err)
		}
	}
	return err
}

func (p *DestinationDescription) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DestinationDescription(%+v)", *p)
}

// Attributes:
//  - Type
//  - Version
//  - Data
//  - Source
//  - CreatedTimeUtc
type SchemaInfo struct {
	Type           *string `thrift:"type,1" json:"type,omitempty"`
	Version        *int32  `thrift:"version,2" json:"version,omitempty"`
	Data           []byte  `thrift:"data,3" json:"data,omitempty"`
	Source         *string `thrift:"source,4" json:"source,omitempty"`
	CreatedTimeUtc *int64  `thrift:"createdTimeUtc,5" json:"createdTimeUtc,omitempty"`
}

func NewSchemaInfo() *SchemaInfo {
	return &SchemaInfo{}
}

var SchemaInfo_Type_DEFAULT string

func (p *SchemaInfo) GetType() string {
	if !p.IsSetType() {
		return SchemaInfo_Type_DEFAULT
	}
	return *p.Type
}

var SchemaInfo_Version_DEFAULT int32

func (p *SchemaInfo) GetVersion() int32 {
	if !p.IsSetVersion() {
		return SchemaInfo_Version_DEFAULT
	}
	return *p.Version
}

var SchemaInfo_Data_DEFAULT []byte

func (p *SchemaInfo) GetData() []byte {
	return p.Data
}

var SchemaInfo_Source_DEFAULT string

func (p *SchemaInfo) GetSource() string {
	if !p.IsSetSource() {
		return SchemaInfo_Source_DEFAULT
	}
	return *p.Source
}

var SchemaInfo_CreatedTimeUtc_DEFAULT int64

func (p *SchemaInfo) GetCreatedTimeUtc() int64 {
	if !p.IsSetCreatedTimeUtc() {
		return SchemaInfo_CreatedTimeUtc_DEFAULT
	}
	return *p.CreatedTimeUtc
}
func (p *SchemaInfo) IsSetType() bool {
	return p.Type != nil
}

func (p *SchemaInfo) IsSetVersion() bool {
	return p.Version != nil
}

func (p *SchemaInfo) IsSetData() bool {
	return p.Data != nil
}

func (p *SchemaInfo) IsSetSource() bool {
	return p.Source != nil
}

func (p *SchemaInfo) IsSetCreatedTimeUtc() bool {
	return p.CreatedTimeUtc != nil
}

func (p *SchemaInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SchemaInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = &v
	}
	return nil
}

func (p *SchemaInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Version = &v
	}
	return nil
}

func (p *SchemaInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Data = v
	}
	return nil
}

func (p *SchemaInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Source = &v
	}
	return nil
}

func (p *SchemaInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.CreatedTimeUtc = &v
	}
	return nil
}

func (p *SchemaInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SchemaInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SchemaInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
		}
	}
	return err
}

func (p *SchemaInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err := oprot.WriteFieldBegin("version", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:version: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Version)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.version (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:version: ", p), err)
		}
	}
	return err
}

func (p *SchemaInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err := oprot.WriteFieldBegin("data", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err)
		}
		if err := oprot.WriteBinary(p.Data); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.data (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err)
		}
	}
	return err
}

func (p *SchemaInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err := oprot.WriteFieldBegin("source", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:source: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Source)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.source (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:source: ", p), err)
		}
	}
	return err
}

func (p *SchemaInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedTimeUtc() {
		if err := oprot.WriteFieldBegin("createdTimeUtc", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdTimeUtc: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreatedTimeUtc)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.createdTimeUtc (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdTimeUtc: ", p), err)
		}
	}
	return err
}

func (p *SchemaInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SchemaInfo(%+v)", *p)
}

// Attributes:
//  - Zone
//  - AllowPublish
//  - AllowConsume
//  - AlwaysReplicateTo
//  - RemoteExtentReplicaNum
type DestinationZoneConfig struct {
	// unused fields # 1 to 10
	Zone *string `thrift:"zone,11" json:"zone,omitempty"`
	// unused fields # 12 to 19
	AllowPublish *bool `thrift:"allowPublish,20" json:"allowPublish,omitempty"`
	// unused fields # 21 to 29
	AllowConsume *bool `thrift:"allowConsume,30" json:"allowConsume,omitempty"`
	// unused fields # 31 to 39
	AlwaysReplicateTo *bool `thrift:"alwaysReplicateTo,40" json:"alwaysReplicateTo,omitempty"`
	// unused fields # 41 to 49
	RemoteExtentReplicaNum *int32 `thrift:"remoteExtentReplicaNum,50" json:"remoteExtentReplicaNum,omitempty"`
}

func NewDestinationZoneConfig() *DestinationZoneConfig {
	return &DestinationZoneConfig{}
}

var DestinationZoneConfig_Zone_DEFAULT string

func (p *DestinationZoneConfig) GetZone() string {
	if !p.IsSetZone() {
		return DestinationZoneConfig_Zone_DEFAULT
	}
	return *p.Zone
}

var DestinationZoneConfig_AllowPublish_DEFAULT bool

func (p *DestinationZoneConfig) GetAllowPublish() bool {
	if !p.IsSetAllowPublish() {
		return DestinationZoneConfig_AllowPublish_DEFAULT
	}
	return *p.AllowPublish
}

var DestinationZoneConfig_AllowConsume_DEFAULT bool

func (p *DestinationZoneConfig) GetAllowConsume() bool {
	if !p.IsSetAllowConsume() {
		return DestinationZoneConfig_AllowConsume_DEFAULT
	}
	return *p.AllowConsume
}

var DestinationZoneConfig_AlwaysReplicateTo_DEFAULT bool

func (p *DestinationZoneConfig) GetAlwaysReplicateTo() bool {
	if !p.IsSetAlwaysReplicateTo() {
		return DestinationZoneConfig_AlwaysReplicateTo_DEFAULT
	}
	return *p.AlwaysReplicateTo
}

var DestinationZoneConfig_RemoteExtentReplicaNum_DEFAULT int32

func (p *DestinationZoneConfig) GetRemoteExtentReplicaNum() int32 {
	if !p.IsSetRemoteExtentReplicaNum() {
		return DestinationZoneConfig_RemoteExtentReplicaNum_DEFAULT
	}
	return *p.RemoteExtentReplicaNum
}
func (p *DestinationZoneConfig) IsSetZone() bool {
	return p.Zone != nil
}

func (p *DestinationZoneConfig) IsSetAllowPublish() bool {
	return p.AllowPublish != nil
}

func (p *DestinationZoneConfig) IsSetAllowConsume() bool {
	return p.AllowConsume != nil
}

func (p *DestinationZoneConfig) IsSetAlwaysReplicateTo() bool {
	return p.AlwaysReplicateTo != nil
}

func (p *DestinationZoneConfig) IsSetRemoteExtentReplicaNum() bool {
	return p.RemoteExtentReplicaNum != nil
}

func (p *DestinationZoneConfig) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 30:
			if err := p.readField30(iprot); err != nil {
				return err
			}
		case 40:
			if err := p.readField40(iprot); err != nil {
				return err
			}
		case 50:
			if err := p.readField50(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DestinationZoneConfig) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Zone = &v
	}
	return nil
}

func (p *DestinationZoneConfig) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.AllowPublish = &v
	}
	return nil
}

func (p *DestinationZoneConfig) readField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.AllowConsume = &v
	}
	return nil
}

func (p *DestinationZoneConfig) readField40(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 40: ", err)
	} else {
		p.AlwaysReplicateTo = &v
	}
	return nil
}

func (p *DestinationZoneConfig) readField50(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 50: ", err)
	} else {
		p.RemoteExtentReplicaNum = &v
	}
	return nil
}

func (p *DestinationZoneConfig) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DestinationZoneConfig"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField30(oprot); err != nil {
		return err
	}
	if err := p.writeField40(oprot); err != nil {
		return err
	}
	if err := p.writeField50(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DestinationZoneConfig) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetZone() {
		if err := oprot.WriteFieldBegin("zone", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:zone: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Zone)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.zone (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:zone: ", p), err)
		}
	}
	return err
}

func (p *DestinationZoneConfig) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetAllowPublish() {
		if err := oprot.WriteFieldBegin("allowPublish", thrift.BOOL, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:allowPublish: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.AllowPublish)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.allowPublish (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:allowPublish: ", p), err)
		}
	}
	return err
}

func (p *DestinationZoneConfig) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetAllowConsume() {
		if err := oprot.WriteFieldBegin("allowConsume", thrift.BOOL, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:allowConsume: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.AllowConsume)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.allowConsume (30) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:allowConsume: ", p), err)
		}
	}
	return err
}

func (p *DestinationZoneConfig) writeField40(oprot thrift.TProtocol) (err error) {
	if p.IsSetAlwaysReplicateTo() {
		if err := oprot.WriteFieldBegin("alwaysReplicateTo", thrift.BOOL, 40); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:alwaysReplicateTo: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.AlwaysReplicateTo)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.alwaysReplicateTo (40) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 40:alwaysReplicateTo: ", p), err)
		}
	}
	return err
}

func (p *DestinationZoneConfig) writeField50(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemoteExtentReplicaNum() {
		if err := oprot.WriteFieldBegin("remoteExtentReplicaNum", thrift.I32, 50); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:remoteExtentReplicaNum: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.RemoteExtentReplicaNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.remoteExtentReplicaNum (50) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 50:remoteExtentReplicaNum: ", p), err)
		}
	}
	return err
}

func (p *DestinationZoneConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DestinationZoneConfig(%+v)", *p)
}

// Attributes:
//  - Configs
type DestinationZoneConfigs struct {
	// unused fields # 1 to 9
	Configs []*DestinationZoneConfig `thrift:"configs,10" json:"configs,omitempty"`
}

func NewDestinationZoneConfigs() *DestinationZoneConfigs {
	return &DestinationZoneConfigs{}
}

var DestinationZoneConfigs_Configs_DEFAULT []*DestinationZoneConfig

func (p *DestinationZoneConfigs) GetConfigs() []*DestinationZoneConfig {
	return p.Configs
}
func (p *DestinationZoneConfigs) IsSetConfigs() bool {
	return p.Configs != nil
}

func (p *DestinationZoneConfigs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DestinationZoneConfigs) readField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*DestinationZoneConfig, 0, size)
	p.Configs = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &DestinationZoneConfig{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Configs = append(p.Configs, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DestinationZoneConfigs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DestinationZoneConfigs"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DestinationZoneConfigs) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfigs() {
		if err := oprot.WriteFieldBegin("configs", thrift.LIST, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:configs: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Configs)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Configs {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:configs: ", p), err)
		}
	}
	return err
}

func (p *DestinationZoneConfigs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DestinationZoneConfigs(%+v)", *p)
}

// Attributes:
//  - Path
//  - Type
//  - ConsumedMessagesRetention
//  - UnconsumedMessagesRetention
//  - OwnerEmail
//  - ChecksumOption
//  - IsMultiZone
//  - ZoneConfigs
//  - SchemaInfo
type CreateDestinationRequest struct {
	Path                        *string          `thrift:"path,1" json:"path,omitempty"`
	Type                        *DestinationType `thrift:"type,2" json:"type,omitempty"`
	ConsumedMessagesRetention   *int32           `thrift:"consumedMessagesRetention,3" json:"consumedMessagesRetention,omitempty"`
	UnconsumedMessagesRetention *int32           `thrift:"unconsumedMessagesRetention,4" json:"unconsumedMessagesRetention,omitempty"`
	OwnerEmail                  *string          `thrift:"ownerEmail,5" json:"ownerEmail,omitempty"`
	ChecksumOption              ChecksumOption   `thrift:"checksumOption,6" json:"checksumOption,omitempty"`
	// unused fields # 7 to 9
	IsMultiZone *bool                   `thrift:"isMultiZone,10" json:"isMultiZone,omitempty"`
	ZoneConfigs *DestinationZoneConfigs `thrift:"zoneConfigs,11" json:"zoneConfigs,omitempty"`
	// unused fields # 12 to 19
	SchemaInfo *SchemaInfo `thrift:"schemaInfo,20" json:"schemaInfo,omitempty"`
}

func NewCreateDestinationRequest() *CreateDestinationRequest {
	return &CreateDestinationRequest{
		ChecksumOption: 0,
	}
}

var CreateDestinationRequest_Path_DEFAULT string

func (p *CreateDestinationRequest) GetPath() string {
	if !p.IsSetPath() {
		return CreateDestinationRequest_Path_DEFAULT
	}
	return *p.Path
}

var CreateDestinationRequest_Type_DEFAULT DestinationType

func (p *CreateDestinationRequest) GetType() DestinationType {
	if !p.IsSetType() {
		return CreateDestinationRequest_Type_DEFAULT
	}
	return *p.Type
}

var CreateDestinationRequest_ConsumedMessagesRetention_DEFAULT int32

func (p *CreateDestinationRequest) GetConsumedMessagesRetention() int32 {
	if !p.IsSetConsumedMessagesRetention() {
		return CreateDestinationRequest_ConsumedMessagesRetention_DEFAULT
	}
	return *p.ConsumedMessagesRetention
}

var CreateDestinationRequest_UnconsumedMessagesRetention_DEFAULT int32

func (p *CreateDestinationRequest) GetUnconsumedMessagesRetention() int32 {
	if !p.IsSetUnconsumedMessagesRetention() {
		return CreateDestinationRequest_UnconsumedMessagesRetention_DEFAULT
	}
	return *p.UnconsumedMessagesRetention
}

var CreateDestinationRequest_OwnerEmail_DEFAULT string

func (p *CreateDestinationRequest) GetOwnerEmail() string {
	if !p.IsSetOwnerEmail() {
		return CreateDestinationRequest_OwnerEmail_DEFAULT
	}
	return *p.OwnerEmail
}

var CreateDestinationRequest_ChecksumOption_DEFAULT ChecksumOption = 0

func (p *CreateDestinationRequest) GetChecksumOption() ChecksumOption {
	return p.ChecksumOption
}

var CreateDestinationRequest_IsMultiZone_DEFAULT bool

func (p *CreateDestinationRequest) GetIsMultiZone() bool {
	if !p.IsSetIsMultiZone() {
		return CreateDestinationRequest_IsMultiZone_DEFAULT
	}
	return *p.IsMultiZone
}

var CreateDestinationRequest_ZoneConfigs_DEFAULT *DestinationZoneConfigs

func (p *CreateDestinationRequest) GetZoneConfigs() *DestinationZoneConfigs {
	if !p.IsSetZoneConfigs() {
		return CreateDestinationRequest_ZoneConfigs_DEFAULT
	}
	return p.ZoneConfigs
}

var CreateDestinationRequest_SchemaInfo_DEFAULT *SchemaInfo

func (p *CreateDestinationRequest) GetSchemaInfo() *SchemaInfo {
	if !p.IsSetSchemaInfo() {
		return CreateDestinationRequest_SchemaInfo_DEFAULT
	}
	return p.SchemaInfo
}
func (p *CreateDestinationRequest) IsSetPath() bool {
	return p.Path != nil
}

func (p *CreateDestinationRequest) IsSetType() bool {
	return p.Type != nil
}

func (p *CreateDestinationRequest) IsSetConsumedMessagesRetention() bool {
	return p.ConsumedMessagesRetention != nil
}

func (p *CreateDestinationRequest) IsSetUnconsumedMessagesRetention() bool {
	return p.UnconsumedMessagesRetention != nil
}

func (p *CreateDestinationRequest) IsSetOwnerEmail() bool {
	return p.OwnerEmail != nil
}

func (p *CreateDestinationRequest) IsSetChecksumOption() bool {
	return p.ChecksumOption != CreateDestinationRequest_ChecksumOption_DEFAULT
}

func (p *CreateDestinationRequest) IsSetIsMultiZone() bool {
	return p.IsMultiZone != nil
}

func (p *CreateDestinationRequest) IsSetZoneConfigs() bool {
	return p.ZoneConfigs != nil
}

func (p *CreateDestinationRequest) IsSetSchemaInfo() bool {
	return p.SchemaInfo != nil
}

func (p *CreateDestinationRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CreateDestinationRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = &v
	}
	return nil
}

func (p *CreateDestinationRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := DestinationType(v)
		p.Type = &temp
	}
	return nil
}

func (p *CreateDestinationRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ConsumedMessagesRetention = &v
	}
	return nil
}

func (p *CreateDestinationRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.UnconsumedMessagesRetention = &v
	}
	return nil
}

func (p *CreateDestinationRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.OwnerEmail = &v
	}
	return nil
}

func (p *CreateDestinationRequest) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := ChecksumOption(v)
		p.ChecksumOption = temp
	}
	return nil
}

func (p *CreateDestinationRequest) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.IsMultiZone = &v
	}
	return nil
}

func (p *CreateDestinationRequest) readField11(iprot thrift.TProtocol) error {
	p.ZoneConfigs = &DestinationZoneConfigs{}
	if err := p.ZoneConfigs.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ZoneConfigs), err)
	}
	return nil
}

func (p *CreateDestinationRequest) readField20(iprot thrift.TProtocol) error {
	p.SchemaInfo = &SchemaInfo{}
	if err := p.SchemaInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaInfo), err)
	}
	return nil
}

func (p *CreateDestinationRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateDestinationRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CreateDestinationRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPath() {
		if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Path)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
		}
	}
	return err
}

func (p *CreateDestinationRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
		}
	}
	return err
}

func (p *CreateDestinationRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumedMessagesRetention() {
		if err := oprot.WriteFieldBegin("consumedMessagesRetention", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:consumedMessagesRetention: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ConsumedMessagesRetention)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumedMessagesRetention (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:consumedMessagesRetention: ", p), err)
		}
	}
	return err
}

func (p *CreateDestinationRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnconsumedMessagesRetention() {
		if err := oprot.WriteFieldBegin("unconsumedMessagesRetention", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:unconsumedMessagesRetention: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.UnconsumedMessagesRetention)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.unconsumedMessagesRetention (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:unconsumedMessagesRetention: ", p), err)
		}
	}
	return err
}

func (p *CreateDestinationRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOwnerEmail() {
		if err := oprot.WriteFieldBegin("ownerEmail", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ownerEmail: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OwnerEmail)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ownerEmail (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ownerEmail: ", p), err)
		}
	}
	return err
}

func (p *CreateDestinationRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetChecksumOption() {
		if err := oprot.WriteFieldBegin("checksumOption", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:checksumOption: ", p), err)
		}
		if err := oprot.WriteI32(int32(p.ChecksumOption)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.checksumOption (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:checksumOption: ", p), err)
		}
	}
	return err
}

func (p *CreateDestinationRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsMultiZone() {
		if err := oprot.WriteFieldBegin("isMultiZone", thrift.BOOL, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:isMultiZone: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IsMultiZone)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isMultiZone (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:isMultiZone: ", p), err)
		}
	}
	return err
}

func (p *CreateDestinationRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetZoneConfigs() {
		if err := oprot.WriteFieldBegin("zoneConfigs", thrift.STRUCT, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:zoneConfigs: ", p), err)
		}
		if err := p.ZoneConfigs.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ZoneConfigs), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:zoneConfigs: ", p), err)
		}
	}
	return err
}

func (p *CreateDestinationRequest) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchemaInfo() {
		if err := oprot.WriteFieldBegin("schemaInfo", thrift.STRUCT, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:schemaInfo: ", p), err)
		}
		if err := p.SchemaInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:schemaInfo: ", p), err)
		}
	}
	return err
}

func (p *CreateDestinationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateDestinationRequest(%+v)", *p)
}

// Attributes:
//  - Path
type ReadDestinationRequest struct {
	Path *string `thrift:"path,1" json:"path,omitempty"`
}

func NewReadDestinationRequest() *ReadDestinationRequest {
	return &ReadDestinationRequest{}
}

var ReadDestinationRequest_Path_DEFAULT string

func (p *ReadDestinationRequest) GetPath() string {
	if !p.IsSetPath() {
		return ReadDestinationRequest_Path_DEFAULT
	}
	return *p.Path
}
func (p *ReadDestinationRequest) IsSetPath() bool {
	return p.Path != nil
}

func (p *ReadDestinationRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadDestinationRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = &v
	}
	return nil
}

func (p *ReadDestinationRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadDestinationRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadDestinationRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPath() {
		if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Path)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
		}
	}
	return err
}

func (p *ReadDestinationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadDestinationRequest(%+v)", *p)
}

// Attributes:
//  - Path
//  - Status
//  - ConsumedMessagesRetention
//  - UnconsumedMessagesRetention
//  - OwnerEmail
//  - ChecksumOption
//  - SchemaInfo
type UpdateDestinationRequest struct {
	Path                        *string            `thrift:"path,1" json:"path,omitempty"`
	Status                      *DestinationStatus `thrift:"status,2" json:"status,omitempty"`
	ConsumedMessagesRetention   *int32             `thrift:"consumedMessagesRetention,3" json:"consumedMessagesRetention,omitempty"`
	UnconsumedMessagesRetention *int32             `thrift:"unconsumedMessagesRetention,4" json:"unconsumedMessagesRetention,omitempty"`
	OwnerEmail                  *string            `thrift:"ownerEmail,5" json:"ownerEmail,omitempty"`
	ChecksumOption              *ChecksumOption    `thrift:"checksumOption,6" json:"checksumOption,omitempty"`
	// unused fields # 7 to 9
	SchemaInfo *SchemaInfo `thrift:"schemaInfo,10" json:"schemaInfo,omitempty"`
}

func NewUpdateDestinationRequest() *UpdateDestinationRequest {
	return &UpdateDestinationRequest{}
}

var UpdateDestinationRequest_Path_DEFAULT string

func (p *UpdateDestinationRequest) GetPath() string {
	if !p.IsSetPath() {
		return UpdateDestinationRequest_Path_DEFAULT
	}
	return *p.Path
}

var UpdateDestinationRequest_Status_DEFAULT DestinationStatus

func (p *UpdateDestinationRequest) GetStatus() DestinationStatus {
	if !p.IsSetStatus() {
		return UpdateDestinationRequest_Status_DEFAULT
	}
	return *p.Status
}

var UpdateDestinationRequest_ConsumedMessagesRetention_DEFAULT int32

func (p *UpdateDestinationRequest) GetConsumedMessagesRetention() int32 {
	if !p.IsSetConsumedMessagesRetention() {
		return UpdateDestinationRequest_ConsumedMessagesRetention_DEFAULT
	}
	return *p.ConsumedMessagesRetention
}

var UpdateDestinationRequest_UnconsumedMessagesRetention_DEFAULT int32

func (p *UpdateDestinationRequest) GetUnconsumedMessagesRetention() int32 {
	if !p.IsSetUnconsumedMessagesRetention() {
		return UpdateDestinationRequest_UnconsumedMessagesRetention_DEFAULT
	}
	return *p.UnconsumedMessagesRetention
}

var UpdateDestinationRequest_OwnerEmail_DEFAULT string

func (p *UpdateDestinationRequest) GetOwnerEmail() string {
	if !p.IsSetOwnerEmail() {
		return UpdateDestinationRequest_OwnerEmail_DEFAULT
	}
	return *p.OwnerEmail
}

var UpdateDestinationRequest_ChecksumOption_DEFAULT ChecksumOption

func (p *UpdateDestinationRequest) GetChecksumOption() ChecksumOption {
	if !p.IsSetChecksumOption() {
		return UpdateDestinationRequest_ChecksumOption_DEFAULT
	}
	return *p.ChecksumOption
}

var UpdateDestinationRequest_SchemaInfo_DEFAULT *SchemaInfo

func (p *UpdateDestinationRequest) GetSchemaInfo() *SchemaInfo {
	if !p.IsSetSchemaInfo() {
		return UpdateDestinationRequest_SchemaInfo_DEFAULT
	}
	return p.SchemaInfo
}
func (p *UpdateDestinationRequest) IsSetPath() bool {
	return p.Path != nil
}

func (p *UpdateDestinationRequest) IsSetStatus() bool {
	return p.Status != nil
}

func (p *UpdateDestinationRequest) IsSetConsumedMessagesRetention() bool {
	return p.ConsumedMessagesRetention != nil
}

func (p *UpdateDestinationRequest) IsSetUnconsumedMessagesRetention() bool {
	return p.UnconsumedMessagesRetention != nil
}

func (p *UpdateDestinationRequest) IsSetOwnerEmail() bool {
	return p.OwnerEmail != nil
}

func (p *UpdateDestinationRequest) IsSetChecksumOption() bool {
	return p.ChecksumOption != nil
}

func (p *UpdateDestinationRequest) IsSetSchemaInfo() bool {
	return p.SchemaInfo != nil
}

func (p *UpdateDestinationRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateDestinationRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = &v
	}
	return nil
}

func (p *UpdateDestinationRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := DestinationStatus(v)
		p.Status = &temp
	}
	return nil
}

func (p *UpdateDestinationRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ConsumedMessagesRetention = &v
	}
	return nil
}

func (p *UpdateDestinationRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.UnconsumedMessagesRetention = &v
	}
	return nil
}

func (p *UpdateDestinationRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.OwnerEmail = &v
	}
	return nil
}

func (p *UpdateDestinationRequest) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := ChecksumOption(v)
		p.ChecksumOption = &temp
	}
	return nil
}

func (p *UpdateDestinationRequest) readField10(iprot thrift.TProtocol) error {
	p.SchemaInfo = &SchemaInfo{}
	if err := p.SchemaInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaInfo), err)
	}
	return nil
}

func (p *UpdateDestinationRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateDestinationRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateDestinationRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPath() {
		if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Path)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
		}
	}
	return err
}

func (p *UpdateDestinationRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err)
		}
	}
	return err
}

func (p *UpdateDestinationRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumedMessagesRetention() {
		if err := oprot.WriteFieldBegin("consumedMessagesRetention", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:consumedMessagesRetention: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ConsumedMessagesRetention)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumedMessagesRetention (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:consumedMessagesRetention: ", p), err)
		}
	}
	return err
}

func (p *UpdateDestinationRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnconsumedMessagesRetention() {
		if err := oprot.WriteFieldBegin("unconsumedMessagesRetention", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:unconsumedMessagesRetention: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.UnconsumedMessagesRetention)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.unconsumedMessagesRetention (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:unconsumedMessagesRetention: ", p), err)
		}
	}
	return err
}

func (p *UpdateDestinationRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOwnerEmail() {
		if err := oprot.WriteFieldBegin("ownerEmail", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ownerEmail: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OwnerEmail)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ownerEmail (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ownerEmail: ", p), err)
		}
	}
	return err
}

func (p *UpdateDestinationRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetChecksumOption() {
		if err := oprot.WriteFieldBegin("checksumOption", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:checksumOption: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ChecksumOption)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.checksumOption (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:checksumOption: ", p), err)
		}
	}
	return err
}

func (p *UpdateDestinationRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchemaInfo() {
		if err := oprot.WriteFieldBegin("schemaInfo", thrift.STRUCT, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:schemaInfo: ", p), err)
		}
		if err := p.SchemaInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:schemaInfo: ", p), err)
		}
	}
	return err
}

func (p *UpdateDestinationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateDestinationRequest(%+v)", *p)
}

// Attributes:
//  - Path
type DeleteDestinationRequest struct {
	Path *string `thrift:"path,1" json:"path,omitempty"`
}

func NewDeleteDestinationRequest() *DeleteDestinationRequest {
	return &DeleteDestinationRequest{}
}

var DeleteDestinationRequest_Path_DEFAULT string

func (p *DeleteDestinationRequest) GetPath() string {
	if !p.IsSetPath() {
		return DeleteDestinationRequest_Path_DEFAULT
	}
	return *p.Path
}
func (p *DeleteDestinationRequest) IsSetPath() bool {
	return p.Path != nil
}

func (p *DeleteDestinationRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DeleteDestinationRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = &v
	}
	return nil
}

func (p *DeleteDestinationRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteDestinationRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DeleteDestinationRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPath() {
		if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Path)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
		}
	}
	return err
}

func (p *DeleteDestinationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteDestinationRequest(%+v)", *p)
}

// Attributes:
//  - Prefix
//  - PageToken
//  - Limit
type ListDestinationsRequest struct {
	Prefix    *string `thrift:"prefix,1" json:"prefix,omitempty"`
	PageToken []byte  `thrift:"pageToken,2" json:"pageToken,omitempty"`
	Limit     *int64  `thrift:"limit,3" json:"limit,omitempty"`
}

func NewListDestinationsRequest() *ListDestinationsRequest {
	return &ListDestinationsRequest{}
}

var ListDestinationsRequest_Prefix_DEFAULT string

func (p *ListDestinationsRequest) GetPrefix() string {
	if !p.IsSetPrefix() {
		return ListDestinationsRequest_Prefix_DEFAULT
	}
	return *p.Prefix
}

var ListDestinationsRequest_PageToken_DEFAULT []byte

func (p *ListDestinationsRequest) GetPageToken() []byte {
	return p.PageToken
}

var ListDestinationsRequest_Limit_DEFAULT int64

func (p *ListDestinationsRequest) GetLimit() int64 {
	if !p.IsSetLimit() {
		return ListDestinationsRequest_Limit_DEFAULT
	}
	return *p.Limit
}
func (p *ListDestinationsRequest) IsSetPrefix() bool {
	return p.Prefix != nil
}

func (p *ListDestinationsRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListDestinationsRequest) IsSetLimit() bool {
	return p.Limit != nil
}

func (p *ListDestinationsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListDestinationsRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Prefix = &v
	}
	return nil
}

func (p *ListDestinationsRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PageToken = v
	}
	return nil
}

func (p *ListDestinationsRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Limit = &v
	}
	return nil
}

func (p *ListDestinationsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListDestinationsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListDestinationsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrefix() {
		if err := oprot.WriteFieldBegin("prefix", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:prefix: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Prefix)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.prefix (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:prefix: ", p), err)
		}
	}
	return err
}

func (p *ListDestinationsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err := oprot.WriteFieldBegin("pageToken", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pageToken: ", p), err)
		}
		if err := oprot.WriteBinary(p.PageToken); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pageToken (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pageToken: ", p), err)
		}
	}
	return err
}

func (p *ListDestinationsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err := oprot.WriteFieldBegin("limit", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limit: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Limit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.limit (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limit: ", p), err)
		}
	}
	return err
}

func (p *ListDestinationsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListDestinationsRequest(%+v)", *p)
}

// Attributes:
//  - Destinations
//  - NextPageToken
type ListDestinationsResult_ struct {
	Destinations  []*DestinationDescription `thrift:"destinations,1" json:"destinations,omitempty"`
	NextPageToken []byte                    `thrift:"nextPageToken,2" json:"nextPageToken,omitempty"`
}

func NewListDestinationsResult_() *ListDestinationsResult_ {
	return &ListDestinationsResult_{}
}

var ListDestinationsResult__Destinations_DEFAULT []*DestinationDescription

func (p *ListDestinationsResult_) GetDestinations() []*DestinationDescription {
	return p.Destinations
}

var ListDestinationsResult__NextPageToken_DEFAULT []byte

func (p *ListDestinationsResult_) GetNextPageToken() []byte {
	return p.NextPageToken
}
func (p *ListDestinationsResult_) IsSetDestinations() bool {
	return p.Destinations != nil
}

func (p *ListDestinationsResult_) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListDestinationsResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListDestinationsResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*DestinationDescription, 0, size)
	p.Destinations = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &DestinationDescription{
			ChecksumOption: 0,
		}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.Destinations = append(p.Destinations, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ListDestinationsResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NextPageToken = v
	}
	return nil
}

func (p *ListDestinationsResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListDestinationsResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListDestinationsResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinations() {
		if err := oprot.WriteFieldBegin("destinations", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinations: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Destinations)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Destinations {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinations: ", p), err)
		}
	}
	return err
}

func (p *ListDestinationsResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err := oprot.WriteFieldBegin("nextPageToken", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nextPageToken: ", p), err)
		}
		if err := oprot.WriteBinary(p.NextPageToken); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nextPageToken (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nextPageToken: ", p), err)
		}
	}
	return err
}

func (p *ListDestinationsResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListDestinationsResult_(%+v)", *p)
}

// This describes the entity and associated configuration, used by client application to consume messages from
// a destination.
//
// @param destinationPath.  Path which uniquely identifies the destination.
// @param consumerGroupName.  Unique identifier for each group of consumers.
// @param startFrom.  Timestamp used to start consuming messages from destination.  This needs to be provided during
// registration of the ConsumerGroup and cannot be updated later.
// @param lockTimeoutInSeconds.  Seconds to wait before redelivering message to another consumer.
// @param maxDeliveryCount.  Number of times trying to deliver the message without Ack before giving up and moving the
// message to DLQ.
// @param skipOlderMessagesInSeconds.  This is useful for consumers who always wants to keep up and don't care about
// backlog older than certain duration.
// @param createdAt.  Time when ConsumerGroup was registered.
//
//
// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
//  - StartFrom
//  - Status
//  - LockTimeoutInSeconds
//  - MaxDeliveryCount
//  - SkipOlderMessagesInSeconds
//  - DeadLetterQueueDestinationUUID
//  - DestinationUUID
//  - ConsumerGroupUUID
//  - OwnerEmail
//  - ConsumerGroupType
//  - IsMultiZone
//  - ZoneConfigs
type ConsumerGroupDescription struct {
	DestinationPath                *string              `thrift:"destinationPath,1" json:"destinationPath,omitempty"`
	ConsumerGroupName              *string              `thrift:"consumerGroupName,2" json:"consumerGroupName,omitempty"`
	StartFrom                      *int64               `thrift:"startFrom,3" json:"startFrom,omitempty"`
	Status                         *ConsumerGroupStatus `thrift:"status,4" json:"status,omitempty"`
	LockTimeoutInSeconds           *int32               `thrift:"lockTimeoutInSeconds,5" json:"lockTimeoutInSeconds,omitempty"`
	MaxDeliveryCount               *int32               `thrift:"maxDeliveryCount,6" json:"maxDeliveryCount,omitempty"`
	SkipOlderMessagesInSeconds     *int32               `thrift:"skipOlderMessagesInSeconds,7" json:"skipOlderMessagesInSeconds,omitempty"`
	DeadLetterQueueDestinationUUID *string              `thrift:"deadLetterQueueDestinationUUID,8" json:"deadLetterQueueDestinationUUID,omitempty"`
	DestinationUUID                *string              `thrift:"destinationUUID,9" json:"destinationUUID,omitempty"`
	ConsumerGroupUUID              *string              `thrift:"consumerGroupUUID,10" json:"consumerGroupUUID,omitempty"`
	OwnerEmail                     *string              `thrift:"ownerEmail,11" json:"ownerEmail,omitempty"`
	ConsumerGroupType              *ConsumerGroupType   `thrift:"consumerGroupType,12" json:"consumerGroupType,omitempty"`
	// unused fields # 13 to 19
	IsMultiZone *bool                     `thrift:"isMultiZone,20" json:"isMultiZone,omitempty"`
	ZoneConfigs *ConsumerGroupZoneConfigs `thrift:"zoneConfigs,21" json:"zoneConfigs,omitempty"`
}

func NewConsumerGroupDescription() *ConsumerGroupDescription {
	return &ConsumerGroupDescription{}
}

var ConsumerGroupDescription_DestinationPath_DEFAULT string

func (p *ConsumerGroupDescription) GetDestinationPath() string {
	if !p.IsSetDestinationPath() {
		return ConsumerGroupDescription_DestinationPath_DEFAULT
	}
	return *p.DestinationPath
}

var ConsumerGroupDescription_ConsumerGroupName_DEFAULT string

func (p *ConsumerGroupDescription) GetConsumerGroupName() string {
	if !p.IsSetConsumerGroupName() {
		return ConsumerGroupDescription_ConsumerGroupName_DEFAULT
	}
	return *p.ConsumerGroupName
}

var ConsumerGroupDescription_StartFrom_DEFAULT int64

func (p *ConsumerGroupDescription) GetStartFrom() int64 {
	if !p.IsSetStartFrom() {
		return ConsumerGroupDescription_StartFrom_DEFAULT
	}
	return *p.StartFrom
}

var ConsumerGroupDescription_Status_DEFAULT ConsumerGroupStatus

func (p *ConsumerGroupDescription) GetStatus() ConsumerGroupStatus {
	if !p.IsSetStatus() {
		return ConsumerGroupDescription_Status_DEFAULT
	}
	return *p.Status
}

var ConsumerGroupDescription_LockTimeoutInSeconds_DEFAULT int32

func (p *ConsumerGroupDescription) GetLockTimeoutInSeconds() int32 {
	if !p.IsSetLockTimeoutInSeconds() {
		return ConsumerGroupDescription_LockTimeoutInSeconds_DEFAULT
	}
	return *p.LockTimeoutInSeconds
}

var ConsumerGroupDescription_MaxDeliveryCount_DEFAULT int32

func (p *ConsumerGroupDescription) GetMaxDeliveryCount() int32 {
	if !p.IsSetMaxDeliveryCount() {
		return ConsumerGroupDescription_MaxDeliveryCount_DEFAULT
	}
	return *p.MaxDeliveryCount
}

var ConsumerGroupDescription_SkipOlderMessagesInSeconds_DEFAULT int32

func (p *ConsumerGroupDescription) GetSkipOlderMessagesInSeconds() int32 {
	if !p.IsSetSkipOlderMessagesInSeconds() {
		return ConsumerGroupDescription_SkipOlderMessagesInSeconds_DEFAULT
	}
	return *p.SkipOlderMessagesInSeconds
}

var ConsumerGroupDescription_DeadLetterQueueDestinationUUID_DEFAULT string

func (p *ConsumerGroupDescription) GetDeadLetterQueueDestinationUUID() string {
	if !p.IsSetDeadLetterQueueDestinationUUID() {
		return ConsumerGroupDescription_DeadLetterQueueDestinationUUID_DEFAULT
	}
	return *p.DeadLetterQueueDestinationUUID
}

var ConsumerGroupDescription_DestinationUUID_DEFAULT string

func (p *ConsumerGroupDescription) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return ConsumerGroupDescription_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var ConsumerGroupDescription_ConsumerGroupUUID_DEFAULT string

func (p *ConsumerGroupDescription) GetConsumerGroupUUID() string {
	if !p.IsSetConsumerGroupUUID() {
		return ConsumerGroupDescription_ConsumerGroupUUID_DEFAULT
	}
	return *p.ConsumerGroupUUID
}

var ConsumerGroupDescription_OwnerEmail_DEFAULT string

func (p *ConsumerGroupDescription) GetOwnerEmail() string {
	if !p.IsSetOwnerEmail() {
		return ConsumerGroupDescription_OwnerEmail_DEFAULT
	}
	return *p.OwnerEmail
}

var ConsumerGroupDescription_ConsumerGroupType_DEFAULT ConsumerGroupType

func (p *ConsumerGroupDescription) GetConsumerGroupType() ConsumerGroupType {
	if !p.IsSetConsumerGroupType() {
		return ConsumerGroupDescription_ConsumerGroupType_DEFAULT
	}
	return *p.ConsumerGroupType
}

var ConsumerGroupDescription_IsMultiZone_DEFAULT bool

func (p *ConsumerGroupDescription) GetIsMultiZone() bool {
	if !p.IsSetIsMultiZone() {
		return ConsumerGroupDescription_IsMultiZone_DEFAULT
	}
	return *p.IsMultiZone
}

var ConsumerGroupDescription_ZoneConfigs_DEFAULT ConsumerGroupZoneConfigs

func (p *ConsumerGroupDescription) GetZoneConfigs() ConsumerGroupZoneConfigs {
	if !p.IsSetZoneConfigs() {
		return ConsumerGroupDescription_ZoneConfigs_DEFAULT
	}
	return *p.ZoneConfigs
}
func (p *ConsumerGroupDescription) IsSetDestinationPath() bool {
	return p.DestinationPath != nil
}

func (p *ConsumerGroupDescription) IsSetConsumerGroupName() bool {
	return p.ConsumerGroupName != nil
}

func (p *ConsumerGroupDescription) IsSetStartFrom() bool {
	return p.StartFrom != nil
}

func (p *ConsumerGroupDescription) IsSetStatus() bool {
	return p.Status != nil
}

func (p *ConsumerGroupDescription) IsSetLockTimeoutInSeconds() bool {
	return p.LockTimeoutInSeconds != nil
}

func (p *ConsumerGroupDescription) IsSetMaxDeliveryCount() bool {
	return p.MaxDeliveryCount != nil
}

func (p *ConsumerGroupDescription) IsSetSkipOlderMessagesInSeconds() bool {
	return p.SkipOlderMessagesInSeconds != nil
}

func (p *ConsumerGroupDescription) IsSetDeadLetterQueueDestinationUUID() bool {
	return p.DeadLetterQueueDestinationUUID != nil
}

func (p *ConsumerGroupDescription) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *ConsumerGroupDescription) IsSetConsumerGroupUUID() bool {
	return p.ConsumerGroupUUID != nil
}

func (p *ConsumerGroupDescription) IsSetOwnerEmail() bool {
	return p.OwnerEmail != nil
}

func (p *ConsumerGroupDescription) IsSetConsumerGroupType() bool {
	return p.ConsumerGroupType != nil
}

func (p *ConsumerGroupDescription) IsSetIsMultiZone() bool {
	return p.IsMultiZone != nil
}

func (p *ConsumerGroupDescription) IsSetZoneConfigs() bool {
	return p.ZoneConfigs != nil
}

func (p *ConsumerGroupDescription) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConsumerGroupDescription) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationPath = &v
	}
	return nil
}

func (p *ConsumerGroupDescription) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ConsumerGroupName = &v
	}
	return nil
}

func (p *ConsumerGroupDescription) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StartFrom = &v
	}
	return nil
}

func (p *ConsumerGroupDescription) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := ConsumerGroupStatus(v)
		p.Status = &temp
	}
	return nil
}

func (p *ConsumerGroupDescription) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.LockTimeoutInSeconds = &v
	}
	return nil
}

func (p *ConsumerGroupDescription) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.MaxDeliveryCount = &v
	}
	return nil
}

func (p *ConsumerGroupDescription) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SkipOlderMessagesInSeconds = &v
	}
	return nil
}

func (p *ConsumerGroupDescription) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.DeadLetterQueueDestinationUUID = &v
	}
	return nil
}

func (p *ConsumerGroupDescription) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *ConsumerGroupDescription) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.ConsumerGroupUUID = &v
	}
	return nil
}

func (p *ConsumerGroupDescription) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.OwnerEmail = &v
	}
	return nil
}

func (p *ConsumerGroupDescription) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		temp := ConsumerGroupType(v)
		p.ConsumerGroupType = &temp
	}
	return nil
}

func (p *ConsumerGroupDescription) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.IsMultiZone = &v
	}
	return nil
}

func (p *ConsumerGroupDescription) readField21(iprot thrift.TProtocol) error {
	p.ZoneConfigs = &ConsumerGroupZoneConfigs{}
	if err := p.ZoneConfigs.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ZoneConfigs), err)
	}
	return nil
}

func (p *ConsumerGroupDescription) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConsumerGroupDescription"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ConsumerGroupDescription) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationPath() {
		if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupDescription) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupName() {
		if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupDescription) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartFrom() {
		if err := oprot.WriteFieldBegin("startFrom", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startFrom: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.StartFrom)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.startFrom (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startFrom: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupDescription) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:status: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupDescription) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLockTimeoutInSeconds() {
		if err := oprot.WriteFieldBegin("lockTimeoutInSeconds", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lockTimeoutInSeconds: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.LockTimeoutInSeconds)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lockTimeoutInSeconds (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lockTimeoutInSeconds: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupDescription) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxDeliveryCount() {
		if err := oprot.WriteFieldBegin("maxDeliveryCount", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:maxDeliveryCount: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.MaxDeliveryCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.maxDeliveryCount (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:maxDeliveryCount: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupDescription) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetSkipOlderMessagesInSeconds() {
		if err := oprot.WriteFieldBegin("skipOlderMessagesInSeconds", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:skipOlderMessagesInSeconds: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.SkipOlderMessagesInSeconds)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.skipOlderMessagesInSeconds (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:skipOlderMessagesInSeconds: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupDescription) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeadLetterQueueDestinationUUID() {
		if err := oprot.WriteFieldBegin("deadLetterQueueDestinationUUID", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:deadLetterQueueDestinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DeadLetterQueueDestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.deadLetterQueueDestinationUUID (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:deadLetterQueueDestinationUUID: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupDescription) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupDescription) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupUUID() {
		if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:consumerGroupUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:consumerGroupUUID: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupDescription) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetOwnerEmail() {
		if err := oprot.WriteFieldBegin("ownerEmail", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:ownerEmail: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OwnerEmail)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ownerEmail (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:ownerEmail: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupDescription) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupType() {
		if err := oprot.WriteFieldBegin("consumerGroupType", thrift.I32, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:consumerGroupType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ConsumerGroupType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupType (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:consumerGroupType: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupDescription) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsMultiZone() {
		if err := oprot.WriteFieldBegin("isMultiZone", thrift.BOOL, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:isMultiZone: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IsMultiZone)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isMultiZone (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:isMultiZone: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupDescription) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetZoneConfigs() {
		if err := oprot.WriteFieldBegin("zoneConfigs", thrift.STRUCT, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:zoneConfigs: ", p), err)
		}
		if err := p.ZoneConfigs.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ZoneConfigs), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:zoneConfigs: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupDescription) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConsumerGroupDescription(%+v)", *p)
}

// Attributes:
//  - Zone
//  - Visible
type ConsumerGroupZoneConfig struct {
	// unused fields # 1 to 10
	Zone *string `thrift:"zone,11" json:"zone,omitempty"`
	// unused fields # 12 to 19
	Visible *bool `thrift:"visible,20" json:"visible,omitempty"`
}

func NewConsumerGroupZoneConfig() *ConsumerGroupZoneConfig {
	return &ConsumerGroupZoneConfig{}
}

var ConsumerGroupZoneConfig_Zone_DEFAULT string

func (p *ConsumerGroupZoneConfig) GetZone() string {
	if !p.IsSetZone() {
		return ConsumerGroupZoneConfig_Zone_DEFAULT
	}
	return *p.Zone
}

var ConsumerGroupZoneConfig_Visible_DEFAULT bool

func (p *ConsumerGroupZoneConfig) GetVisible() bool {
	if !p.IsSetVisible() {
		return ConsumerGroupZoneConfig_Visible_DEFAULT
	}
	return *p.Visible
}
func (p *ConsumerGroupZoneConfig) IsSetZone() bool {
	return p.Zone != nil
}

func (p *ConsumerGroupZoneConfig) IsSetVisible() bool {
	return p.Visible != nil
}

func (p *ConsumerGroupZoneConfig) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConsumerGroupZoneConfig) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Zone = &v
	}
	return nil
}

func (p *ConsumerGroupZoneConfig) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.Visible = &v
	}
	return nil
}

func (p *ConsumerGroupZoneConfig) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConsumerGroupZoneConfig"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ConsumerGroupZoneConfig) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetZone() {
		if err := oprot.WriteFieldBegin("zone", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:zone: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Zone)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.zone (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:zone: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupZoneConfig) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetVisible() {
		if err := oprot.WriteFieldBegin("visible", thrift.BOOL, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:visible: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Visible)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.visible (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:visible: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupZoneConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConsumerGroupZoneConfig(%+v)", *p)
}

// Attributes:
//  - Configs
//  - ActiveZone
type ConsumerGroupZoneConfigs struct {
	// unused fields # 1 to 9
	Configs []*ConsumerGroupZoneConfig `thrift:"configs,10" json:"configs,omitempty"`
	// unused fields # 11 to 20
	ActiveZone *string `thrift:"activeZone,21" json:"activeZone,omitempty"`
}

func NewConsumerGroupZoneConfigs() *ConsumerGroupZoneConfigs {
	return &ConsumerGroupZoneConfigs{}
}

var ConsumerGroupZoneConfigs_Configs_DEFAULT []*ConsumerGroupZoneConfig

func (p *ConsumerGroupZoneConfigs) GetConfigs() []*ConsumerGroupZoneConfig {
	return p.Configs
}

var ConsumerGroupZoneConfigs_ActiveZone_DEFAULT string

func (p *ConsumerGroupZoneConfigs) GetActiveZone() string {
	if !p.IsSetActiveZone() {
		return ConsumerGroupZoneConfigs_ActiveZone_DEFAULT
	}
	return *p.ActiveZone
}
func (p *ConsumerGroupZoneConfigs) IsSetConfigs() bool {
	return p.Configs != nil
}

func (p *ConsumerGroupZoneConfigs) IsSetActiveZone() bool {
	return p.ActiveZone != nil
}

func (p *ConsumerGroupZoneConfigs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConsumerGroupZoneConfigs) readField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ConsumerGroupZoneConfig, 0, size)
	p.Configs = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &ConsumerGroupZoneConfig{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.Configs = append(p.Configs, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ConsumerGroupZoneConfigs) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.ActiveZone = &v
	}
	return nil
}

func (p *ConsumerGroupZoneConfigs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConsumerGroupZoneConfigs"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ConsumerGroupZoneConfigs) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfigs() {
		if err := oprot.WriteFieldBegin("configs", thrift.LIST, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:configs: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Configs)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Configs {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:configs: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupZoneConfigs) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetActiveZone() {
		if err := oprot.WriteFieldBegin("activeZone", thrift.STRING, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:activeZone: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ActiveZone)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.activeZone (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:activeZone: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupZoneConfigs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConsumerGroupZoneConfigs(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
//  - StartFrom
//  - LockTimeoutInSeconds
//  - MaxDeliveryCount
//  - SkipOlderMessagesInSeconds
//  - OwnerEmail
//  - ConsumerGroupType
//  - IsMultiZone
//  - ZoneConfigs
type CreateConsumerGroupRequest struct {
	DestinationPath            *string            `thrift:"destinationPath,1" json:"destinationPath,omitempty"`
	ConsumerGroupName          *string            `thrift:"consumerGroupName,2" json:"consumerGroupName,omitempty"`
	StartFrom                  *int64             `thrift:"startFrom,3" json:"startFrom,omitempty"`
	LockTimeoutInSeconds       *int32             `thrift:"lockTimeoutInSeconds,4" json:"lockTimeoutInSeconds,omitempty"`
	MaxDeliveryCount           *int32             `thrift:"maxDeliveryCount,5" json:"maxDeliveryCount,omitempty"`
	SkipOlderMessagesInSeconds *int32             `thrift:"skipOlderMessagesInSeconds,6" json:"skipOlderMessagesInSeconds,omitempty"`
	OwnerEmail                 *string            `thrift:"ownerEmail,7" json:"ownerEmail,omitempty"`
	ConsumerGroupType          *ConsumerGroupType `thrift:"consumerGroupType,8" json:"consumerGroupType,omitempty"`
	// unused field # 9
	IsMultiZone *bool                     `thrift:"isMultiZone,10" json:"isMultiZone,omitempty"`
	ZoneConfigs *ConsumerGroupZoneConfigs `thrift:"zoneConfigs,11" json:"zoneConfigs,omitempty"`
}

func NewCreateConsumerGroupRequest() *CreateConsumerGroupRequest {
	return &CreateConsumerGroupRequest{}
}

var CreateConsumerGroupRequest_DestinationPath_DEFAULT string

func (p *CreateConsumerGroupRequest) GetDestinationPath() string {
	if !p.IsSetDestinationPath() {
		return CreateConsumerGroupRequest_DestinationPath_DEFAULT
	}
	return *p.DestinationPath
}

var CreateConsumerGroupRequest_ConsumerGroupName_DEFAULT string

func (p *CreateConsumerGroupRequest) GetConsumerGroupName() string {
	if !p.IsSetConsumerGroupName() {
		return CreateConsumerGroupRequest_ConsumerGroupName_DEFAULT
	}
	return *p.ConsumerGroupName
}

var CreateConsumerGroupRequest_StartFrom_DEFAULT int64

func (p *CreateConsumerGroupRequest) GetStartFrom() int64 {
	if !p.IsSetStartFrom() {
		return CreateConsumerGroupRequest_StartFrom_DEFAULT
	}
	return *p.StartFrom
}

var CreateConsumerGroupRequest_LockTimeoutInSeconds_DEFAULT int32

func (p *CreateConsumerGroupRequest) GetLockTimeoutInSeconds() int32 {
	if !p.IsSetLockTimeoutInSeconds() {
		return CreateConsumerGroupRequest_LockTimeoutInSeconds_DEFAULT
	}
	return *p.LockTimeoutInSeconds
}

var CreateConsumerGroupRequest_MaxDeliveryCount_DEFAULT int32

func (p *CreateConsumerGroupRequest) GetMaxDeliveryCount() int32 {
	if !p.IsSetMaxDeliveryCount() {
		return CreateConsumerGroupRequest_MaxDeliveryCount_DEFAULT
	}
	return *p.MaxDeliveryCount
}

var CreateConsumerGroupRequest_SkipOlderMessagesInSeconds_DEFAULT int32

func (p *CreateConsumerGroupRequest) GetSkipOlderMessagesInSeconds() int32 {
	if !p.IsSetSkipOlderMessagesInSeconds() {
		return CreateConsumerGroupRequest_SkipOlderMessagesInSeconds_DEFAULT
	}
	return *p.SkipOlderMessagesInSeconds
}

var CreateConsumerGroupRequest_OwnerEmail_DEFAULT string

func (p *CreateConsumerGroupRequest) GetOwnerEmail() string {
	if !p.IsSetOwnerEmail() {
		return CreateConsumerGroupRequest_OwnerEmail_DEFAULT
	}
	return *p.OwnerEmail
}

var CreateConsumerGroupRequest_ConsumerGroupType_DEFAULT ConsumerGroupType

func (p *CreateConsumerGroupRequest) GetConsumerGroupType() ConsumerGroupType {
	if !p.IsSetConsumerGroupType() {
		return CreateConsumerGroupRequest_ConsumerGroupType_DEFAULT
	}
	return *p.ConsumerGroupType
}

var CreateConsumerGroupRequest_IsMultiZone_DEFAULT bool

func (p *CreateConsumerGroupRequest) GetIsMultiZone() bool {
	if !p.IsSetIsMultiZone() {
		return CreateConsumerGroupRequest_IsMultiZone_DEFAULT
	}
	return *p.IsMultiZone
}

var CreateConsumerGroupRequest_ZoneConfigs_DEFAULT *ConsumerGroupZoneConfigs

func (p *CreateConsumerGroupRequest) GetZoneConfigs() *ConsumerGroupZoneConfigs {
	if !p.IsSetZoneConfigs() {
		return CreateConsumerGroupRequest_ZoneConfigs_DEFAULT
	}
	return p.ZoneConfigs
}
func (p *CreateConsumerGroupRequest) IsSetDestinationPath() bool {
	return p.DestinationPath != nil
}

func (p *CreateConsumerGroupRequest) IsSetConsumerGroupName() bool {
	return p.ConsumerGroupName != nil
}

func (p *CreateConsumerGroupRequest) IsSetStartFrom() bool {
	return p.StartFrom != nil
}

func (p *CreateConsumerGroupRequest) IsSetLockTimeoutInSeconds() bool {
	return p.LockTimeoutInSeconds != nil
}

func (p *CreateConsumerGroupRequest) IsSetMaxDeliveryCount() bool {
	return p.MaxDeliveryCount != nil
}

func (p *CreateConsumerGroupRequest) IsSetSkipOlderMessagesInSeconds() bool {
	return p.SkipOlderMessagesInSeconds != nil
}

func (p *CreateConsumerGroupRequest) IsSetOwnerEmail() bool {
	return p.OwnerEmail != nil
}

func (p *CreateConsumerGroupRequest) IsSetConsumerGroupType() bool {
	return p.ConsumerGroupType != nil
}

func (p *CreateConsumerGroupRequest) IsSetIsMultiZone() bool {
	return p.IsMultiZone != nil
}

func (p *CreateConsumerGroupRequest) IsSetZoneConfigs() bool {
	return p.ZoneConfigs != nil
}

func (p *CreateConsumerGroupRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CreateConsumerGroupRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationPath = &v
	}
	return nil
}

func (p *CreateConsumerGroupRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ConsumerGroupName = &v
	}
	return nil
}

func (p *CreateConsumerGroupRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StartFrom = &v
	}
	return nil
}

func (p *CreateConsumerGroupRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.LockTimeoutInSeconds = &v
	}
	return nil
}

func (p *CreateConsumerGroupRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.MaxDeliveryCount = &v
	}
	return nil
}

func (p *CreateConsumerGroupRequest) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.SkipOlderMessagesInSeconds = &v
	}
	return nil
}

func (p *CreateConsumerGroupRequest) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.OwnerEmail = &v
	}
	return nil
}

func (p *CreateConsumerGroupRequest) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := ConsumerGroupType(v)
		p.ConsumerGroupType = &temp
	}
	return nil
}

func (p *CreateConsumerGroupRequest) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.IsMultiZone = &v
	}
	return nil
}

func (p *CreateConsumerGroupRequest) readField11(iprot thrift.TProtocol) error {
	p.ZoneConfigs = &ConsumerGroupZoneConfigs{}
	if err := p.ZoneConfigs.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ZoneConfigs), err)
	}
	return nil
}

func (p *CreateConsumerGroupRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateConsumerGroupRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CreateConsumerGroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationPath() {
		if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err)
		}
	}
	return err
}

func (p *CreateConsumerGroupRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupName() {
		if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err)
		}
	}
	return err
}

func (p *CreateConsumerGroupRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartFrom() {
		if err := oprot.WriteFieldBegin("startFrom", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startFrom: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.StartFrom)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.startFrom (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startFrom: ", p), err)
		}
	}
	return err
}

func (p *CreateConsumerGroupRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLockTimeoutInSeconds() {
		if err := oprot.WriteFieldBegin("lockTimeoutInSeconds", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lockTimeoutInSeconds: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.LockTimeoutInSeconds)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lockTimeoutInSeconds (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lockTimeoutInSeconds: ", p), err)
		}
	}
	return err
}

func (p *CreateConsumerGroupRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxDeliveryCount() {
		if err := oprot.WriteFieldBegin("maxDeliveryCount", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:maxDeliveryCount: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.MaxDeliveryCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.maxDeliveryCount (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:maxDeliveryCount: ", p), err)
		}
	}
	return err
}

func (p *CreateConsumerGroupRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSkipOlderMessagesInSeconds() {
		if err := oprot.WriteFieldBegin("skipOlderMessagesInSeconds", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:skipOlderMessagesInSeconds: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.SkipOlderMessagesInSeconds)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.skipOlderMessagesInSeconds (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:skipOlderMessagesInSeconds: ", p), err)
		}
	}
	return err
}

func (p *CreateConsumerGroupRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetOwnerEmail() {
		if err := oprot.WriteFieldBegin("ownerEmail", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ownerEmail: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OwnerEmail)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ownerEmail (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ownerEmail: ", p), err)
		}
	}
	return err
}

func (p *CreateConsumerGroupRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupType() {
		if err := oprot.WriteFieldBegin("consumerGroupType", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:consumerGroupType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ConsumerGroupType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupType (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:consumerGroupType: ", p), err)
		}
	}
	return err
}

func (p *CreateConsumerGroupRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsMultiZone() {
		if err := oprot.WriteFieldBegin("isMultiZone", thrift.BOOL, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:isMultiZone: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IsMultiZone)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isMultiZone (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:isMultiZone: ", p), err)
		}
	}
	return err
}

func (p *CreateConsumerGroupRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetZoneConfigs() {
		if err := oprot.WriteFieldBegin("zoneConfigs", thrift.STRUCT, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:zoneConfigs: ", p), err)
		}
		if err := p.ZoneConfigs.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ZoneConfigs), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:zoneConfigs: ", p), err)
		}
	}
	return err
}

func (p *CreateConsumerGroupRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateConsumerGroupRequest(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
type ReadConsumerGroupRequest struct {
	DestinationPath   *string `thrift:"destinationPath,1" json:"destinationPath,omitempty"`
	ConsumerGroupName *string `thrift:"consumerGroupName,2" json:"consumerGroupName,omitempty"`
}

func NewReadConsumerGroupRequest() *ReadConsumerGroupRequest {
	return &ReadConsumerGroupRequest{}
}

var ReadConsumerGroupRequest_DestinationPath_DEFAULT string

func (p *ReadConsumerGroupRequest) GetDestinationPath() string {
	if !p.IsSetDestinationPath() {
		return ReadConsumerGroupRequest_DestinationPath_DEFAULT
	}
	return *p.DestinationPath
}

var ReadConsumerGroupRequest_ConsumerGroupName_DEFAULT string

func (p *ReadConsumerGroupRequest) GetConsumerGroupName() string {
	if !p.IsSetConsumerGroupName() {
		return ReadConsumerGroupRequest_ConsumerGroupName_DEFAULT
	}
	return *p.ConsumerGroupName
}
func (p *ReadConsumerGroupRequest) IsSetDestinationPath() bool {
	return p.DestinationPath != nil
}

func (p *ReadConsumerGroupRequest) IsSetConsumerGroupName() bool {
	return p.ConsumerGroupName != nil
}

func (p *ReadConsumerGroupRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadConsumerGroupRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationPath = &v
	}
	return nil
}

func (p *ReadConsumerGroupRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ConsumerGroupName = &v
	}
	return nil
}

func (p *ReadConsumerGroupRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadConsumerGroupRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadConsumerGroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationPath() {
		if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupName() {
		if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadConsumerGroupRequest(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
//  - Status
//  - LockTimeoutInSeconds
//  - MaxDeliveryCount
//  - SkipOlderMessagesInSeconds
//  - OwnerEmail
type UpdateConsumerGroupRequest struct {
	DestinationPath            *string              `thrift:"destinationPath,1" json:"destinationPath,omitempty"`
	ConsumerGroupName          *string              `thrift:"consumerGroupName,2" json:"consumerGroupName,omitempty"`
	Status                     *ConsumerGroupStatus `thrift:"status,3" json:"status,omitempty"`
	LockTimeoutInSeconds       *int32               `thrift:"lockTimeoutInSeconds,4" json:"lockTimeoutInSeconds,omitempty"`
	MaxDeliveryCount           *int32               `thrift:"maxDeliveryCount,5" json:"maxDeliveryCount,omitempty"`
	SkipOlderMessagesInSeconds *int32               `thrift:"skipOlderMessagesInSeconds,6" json:"skipOlderMessagesInSeconds,omitempty"`
	OwnerEmail                 *string              `thrift:"ownerEmail,7" json:"ownerEmail,omitempty"`
}

func NewUpdateConsumerGroupRequest() *UpdateConsumerGroupRequest {
	return &UpdateConsumerGroupRequest{}
}

var UpdateConsumerGroupRequest_DestinationPath_DEFAULT string

func (p *UpdateConsumerGroupRequest) GetDestinationPath() string {
	if !p.IsSetDestinationPath() {
		return UpdateConsumerGroupRequest_DestinationPath_DEFAULT
	}
	return *p.DestinationPath
}

var UpdateConsumerGroupRequest_ConsumerGroupName_DEFAULT string

func (p *UpdateConsumerGroupRequest) GetConsumerGroupName() string {
	if !p.IsSetConsumerGroupName() {
		return UpdateConsumerGroupRequest_ConsumerGroupName_DEFAULT
	}
	return *p.ConsumerGroupName
}

var UpdateConsumerGroupRequest_Status_DEFAULT ConsumerGroupStatus

func (p *UpdateConsumerGroupRequest) GetStatus() ConsumerGroupStatus {
	if !p.IsSetStatus() {
		return UpdateConsumerGroupRequest_Status_DEFAULT
	}
	return *p.Status
}

var UpdateConsumerGroupRequest_LockTimeoutInSeconds_DEFAULT int32

func (p *UpdateConsumerGroupRequest) GetLockTimeoutInSeconds() int32 {
	if !p.IsSetLockTimeoutInSeconds() {
		return UpdateConsumerGroupRequest_LockTimeoutInSeconds_DEFAULT
	}
	return *p.LockTimeoutInSeconds
}

var UpdateConsumerGroupRequest_MaxDeliveryCount_DEFAULT int32

func (p *UpdateConsumerGroupRequest) GetMaxDeliveryCount() int32 {
	if !p.IsSetMaxDeliveryCount() {
		return UpdateConsumerGroupRequest_MaxDeliveryCount_DEFAULT
	}
	return *p.MaxDeliveryCount
}

var UpdateConsumerGroupRequest_SkipOlderMessagesInSeconds_DEFAULT int32

func (p *UpdateConsumerGroupRequest) GetSkipOlderMessagesInSeconds() int32 {
	if !p.IsSetSkipOlderMessagesInSeconds() {
		return UpdateConsumerGroupRequest_SkipOlderMessagesInSeconds_DEFAULT
	}
	return *p.SkipOlderMessagesInSeconds
}

var UpdateConsumerGroupRequest_OwnerEmail_DEFAULT string

func (p *UpdateConsumerGroupRequest) GetOwnerEmail() string {
	if !p.IsSetOwnerEmail() {
		return UpdateConsumerGroupRequest_OwnerEmail_DEFAULT
	}
	return *p.OwnerEmail
}
func (p *UpdateConsumerGroupRequest) IsSetDestinationPath() bool {
	return p.DestinationPath != nil
}

func (p *UpdateConsumerGroupRequest) IsSetConsumerGroupName() bool {
	return p.ConsumerGroupName != nil
}

func (p *UpdateConsumerGroupRequest) IsSetStatus() bool {
	return p.Status != nil
}

func (p *UpdateConsumerGroupRequest) IsSetLockTimeoutInSeconds() bool {
	return p.LockTimeoutInSeconds != nil
}

func (p *UpdateConsumerGroupRequest) IsSetMaxDeliveryCount() bool {
	return p.MaxDeliveryCount != nil
}

func (p *UpdateConsumerGroupRequest) IsSetSkipOlderMessagesInSeconds() bool {
	return p.SkipOlderMessagesInSeconds != nil
}

func (p *UpdateConsumerGroupRequest) IsSetOwnerEmail() bool {
	return p.OwnerEmail != nil
}

func (p *UpdateConsumerGroupRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateConsumerGroupRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationPath = &v
	}
	return nil
}

func (p *UpdateConsumerGroupRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ConsumerGroupName = &v
	}
	return nil
}

func (p *UpdateConsumerGroupRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := ConsumerGroupStatus(v)
		p.Status = &temp
	}
	return nil
}

func (p *UpdateConsumerGroupRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.LockTimeoutInSeconds = &v
	}
	return nil
}

func (p *UpdateConsumerGroupRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.MaxDeliveryCount = &v
	}
	return nil
}

func (p *UpdateConsumerGroupRequest) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.SkipOlderMessagesInSeconds = &v
	}
	return nil
}

func (p *UpdateConsumerGroupRequest) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.OwnerEmail = &v
	}
	return nil
}

func (p *UpdateConsumerGroupRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateConsumerGroupRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateConsumerGroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationPath() {
		if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err)
		}
	}
	return err
}

func (p *UpdateConsumerGroupRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupName() {
		if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err)
		}
	}
	return err
}

func (p *UpdateConsumerGroupRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err)
		}
	}
	return err
}

func (p *UpdateConsumerGroupRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLockTimeoutInSeconds() {
		if err := oprot.WriteFieldBegin("lockTimeoutInSeconds", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lockTimeoutInSeconds: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.LockTimeoutInSeconds)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lockTimeoutInSeconds (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lockTimeoutInSeconds: ", p), err)
		}
	}
	return err
}

func (p *UpdateConsumerGroupRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxDeliveryCount() {
		if err := oprot.WriteFieldBegin("maxDeliveryCount", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:maxDeliveryCount: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.MaxDeliveryCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.maxDeliveryCount (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:maxDeliveryCount: ", p), err)
		}
	}
	return err
}

func (p *UpdateConsumerGroupRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSkipOlderMessagesInSeconds() {
		if err := oprot.WriteFieldBegin("skipOlderMessagesInSeconds", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:skipOlderMessagesInSeconds: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.SkipOlderMessagesInSeconds)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.skipOlderMessagesInSeconds (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:skipOlderMessagesInSeconds: ", p), err)
		}
	}
	return err
}

func (p *UpdateConsumerGroupRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetOwnerEmail() {
		if err := oprot.WriteFieldBegin("ownerEmail", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ownerEmail: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OwnerEmail)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ownerEmail (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ownerEmail: ", p), err)
		}
	}
	return err
}

func (p *UpdateConsumerGroupRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateConsumerGroupRequest(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
type DeleteConsumerGroupRequest struct {
	DestinationPath   *string `thrift:"destinationPath,1" json:"destinationPath,omitempty"`
	ConsumerGroupName *string `thrift:"consumerGroupName,2" json:"consumerGroupName,omitempty"`
}

func NewDeleteConsumerGroupRequest() *DeleteConsumerGroupRequest {
	return &DeleteConsumerGroupRequest{}
}

var DeleteConsumerGroupRequest_DestinationPath_DEFAULT string

func (p *DeleteConsumerGroupRequest) GetDestinationPath() string {
	if !p.IsSetDestinationPath() {
		return DeleteConsumerGroupRequest_DestinationPath_DEFAULT
	}
	return *p.DestinationPath
}

var DeleteConsumerGroupRequest_ConsumerGroupName_DEFAULT string

func (p *DeleteConsumerGroupRequest) GetConsumerGroupName() string {
	if !p.IsSetConsumerGroupName() {
		return DeleteConsumerGroupRequest_ConsumerGroupName_DEFAULT
	}
	return *p.ConsumerGroupName
}
func (p *DeleteConsumerGroupRequest) IsSetDestinationPath() bool {
	return p.DestinationPath != nil
}

func (p *DeleteConsumerGroupRequest) IsSetConsumerGroupName() bool {
	return p.ConsumerGroupName != nil
}

func (p *DeleteConsumerGroupRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DeleteConsumerGroupRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationPath = &v
	}
	return nil
}

func (p *DeleteConsumerGroupRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ConsumerGroupName = &v
	}
	return nil
}

func (p *DeleteConsumerGroupRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteConsumerGroupRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DeleteConsumerGroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationPath() {
		if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err)
		}
	}
	return err
}

func (p *DeleteConsumerGroupRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupName() {
		if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err)
		}
	}
	return err
}

func (p *DeleteConsumerGroupRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteConsumerGroupRequest(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
//  - PageToken
//  - Limit
type ListConsumerGroupRequest struct {
	DestinationPath   *string `thrift:"destinationPath,1" json:"destinationPath,omitempty"`
	ConsumerGroupName *string `thrift:"consumerGroupName,2" json:"consumerGroupName,omitempty"`
	PageToken         []byte  `thrift:"pageToken,3" json:"pageToken,omitempty"`
	Limit             *int64  `thrift:"limit,4" json:"limit,omitempty"`
}

func NewListConsumerGroupRequest() *ListConsumerGroupRequest {
	return &ListConsumerGroupRequest{}
}

var ListConsumerGroupRequest_DestinationPath_DEFAULT string

func (p *ListConsumerGroupRequest) GetDestinationPath() string {
	if !p.IsSetDestinationPath() {
		return ListConsumerGroupRequest_DestinationPath_DEFAULT
	}
	return *p.DestinationPath
}

var ListConsumerGroupRequest_ConsumerGroupName_DEFAULT string

func (p *ListConsumerGroupRequest) GetConsumerGroupName() string {
	if !p.IsSetConsumerGroupName() {
		return ListConsumerGroupRequest_ConsumerGroupName_DEFAULT
	}
	return *p.ConsumerGroupName
}

var ListConsumerGroupRequest_PageToken_DEFAULT []byte

func (p *ListConsumerGroupRequest) GetPageToken() []byte {
	return p.PageToken
}

var ListConsumerGroupRequest_Limit_DEFAULT int64

func (p *ListConsumerGroupRequest) GetLimit() int64 {
	if !p.IsSetLimit() {
		return ListConsumerGroupRequest_Limit_DEFAULT
	}
	return *p.Limit
}
func (p *ListConsumerGroupRequest) IsSetDestinationPath() bool {
	return p.DestinationPath != nil
}

func (p *ListConsumerGroupRequest) IsSetConsumerGroupName() bool {
	return p.ConsumerGroupName != nil
}

func (p *ListConsumerGroupRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListConsumerGroupRequest) IsSetLimit() bool {
	return p.Limit != nil
}

func (p *ListConsumerGroupRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListConsumerGroupRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationPath = &v
	}
	return nil
}

func (p *ListConsumerGroupRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ConsumerGroupName = &v
	}
	return nil
}

func (p *ListConsumerGroupRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PageToken = v
	}
	return nil
}

func (p *ListConsumerGroupRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Limit = &v
	}
	return nil
}

func (p *ListConsumerGroupRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListConsumerGroupRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListConsumerGroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationPath() {
		if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err)
		}
	}
	return err
}

func (p *ListConsumerGroupRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupName() {
		if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err)
		}
	}
	return err
}

func (p *ListConsumerGroupRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err := oprot.WriteFieldBegin("pageToken", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pageToken: ", p), err)
		}
		if err := oprot.WriteBinary(p.PageToken); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pageToken (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pageToken: ", p), err)
		}
	}
	return err
}

func (p *ListConsumerGroupRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err := oprot.WriteFieldBegin("limit", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:limit: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Limit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.limit (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:limit: ", p), err)
		}
	}
	return err
}

func (p *ListConsumerGroupRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListConsumerGroupRequest(%+v)", *p)
}

// Attributes:
//  - ConsumerGroups
//  - NextPageToken
type ListConsumerGroupResult_ struct {
	ConsumerGroups []*ConsumerGroupDescription `thrift:"consumerGroups,1" json:"consumerGroups,omitempty"`
	NextPageToken  []byte                      `thrift:"nextPageToken,2" json:"nextPageToken,omitempty"`
}

func NewListConsumerGroupResult_() *ListConsumerGroupResult_ {
	return &ListConsumerGroupResult_{}
}

var ListConsumerGroupResult__ConsumerGroups_DEFAULT []*ConsumerGroupDescription

func (p *ListConsumerGroupResult_) GetConsumerGroups() []*ConsumerGroupDescription {
	return p.ConsumerGroups
}

var ListConsumerGroupResult__NextPageToken_DEFAULT []byte

func (p *ListConsumerGroupResult_) GetNextPageToken() []byte {
	return p.NextPageToken
}
func (p *ListConsumerGroupResult_) IsSetConsumerGroups() bool {
	return p.ConsumerGroups != nil
}

func (p *ListConsumerGroupResult_) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListConsumerGroupResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListConsumerGroupResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ConsumerGroupDescription, 0, size)
	p.ConsumerGroups = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &ConsumerGroupDescription{}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.ConsumerGroups = append(p.ConsumerGroups, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ListConsumerGroupResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NextPageToken = v
	}
	return nil
}

func (p *ListConsumerGroupResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListConsumerGroupResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListConsumerGroupResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroups() {
		if err := oprot.WriteFieldBegin("consumerGroups", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:consumerGroups: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ConsumerGroups)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ConsumerGroups {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:consumerGroups: ", p), err)
		}
	}
	return err
}

func (p *ListConsumerGroupResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err := oprot.WriteFieldBegin("nextPageToken", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nextPageToken: ", p), err)
		}
		if err := oprot.WriteBinary(p.NextPageToken); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nextPageToken (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nextPageToken: ", p), err)
		}
	}
	return err
}

func (p *ListConsumerGroupResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListConsumerGroupResult_(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
type PurgeDLQForConsumerGroupRequest struct {
	DestinationPath   *string `thrift:"destinationPath,1" json:"destinationPath,omitempty"`
	ConsumerGroupName *string `thrift:"consumerGroupName,2" json:"consumerGroupName,omitempty"`
}

func NewPurgeDLQForConsumerGroupRequest() *PurgeDLQForConsumerGroupRequest {
	return &PurgeDLQForConsumerGroupRequest{}
}

var PurgeDLQForConsumerGroupRequest_DestinationPath_DEFAULT string

func (p *PurgeDLQForConsumerGroupRequest) GetDestinationPath() string {
	if !p.IsSetDestinationPath() {
		return PurgeDLQForConsumerGroupRequest_DestinationPath_DEFAULT
	}
	return *p.DestinationPath
}

var PurgeDLQForConsumerGroupRequest_ConsumerGroupName_DEFAULT string

func (p *PurgeDLQForConsumerGroupRequest) GetConsumerGroupName() string {
	if !p.IsSetConsumerGroupName() {
		return PurgeDLQForConsumerGroupRequest_ConsumerGroupName_DEFAULT
	}
	return *p.ConsumerGroupName
}
func (p *PurgeDLQForConsumerGroupRequest) IsSetDestinationPath() bool {
	return p.DestinationPath != nil
}

func (p *PurgeDLQForConsumerGroupRequest) IsSetConsumerGroupName() bool {
	return p.ConsumerGroupName != nil
}

func (p *PurgeDLQForConsumerGroupRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PurgeDLQForConsumerGroupRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationPath = &v
	}
	return nil
}

func (p *PurgeDLQForConsumerGroupRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ConsumerGroupName = &v
	}
	return nil
}

func (p *PurgeDLQForConsumerGroupRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PurgeDLQForConsumerGroupRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PurgeDLQForConsumerGroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationPath() {
		if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err)
		}
	}
	return err
}

func (p *PurgeDLQForConsumerGroupRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupName() {
		if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err)
		}
	}
	return err
}

func (p *PurgeDLQForConsumerGroupRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PurgeDLQForConsumerGroupRequest(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
type MergeDLQForConsumerGroupRequest struct {
	DestinationPath   *string `thrift:"destinationPath,1" json:"destinationPath,omitempty"`
	ConsumerGroupName *string `thrift:"consumerGroupName,2" json:"consumerGroupName,omitempty"`
}

func NewMergeDLQForConsumerGroupRequest() *MergeDLQForConsumerGroupRequest {
	return &MergeDLQForConsumerGroupRequest{}
}

var MergeDLQForConsumerGroupRequest_DestinationPath_DEFAULT string

func (p *MergeDLQForConsumerGroupRequest) GetDestinationPath() string {
	if !p.IsSetDestinationPath() {
		return MergeDLQForConsumerGroupRequest_DestinationPath_DEFAULT
	}
	return *p.DestinationPath
}

var MergeDLQForConsumerGroupRequest_ConsumerGroupName_DEFAULT string

func (p *MergeDLQForConsumerGroupRequest) GetConsumerGroupName() string {
	if !p.IsSetConsumerGroupName() {
		return MergeDLQForConsumerGroupRequest_ConsumerGroupName_DEFAULT
	}
	return *p.ConsumerGroupName
}
func (p *MergeDLQForConsumerGroupRequest) IsSetDestinationPath() bool {
	return p.DestinationPath != nil
}

func (p *MergeDLQForConsumerGroupRequest) IsSetConsumerGroupName() bool {
	return p.ConsumerGroupName != nil
}

func (p *MergeDLQForConsumerGroupRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MergeDLQForConsumerGroupRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationPath = &v
	}
	return nil
}

func (p *MergeDLQForConsumerGroupRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ConsumerGroupName = &v
	}
	return nil
}

func (p *MergeDLQForConsumerGroupRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MergeDLQForConsumerGroupRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MergeDLQForConsumerGroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationPath() {
		if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err)
		}
	}
	return err
}

func (p *MergeDLQForConsumerGroupRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupName() {
		if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err)
		}
	}
	return err
}

func (p *MergeDLQForConsumerGroupRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MergeDLQForConsumerGroupRequest(%+v)", *p)
}

// Address of BIn/BOut nodes used by client applications to open direct streams for publishing/consuming messages.
// Publishers are expected to discover HostAddress for all BIn nodes serving a particular destination by calling
// ReadDestinationHosts API on the Frontend and then use the address to directly open a stream to BIn node for
// publishing messages.  Similarly Consumers are expected to discover HostAddress for all BOut nodes serving a
// particular pair of Destination-ConsumerGroup by calling the ReadConsumerGroupHosts API on the Frontend and then
// use the address to directly open a stream to BOut node for consuming messages.
//
//
// Attributes:
//  - Host
//  - Port
type HostAddress struct {
	Host *string `thrift:"host,1" json:"host,omitempty"`
	Port *int32  `thrift:"port,2" json:"port,omitempty"`
}

func NewHostAddress() *HostAddress {
	return &HostAddress{}
}

var HostAddress_Host_DEFAULT string

func (p *HostAddress) GetHost() string {
	if !p.IsSetHost() {
		return HostAddress_Host_DEFAULT
	}
	return *p.Host
}

var HostAddress_Port_DEFAULT int32

func (p *HostAddress) GetPort() int32 {
	if !p.IsSetPort() {
		return HostAddress_Port_DEFAULT
	}
	return *p.Port
}
func (p *HostAddress) IsSetHost() bool {
	return p.Host != nil
}

func (p *HostAddress) IsSetPort() bool {
	return p.Port != nil
}

func (p *HostAddress) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HostAddress) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Host = &v
	}
	return nil
}

func (p *HostAddress) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Port = &v
	}
	return nil
}

func (p *HostAddress) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HostAddress"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HostAddress) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHost() {
		if err := oprot.WriteFieldBegin("host", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Host)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.host (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err)
		}
	}
	return err
}

func (p *HostAddress) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPort() {
		if err := oprot.WriteFieldBegin("port", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:port: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Port)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.port (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:port: ", p), err)
		}
	}
	return err
}

func (p *HostAddress) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HostAddress(%+v)", *p)
}

// Attributes:
//  - HostAddresses
//  - Protocol
//  - Deprecated
type HostProtocol struct {
	// unused fields # 1 to 9
	HostAddresses []*HostAddress `thrift:"hostAddresses,10" json:"hostAddresses,omitempty"`
	// unused fields # 11 to 19
	Protocol *Protocol `thrift:"protocol,20" json:"protocol,omitempty"`
	// unused fields # 21 to 29
	Deprecated *bool `thrift:"deprecated,30" json:"deprecated,omitempty"`
}

func NewHostProtocol() *HostProtocol {
	return &HostProtocol{}
}

var HostProtocol_HostAddresses_DEFAULT []*HostAddress

func (p *HostProtocol) GetHostAddresses() []*HostAddress {
	return p.HostAddresses
}

var HostProtocol_Protocol_DEFAULT Protocol

func (p *HostProtocol) GetProtocol() Protocol {
	if !p.IsSetProtocol() {
		return HostProtocol_Protocol_DEFAULT
	}
	return *p.Protocol
}

var HostProtocol_Deprecated_DEFAULT bool

func (p *HostProtocol) GetDeprecated() bool {
	if !p.IsSetDeprecated() {
		return HostProtocol_Deprecated_DEFAULT
	}
	return *p.Deprecated
}
func (p *HostProtocol) IsSetHostAddresses() bool {
	return p.HostAddresses != nil
}

func (p *HostProtocol) IsSetProtocol() bool {
	return p.Protocol != nil
}

func (p *HostProtocol) IsSetDeprecated() bool {
	return p.Deprecated != nil
}

func (p *HostProtocol) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 30:
			if err := p.readField30(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HostProtocol) readField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*HostAddress, 0, size)
	p.HostAddresses = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &HostAddress{}
		if err := _elem4.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
		}
		p.HostAddresses = append(p.HostAddresses, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HostProtocol) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		temp := Protocol(v)
		p.Protocol = &temp
	}
	return nil
}

func (p *HostProtocol) readField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.Deprecated = &v
	}
	return nil
}

func (p *HostProtocol) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HostProtocol"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField30(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HostProtocol) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostAddresses() {
		if err := oprot.WriteFieldBegin("hostAddresses", thrift.LIST, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:hostAddresses: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HostAddresses)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.HostAddresses {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:hostAddresses: ", p), err)
		}
	}
	return err
}

func (p *HostProtocol) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetProtocol() {
		if err := oprot.WriteFieldBegin("protocol", thrift.I32, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:protocol: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Protocol)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.protocol (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:protocol: ", p), err)
		}
	}
	return err
}

func (p *HostProtocol) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeprecated() {
		if err := oprot.WriteFieldBegin("deprecated", thrift.BOOL, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:deprecated: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Deprecated)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.deprecated (30) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:deprecated: ", p), err)
		}
	}
	return err
}

func (p *HostProtocol) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HostProtocol(%+v)", *p)
}

// Attributes:
//  - Path
type ReadDestinationHostsRequest struct {
	Path *string `thrift:"path,1" json:"path,omitempty"`
}

func NewReadDestinationHostsRequest() *ReadDestinationHostsRequest {
	return &ReadDestinationHostsRequest{}
}

var ReadDestinationHostsRequest_Path_DEFAULT string

func (p *ReadDestinationHostsRequest) GetPath() string {
	if !p.IsSetPath() {
		return ReadDestinationHostsRequest_Path_DEFAULT
	}
	return *p.Path
}
func (p *ReadDestinationHostsRequest) IsSetPath() bool {
	return p.Path != nil
}

func (p *ReadDestinationHostsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadDestinationHostsRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = &v
	}
	return nil
}

func (p *ReadDestinationHostsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadDestinationHostsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadDestinationHostsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPath() {
		if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Path)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
		}
	}
	return err
}

func (p *ReadDestinationHostsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadDestinationHostsRequest(%+v)", *p)
}

// Attributes:
//  - HostAddresses
//  - HostProtocols
type ReadDestinationHostsResult_ struct {
	HostAddresses []*HostAddress `thrift:"hostAddresses,1" json:"hostAddresses,omitempty"`
	// unused fields # 2 to 9
	HostProtocols []*HostProtocol `thrift:"hostProtocols,10" json:"hostProtocols,omitempty"`
}

func NewReadDestinationHostsResult_() *ReadDestinationHostsResult_ {
	return &ReadDestinationHostsResult_{}
}

var ReadDestinationHostsResult__HostAddresses_DEFAULT []*HostAddress

func (p *ReadDestinationHostsResult_) GetHostAddresses() []*HostAddress {
	return p.HostAddresses
}

var ReadDestinationHostsResult__HostProtocols_DEFAULT []*HostProtocol

func (p *ReadDestinationHostsResult_) GetHostProtocols() []*HostProtocol {
	return p.HostProtocols
}
func (p *ReadDestinationHostsResult_) IsSetHostAddresses() bool {
	return p.HostAddresses != nil
}

func (p *ReadDestinationHostsResult_) IsSetHostProtocols() bool {
	return p.HostProtocols != nil
}

func (p *ReadDestinationHostsResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadDestinationHostsResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*HostAddress, 0, size)
	p.HostAddresses = tSlice
	for i := 0; i < size; i++ {
		_elem5 := &HostAddress{}
		if err := _elem5.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
		}
		p.HostAddresses = append(p.HostAddresses, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ReadDestinationHostsResult_) readField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*HostProtocol, 0, size)
	p.HostProtocols = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &HostProtocol{}
		if err := _elem6.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
		}
		p.HostProtocols = append(p.HostProtocols, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ReadDestinationHostsResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadDestinationHostsResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadDestinationHostsResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostAddresses() {
		if err := oprot.WriteFieldBegin("hostAddresses", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostAddresses: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HostAddresses)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.HostAddresses {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostAddresses: ", p), err)
		}
	}
	return err
}

func (p *ReadDestinationHostsResult_) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostProtocols() {
		if err := oprot.WriteFieldBegin("hostProtocols", thrift.LIST, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:hostProtocols: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HostProtocols)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.HostProtocols {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:hostProtocols: ", p), err)
		}
	}
	return err
}

func (p *ReadDestinationHostsResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadDestinationHostsResult_(%+v)", *p)
}

// Attributes:
//  - Path
//  - SchemaVersion
type ReadPublisherOptionsRequest struct {
	Path          *string `thrift:"path,1" json:"path,omitempty"`
	SchemaVersion *int32  `thrift:"schema_version,2" json:"schema_version,omitempty"`
}

func NewReadPublisherOptionsRequest() *ReadPublisherOptionsRequest {
	return &ReadPublisherOptionsRequest{}
}

var ReadPublisherOptionsRequest_Path_DEFAULT string

func (p *ReadPublisherOptionsRequest) GetPath() string {
	if !p.IsSetPath() {
		return ReadPublisherOptionsRequest_Path_DEFAULT
	}
	return *p.Path
}

var ReadPublisherOptionsRequest_SchemaVersion_DEFAULT int32

func (p *ReadPublisherOptionsRequest) GetSchemaVersion() int32 {
	if !p.IsSetSchemaVersion() {
		return ReadPublisherOptionsRequest_SchemaVersion_DEFAULT
	}
	return *p.SchemaVersion
}
func (p *ReadPublisherOptionsRequest) IsSetPath() bool {
	return p.Path != nil
}

func (p *ReadPublisherOptionsRequest) IsSetSchemaVersion() bool {
	return p.SchemaVersion != nil
}

func (p *ReadPublisherOptionsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadPublisherOptionsRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = &v
	}
	return nil
}

func (p *ReadPublisherOptionsRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SchemaVersion = &v
	}
	return nil
}

func (p *ReadPublisherOptionsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadPublisherOptionsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadPublisherOptionsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPath() {
		if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Path)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
		}
	}
	return err
}

func (p *ReadPublisherOptionsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchemaVersion() {
		if err := oprot.WriteFieldBegin("schema_version", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:schema_version: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.SchemaVersion)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.schema_version (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:schema_version: ", p), err)
		}
	}
	return err
}

func (p *ReadPublisherOptionsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadPublisherOptionsRequest(%+v)", *p)
}

// Attributes:
//  - HostAddresses
//  - HostProtocols
//  - ChecksumOption
//  - SchemaInfo
type ReadPublisherOptionsResult_ struct {
	HostAddresses []*HostAddress `thrift:"hostAddresses,1" json:"hostAddresses,omitempty"`
	// unused fields # 2 to 9
	HostProtocols []*HostProtocol `thrift:"hostProtocols,10" json:"hostProtocols,omitempty"`
	// unused fields # 11 to 19
	ChecksumOption *ChecksumOption `thrift:"checksumOption,20" json:"checksumOption,omitempty"`
	// unused fields # 21 to 30
	SchemaInfo *SchemaInfo `thrift:"schemaInfo,31" json:"schemaInfo,omitempty"`
}

func NewReadPublisherOptionsResult_() *ReadPublisherOptionsResult_ {
	return &ReadPublisherOptionsResult_{}
}

var ReadPublisherOptionsResult__HostAddresses_DEFAULT []*HostAddress

func (p *ReadPublisherOptionsResult_) GetHostAddresses() []*HostAddress {
	return p.HostAddresses
}

var ReadPublisherOptionsResult__HostProtocols_DEFAULT []*HostProtocol

func (p *ReadPublisherOptionsResult_) GetHostProtocols() []*HostProtocol {
	return p.HostProtocols
}

var ReadPublisherOptionsResult__ChecksumOption_DEFAULT ChecksumOption

func (p *ReadPublisherOptionsResult_) GetChecksumOption() ChecksumOption {
	if !p.IsSetChecksumOption() {
		return ReadPublisherOptionsResult__ChecksumOption_DEFAULT
	}
	return *p.ChecksumOption
}

var ReadPublisherOptionsResult__SchemaInfo_DEFAULT *SchemaInfo

func (p *ReadPublisherOptionsResult_) GetSchemaInfo() *SchemaInfo {
	if !p.IsSetSchemaInfo() {
		return ReadPublisherOptionsResult__SchemaInfo_DEFAULT
	}
	return p.SchemaInfo
}
func (p *ReadPublisherOptionsResult_) IsSetHostAddresses() bool {
	return p.HostAddresses != nil
}

func (p *ReadPublisherOptionsResult_) IsSetHostProtocols() bool {
	return p.HostProtocols != nil
}

func (p *ReadPublisherOptionsResult_) IsSetChecksumOption() bool {
	return p.ChecksumOption != nil
}

func (p *ReadPublisherOptionsResult_) IsSetSchemaInfo() bool {
	return p.SchemaInfo != nil
}

func (p *ReadPublisherOptionsResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 31:
			if err := p.readField31(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadPublisherOptionsResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*HostAddress, 0, size)
	p.HostAddresses = tSlice
	for i := 0; i < size; i++ {
		_elem7 := &HostAddress{}
		if err := _elem7.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
		}
		p.HostAddresses = append(p.HostAddresses, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ReadPublisherOptionsResult_) readField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*HostProtocol, 0, size)
	p.HostProtocols = tSlice
	for i := 0; i < size; i++ {
		_elem8 := &HostProtocol{}
		if err := _elem8.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
		}
		p.HostProtocols = append(p.HostProtocols, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ReadPublisherOptionsResult_) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		temp := ChecksumOption(v)
		p.ChecksumOption = &temp
	}
	return nil
}

func (p *ReadPublisherOptionsResult_) readField31(iprot thrift.TProtocol) error {
	p.SchemaInfo = &SchemaInfo{}
	if err := p.SchemaInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaInfo), err)
	}
	return nil
}

func (p *ReadPublisherOptionsResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadPublisherOptionsResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField31(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadPublisherOptionsResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostAddresses() {
		if err := oprot.WriteFieldBegin("hostAddresses", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostAddresses: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HostAddresses)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.HostAddresses {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostAddresses: ", p), err)
		}
	}
	return err
}

func (p *ReadPublisherOptionsResult_) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostProtocols() {
		if err := oprot.WriteFieldBegin("hostProtocols", thrift.LIST, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:hostProtocols: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HostProtocols)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.HostProtocols {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:hostProtocols: ", p), err)
		}
	}
	return err
}

func (p *ReadPublisherOptionsResult_) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetChecksumOption() {
		if err := oprot.WriteFieldBegin("checksumOption", thrift.I32, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:checksumOption: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ChecksumOption)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.checksumOption (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:checksumOption: ", p), err)
		}
	}
	return err
}

func (p *ReadPublisherOptionsResult_) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchemaInfo() {
		if err := oprot.WriteFieldBegin("schemaInfo", thrift.STRUCT, 31); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:schemaInfo: ", p), err)
		}
		if err := p.SchemaInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 31:schemaInfo: ", p), err)
		}
	}
	return err
}

func (p *ReadPublisherOptionsResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadPublisherOptionsResult_(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
type ReadConsumerGroupHostsRequest struct {
	DestinationPath   *string `thrift:"destinationPath,1" json:"destinationPath,omitempty"`
	ConsumerGroupName *string `thrift:"consumerGroupName,2" json:"consumerGroupName,omitempty"`
}

func NewReadConsumerGroupHostsRequest() *ReadConsumerGroupHostsRequest {
	return &ReadConsumerGroupHostsRequest{}
}

var ReadConsumerGroupHostsRequest_DestinationPath_DEFAULT string

func (p *ReadConsumerGroupHostsRequest) GetDestinationPath() string {
	if !p.IsSetDestinationPath() {
		return ReadConsumerGroupHostsRequest_DestinationPath_DEFAULT
	}
	return *p.DestinationPath
}

var ReadConsumerGroupHostsRequest_ConsumerGroupName_DEFAULT string

func (p *ReadConsumerGroupHostsRequest) GetConsumerGroupName() string {
	if !p.IsSetConsumerGroupName() {
		return ReadConsumerGroupHostsRequest_ConsumerGroupName_DEFAULT
	}
	return *p.ConsumerGroupName
}
func (p *ReadConsumerGroupHostsRequest) IsSetDestinationPath() bool {
	return p.DestinationPath != nil
}

func (p *ReadConsumerGroupHostsRequest) IsSetConsumerGroupName() bool {
	return p.ConsumerGroupName != nil
}

func (p *ReadConsumerGroupHostsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadConsumerGroupHostsRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationPath = &v
	}
	return nil
}

func (p *ReadConsumerGroupHostsRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ConsumerGroupName = &v
	}
	return nil
}

func (p *ReadConsumerGroupHostsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadConsumerGroupHostsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadConsumerGroupHostsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationPath() {
		if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupHostsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupName() {
		if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupHostsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadConsumerGroupHostsRequest(%+v)", *p)
}

// Attributes:
//  - HostAddresses
//  - HostProtocols
type ReadConsumerGroupHostsResult_ struct {
	HostAddresses []*HostAddress `thrift:"hostAddresses,1" json:"hostAddresses,omitempty"`
	// unused fields # 2 to 9
	HostProtocols []*HostProtocol `thrift:"hostProtocols,10" json:"hostProtocols,omitempty"`
}

func NewReadConsumerGroupHostsResult_() *ReadConsumerGroupHostsResult_ {
	return &ReadConsumerGroupHostsResult_{}
}

var ReadConsumerGroupHostsResult__HostAddresses_DEFAULT []*HostAddress

func (p *ReadConsumerGroupHostsResult_) GetHostAddresses() []*HostAddress {
	return p.HostAddresses
}

var ReadConsumerGroupHostsResult__HostProtocols_DEFAULT []*HostProtocol

func (p *ReadConsumerGroupHostsResult_) GetHostProtocols() []*HostProtocol {
	return p.HostProtocols
}
func (p *ReadConsumerGroupHostsResult_) IsSetHostAddresses() bool {
	return p.HostAddresses != nil
}

func (p *ReadConsumerGroupHostsResult_) IsSetHostProtocols() bool {
	return p.HostProtocols != nil
}

func (p *ReadConsumerGroupHostsResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadConsumerGroupHostsResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*HostAddress, 0, size)
	p.HostAddresses = tSlice
	for i := 0; i < size; i++ {
		_elem9 := &HostAddress{}
		if err := _elem9.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
		}
		p.HostAddresses = append(p.HostAddresses, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ReadConsumerGroupHostsResult_) readField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*HostProtocol, 0, size)
	p.HostProtocols = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &HostProtocol{}
		if err := _elem10.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
		}
		p.HostProtocols = append(p.HostProtocols, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ReadConsumerGroupHostsResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadConsumerGroupHostsResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadConsumerGroupHostsResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostAddresses() {
		if err := oprot.WriteFieldBegin("hostAddresses", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostAddresses: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HostAddresses)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.HostAddresses {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostAddresses: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupHostsResult_) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostProtocols() {
		if err := oprot.WriteFieldBegin("hostProtocols", thrift.LIST, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:hostProtocols: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HostProtocols)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.HostProtocols {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:hostProtocols: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupHostsResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadConsumerGroupHostsResult_(%+v)", *p)
}

// Attributes:
//  - ID
//  - DelayMessageInSeconds
//  - Data
//  - UserContext
//  - PreviousMessageId
//  - Crc32IEEEDataChecksum
//  - Md5DataChecksum
//  - SchemaVersion
type PutMessage struct {
	ID                    *string           `thrift:"id,1" json:"id,omitempty"`
	DelayMessageInSeconds *int32            `thrift:"delayMessageInSeconds,2" json:"delayMessageInSeconds,omitempty"`
	Data                  []byte            `thrift:"data,3" json:"data,omitempty"`
	UserContext           map[string]string `thrift:"userContext,4" json:"userContext,omitempty"`
	PreviousMessageId     *string           `thrift:"previousMessageId,5" json:"previousMessageId,omitempty"`
	Crc32IEEEDataChecksum *int64            `thrift:"crc32IEEEDataChecksum,6" json:"crc32IEEEDataChecksum,omitempty"`
	// unused field # 7
	Md5DataChecksum []byte `thrift:"md5DataChecksum,8" json:"md5DataChecksum,omitempty"`
	// unused field # 9
	SchemaVersion *int32 `thrift:"schemaVersion,10" json:"schemaVersion,omitempty"`
}

func NewPutMessage() *PutMessage {
	return &PutMessage{}
}

var PutMessage_ID_DEFAULT string

func (p *PutMessage) GetID() string {
	if !p.IsSetID() {
		return PutMessage_ID_DEFAULT
	}
	return *p.ID
}

var PutMessage_DelayMessageInSeconds_DEFAULT int32

func (p *PutMessage) GetDelayMessageInSeconds() int32 {
	if !p.IsSetDelayMessageInSeconds() {
		return PutMessage_DelayMessageInSeconds_DEFAULT
	}
	return *p.DelayMessageInSeconds
}

var PutMessage_Data_DEFAULT []byte

func (p *PutMessage) GetData() []byte {
	return p.Data
}

var PutMessage_UserContext_DEFAULT map[string]string

func (p *PutMessage) GetUserContext() map[string]string {
	return p.UserContext
}

var PutMessage_PreviousMessageId_DEFAULT string

func (p *PutMessage) GetPreviousMessageId() string {
	if !p.IsSetPreviousMessageId() {
		return PutMessage_PreviousMessageId_DEFAULT
	}
	return *p.PreviousMessageId
}

var PutMessage_Crc32IEEEDataChecksum_DEFAULT int64

func (p *PutMessage) GetCrc32IEEEDataChecksum() int64 {
	if !p.IsSetCrc32IEEEDataChecksum() {
		return PutMessage_Crc32IEEEDataChecksum_DEFAULT
	}
	return *p.Crc32IEEEDataChecksum
}

var PutMessage_Md5DataChecksum_DEFAULT []byte

func (p *PutMessage) GetMd5DataChecksum() []byte {
	return p.Md5DataChecksum
}

var PutMessage_SchemaVersion_DEFAULT int32

func (p *PutMessage) GetSchemaVersion() int32 {
	if !p.IsSetSchemaVersion() {
		return PutMessage_SchemaVersion_DEFAULT
	}
	return *p.SchemaVersion
}
func (p *PutMessage) IsSetID() bool {
	return p.ID != nil
}

func (p *PutMessage) IsSetDelayMessageInSeconds() bool {
	return p.DelayMessageInSeconds != nil
}

func (p *PutMessage) IsSetData() bool {
	return p.Data != nil
}

func (p *PutMessage) IsSetUserContext() bool {
	return p.UserContext != nil
}

func (p *PutMessage) IsSetPreviousMessageId() bool {
	return p.PreviousMessageId != nil
}

func (p *PutMessage) IsSetCrc32IEEEDataChecksum() bool {
	return p.Crc32IEEEDataChecksum != nil
}

func (p *PutMessage) IsSetMd5DataChecksum() bool {
	return p.Md5DataChecksum != nil
}

func (p *PutMessage) IsSetSchemaVersion() bool {
	return p.SchemaVersion != nil
}

func (p *PutMessage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PutMessage) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = &v
	}
	return nil
}

func (p *PutMessage) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DelayMessageInSeconds = &v
	}
	return nil
}

func (p *PutMessage) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Data = v
	}
	return nil
}

func (p *PutMessage) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.UserContext = tMap
	for i := 0; i < size; i++ {
		var _key11 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key11 = v
		}
		var _val12 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val12 = v
		}
		p.UserContext[_key11] = _val12
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *PutMessage) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.PreviousMessageId = &v
	}
	return nil
}

func (p *PutMessage) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Crc32IEEEDataChecksum = &v
	}
	return nil
}

func (p *PutMessage) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Md5DataChecksum = v
	}
	return nil
}

func (p *PutMessage) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.SchemaVersion = &v
	}
	return nil
}

func (p *PutMessage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PutMessage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PutMessage) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
		}
	}
	return err
}

func (p *PutMessage) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDelayMessageInSeconds() {
		if err := oprot.WriteFieldBegin("delayMessageInSeconds", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:delayMessageInSeconds: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.DelayMessageInSeconds)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.delayMessageInSeconds (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:delayMessageInSeconds: ", p), err)
		}
	}
	return err
}

func (p *PutMessage) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err := oprot.WriteFieldBegin("data", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err)
		}
		if err := oprot.WriteBinary(p.Data); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.data (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err)
		}
	}
	return err
}

func (p *PutMessage) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserContext() {
		if err := oprot.WriteFieldBegin("userContext", thrift.MAP, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userContext: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.UserContext)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.UserContext {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userContext: ", p), err)
		}
	}
	return err
}

func (p *PutMessage) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPreviousMessageId() {
		if err := oprot.WriteFieldBegin("previousMessageId", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:previousMessageId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PreviousMessageId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.previousMessageId (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:previousMessageId: ", p), err)
		}
	}
	return err
}

func (p *PutMessage) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCrc32IEEEDataChecksum() {
		if err := oprot.WriteFieldBegin("crc32IEEEDataChecksum", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:crc32IEEEDataChecksum: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Crc32IEEEDataChecksum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.crc32IEEEDataChecksum (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:crc32IEEEDataChecksum: ", p), err)
		}
	}
	return err
}

func (p *PutMessage) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMd5DataChecksum() {
		if err := oprot.WriteFieldBegin("md5DataChecksum", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:md5DataChecksum: ", p), err)
		}
		if err := oprot.WriteBinary(p.Md5DataChecksum); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.md5DataChecksum (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:md5DataChecksum: ", p), err)
		}
	}
	return err
}

func (p *PutMessage) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchemaVersion() {
		if err := oprot.WriteFieldBegin("schemaVersion", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:schemaVersion: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.SchemaVersion)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.schemaVersion (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:schemaVersion: ", p), err)
		}
	}
	return err
}

func (p *PutMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PutMessage(%+v)", *p)
}

// Attributes:
//  - ID
//  - Status
//  - Message
//  - Receipt
//  - UserContext
//  - Lsn
//  - Address
type PutMessageAck struct {
	ID          *string           `thrift:"id,1" json:"id,omitempty"`
	Status      *Status           `thrift:"status,2" json:"status,omitempty"`
	Message     *string           `thrift:"message,3" json:"message,omitempty"`
	Receipt     *string           `thrift:"receipt,4" json:"receipt,omitempty"`
	UserContext map[string]string `thrift:"userContext,5" json:"userContext,omitempty"`
	Lsn         *int64            `thrift:"lsn,6" json:"lsn,omitempty"`
	Address     *int64            `thrift:"address,7" json:"address,omitempty"`
}

func NewPutMessageAck() *PutMessageAck {
	return &PutMessageAck{}
}

var PutMessageAck_ID_DEFAULT string

func (p *PutMessageAck) GetID() string {
	if !p.IsSetID() {
		return PutMessageAck_ID_DEFAULT
	}
	return *p.ID
}

var PutMessageAck_Status_DEFAULT Status

func (p *PutMessageAck) GetStatus() Status {
	if !p.IsSetStatus() {
		return PutMessageAck_Status_DEFAULT
	}
	return *p.Status
}

var PutMessageAck_Message_DEFAULT string

func (p *PutMessageAck) GetMessage() string {
	if !p.IsSetMessage() {
		return PutMessageAck_Message_DEFAULT
	}
	return *p.Message
}

var PutMessageAck_Receipt_DEFAULT string

func (p *PutMessageAck) GetReceipt() string {
	if !p.IsSetReceipt() {
		return PutMessageAck_Receipt_DEFAULT
	}
	return *p.Receipt
}

var PutMessageAck_UserContext_DEFAULT map[string]string

func (p *PutMessageAck) GetUserContext() map[string]string {
	return p.UserContext
}

var PutMessageAck_Lsn_DEFAULT int64

func (p *PutMessageAck) GetLsn() int64 {
	if !p.IsSetLsn() {
		return PutMessageAck_Lsn_DEFAULT
	}
	return *p.Lsn
}

var PutMessageAck_Address_DEFAULT int64

func (p *PutMessageAck) GetAddress() int64 {
	if !p.IsSetAddress() {
		return PutMessageAck_Address_DEFAULT
	}
	return *p.Address
}
func (p *PutMessageAck) IsSetID() bool {
	return p.ID != nil
}

func (p *PutMessageAck) IsSetStatus() bool {
	return p.Status != nil
}

func (p *PutMessageAck) IsSetMessage() bool {
	return p.Message != nil
}

func (p *PutMessageAck) IsSetReceipt() bool {
	return p.Receipt != nil
}

func (p *PutMessageAck) IsSetUserContext() bool {
	return p.UserContext != nil
}

func (p *PutMessageAck) IsSetLsn() bool {
	return p.Lsn != nil
}

func (p *PutMessageAck) IsSetAddress() bool {
	return p.Address != nil
}

func (p *PutMessageAck) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PutMessageAck) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = &v
	}
	return nil
}

func (p *PutMessageAck) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Status(v)
		p.Status = &temp
	}
	return nil
}

func (p *PutMessageAck) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *PutMessageAck) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Receipt = &v
	}
	return nil
}

func (p *PutMessageAck) readField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.UserContext = tMap
	for i := 0; i < size; i++ {
		var _key13 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key13 = v
		}
		var _val14 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val14 = v
		}
		p.UserContext[_key13] = _val14
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *PutMessageAck) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Lsn = &v
	}
	return nil
}

func (p *PutMessageAck) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Address = &v
	}
	return nil
}

func (p *PutMessageAck) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PutMessageAck"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PutMessageAck) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
		}
	}
	return err
}

func (p *PutMessageAck) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err)
		}
	}
	return err
}

func (p *PutMessageAck) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err)
		}
	}
	return err
}

func (p *PutMessageAck) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetReceipt() {
		if err := oprot.WriteFieldBegin("receipt", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:receipt: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Receipt)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.receipt (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:receipt: ", p), err)
		}
	}
	return err
}

func (p *PutMessageAck) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserContext() {
		if err := oprot.WriteFieldBegin("userContext", thrift.MAP, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:userContext: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.UserContext)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.UserContext {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:userContext: ", p), err)
		}
	}
	return err
}

func (p *PutMessageAck) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLsn() {
		if err := oprot.WriteFieldBegin("lsn", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lsn: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Lsn)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lsn (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lsn: ", p), err)
		}
	}
	return err
}

func (p *PutMessageAck) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddress() {
		if err := oprot.WriteFieldBegin("address", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:address: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Address)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.address (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:address: ", p), err)
		}
	}
	return err
}

func (p *PutMessageAck) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PutMessageAck(%+v)", *p)
}

// Attributes:
//  - Message
//  - AckIds
//  - NackIds
type InvalidAckIdError struct {
	Message string   `thrift:"message,1,required" json:"message"`
	AckIds  []string `thrift:"ackIds,2" json:"ackIds,omitempty"`
	NackIds []string `thrift:"nackIds,3" json:"nackIds,omitempty"`
}

func NewInvalidAckIdError() *InvalidAckIdError {
	return &InvalidAckIdError{}
}

func (p *InvalidAckIdError) GetMessage() string {
	return p.Message
}

var InvalidAckIdError_AckIds_DEFAULT []string

func (p *InvalidAckIdError) GetAckIds() []string {
	return p.AckIds
}

var InvalidAckIdError_NackIds_DEFAULT []string

func (p *InvalidAckIdError) GetNackIds() []string {
	return p.NackIds
}
func (p *InvalidAckIdError) IsSetAckIds() bool {
	return p.AckIds != nil
}

func (p *InvalidAckIdError) IsSetNackIds() bool {
	return p.NackIds != nil
}

func (p *InvalidAckIdError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMessage bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetMessage = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMessage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"))
	}
	return nil
}

func (p *InvalidAckIdError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *InvalidAckIdError) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.AckIds = tSlice
	for i := 0; i < size; i++ {
		var _elem15 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem15 = v
		}
		p.AckIds = append(p.AckIds, _elem15)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InvalidAckIdError) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.NackIds = tSlice
	for i := 0; i < size; i++ {
		var _elem16 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem16 = v
		}
		p.NackIds = append(p.NackIds, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InvalidAckIdError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InvalidAckIdError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InvalidAckIdError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *InvalidAckIdError) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAckIds() {
		if err := oprot.WriteFieldBegin("ackIds", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ackIds: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.AckIds)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.AckIds {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ackIds: ", p), err)
		}
	}
	return err
}

func (p *InvalidAckIdError) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNackIds() {
		if err := oprot.WriteFieldBegin("nackIds", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nackIds: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.NackIds)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.NackIds {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nackIds: ", p), err)
		}
	}
	return err
}

func (p *InvalidAckIdError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidAckIdError(%+v)", *p)
}

func (p *InvalidAckIdError) Error() string {
	return p.String()
}

// Attributes:
//  - EnqueueTimeUtc
//  - AckId
//  - Payload
//  - Lsn
//  - Address
type ConsumerMessage struct {
	EnqueueTimeUtc *int64      `thrift:"enqueueTimeUtc,1" json:"enqueueTimeUtc,omitempty"`
	AckId          *string     `thrift:"ackId,2" json:"ackId,omitempty"`
	Payload        *PutMessage `thrift:"payload,3" json:"payload,omitempty"`
	Lsn            *int64      `thrift:"lsn,4" json:"lsn,omitempty"`
	Address        *int64      `thrift:"address,5" json:"address,omitempty"`
}

func NewConsumerMessage() *ConsumerMessage {
	return &ConsumerMessage{}
}

var ConsumerMessage_EnqueueTimeUtc_DEFAULT int64

func (p *ConsumerMessage) GetEnqueueTimeUtc() int64 {
	if !p.IsSetEnqueueTimeUtc() {
		return ConsumerMessage_EnqueueTimeUtc_DEFAULT
	}
	return *p.EnqueueTimeUtc
}

var ConsumerMessage_AckId_DEFAULT string

func (p *ConsumerMessage) GetAckId() string {
	if !p.IsSetAckId() {
		return ConsumerMessage_AckId_DEFAULT
	}
	return *p.AckId
}

var ConsumerMessage_Payload_DEFAULT *PutMessage

func (p *ConsumerMessage) GetPayload() *PutMessage {
	if !p.IsSetPayload() {
		return ConsumerMessage_Payload_DEFAULT
	}
	return p.Payload
}

var ConsumerMessage_Lsn_DEFAULT int64

func (p *ConsumerMessage) GetLsn() int64 {
	if !p.IsSetLsn() {
		return ConsumerMessage_Lsn_DEFAULT
	}
	return *p.Lsn
}

var ConsumerMessage_Address_DEFAULT int64

func (p *ConsumerMessage) GetAddress() int64 {
	if !p.IsSetAddress() {
		return ConsumerMessage_Address_DEFAULT
	}
	return *p.Address
}
func (p *ConsumerMessage) IsSetEnqueueTimeUtc() bool {
	return p.EnqueueTimeUtc != nil
}

func (p *ConsumerMessage) IsSetAckId() bool {
	return p.AckId != nil
}

func (p *ConsumerMessage) IsSetPayload() bool {
	return p.Payload != nil
}

func (p *ConsumerMessage) IsSetLsn() bool {
	return p.Lsn != nil
}

func (p *ConsumerMessage) IsSetAddress() bool {
	return p.Address != nil
}

func (p *ConsumerMessage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConsumerMessage) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.EnqueueTimeUtc = &v
	}
	return nil
}

func (p *ConsumerMessage) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AckId = &v
	}
	return nil
}

func (p *ConsumerMessage) readField3(iprot thrift.TProtocol) error {
	p.Payload = &PutMessage{}
	if err := p.Payload.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Payload), err)
	}
	return nil
}

func (p *ConsumerMessage) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Lsn = &v
	}
	return nil
}

func (p *ConsumerMessage) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Address = &v
	}
	return nil
}

func (p *ConsumerMessage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConsumerMessage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ConsumerMessage) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnqueueTimeUtc() {
		if err := oprot.WriteFieldBegin("enqueueTimeUtc", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:enqueueTimeUtc: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.EnqueueTimeUtc)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.enqueueTimeUtc (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:enqueueTimeUtc: ", p), err)
		}
	}
	return err
}

func (p *ConsumerMessage) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAckId() {
		if err := oprot.WriteFieldBegin("ackId", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ackId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AckId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ackId (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ackId: ", p), err)
		}
	}
	return err
}

func (p *ConsumerMessage) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPayload() {
		if err := oprot.WriteFieldBegin("payload", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:payload: ", p), err)
		}
		if err := p.Payload.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Payload), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:payload: ", p), err)
		}
	}
	return err
}

func (p *ConsumerMessage) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLsn() {
		if err := oprot.WriteFieldBegin("lsn", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lsn: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Lsn)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lsn (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lsn: ", p), err)
		}
	}
	return err
}

func (p *ConsumerMessage) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddress() {
		if err := oprot.WriteFieldBegin("address", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:address: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Address)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.address (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:address: ", p), err)
		}
	}
	return err
}

func (p *ConsumerMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConsumerMessage(%+v)", *p)
}

// Attributes:
//  - AckIds
//  - NackIds
type AckMessagesRequest struct {
	AckIds  []string `thrift:"ackIds,1" json:"ackIds,omitempty"`
	NackIds []string `thrift:"nackIds,2" json:"nackIds,omitempty"`
}

func NewAckMessagesRequest() *AckMessagesRequest {
	return &AckMessagesRequest{}
}

var AckMessagesRequest_AckIds_DEFAULT []string

func (p *AckMessagesRequest) GetAckIds() []string {
	return p.AckIds
}

var AckMessagesRequest_NackIds_DEFAULT []string

func (p *AckMessagesRequest) GetNackIds() []string {
	return p.NackIds
}
func (p *AckMessagesRequest) IsSetAckIds() bool {
	return p.AckIds != nil
}

func (p *AckMessagesRequest) IsSetNackIds() bool {
	return p.NackIds != nil
}

func (p *AckMessagesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AckMessagesRequest) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.AckIds = tSlice
	for i := 0; i < size; i++ {
		var _elem17 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem17 = v
		}
		p.AckIds = append(p.AckIds, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AckMessagesRequest) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.NackIds = tSlice
	for i := 0; i < size; i++ {
		var _elem18 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem18 = v
		}
		p.NackIds = append(p.NackIds, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AckMessagesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AckMessagesRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AckMessagesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAckIds() {
		if err := oprot.WriteFieldBegin("ackIds", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ackIds: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.AckIds)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.AckIds {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ackIds: ", p), err)
		}
	}
	return err
}

func (p *AckMessagesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNackIds() {
		if err := oprot.WriteFieldBegin("nackIds", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nackIds: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.NackIds)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.NackIds {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nackIds: ", p), err)
		}
	}
	return err
}

func (p *AckMessagesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AckMessagesRequest(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
//  - AddressInclusive
type SetConsumedMessagesRequest struct {
	DestinationPath   *string `thrift:"destinationPath,1" json:"destinationPath,omitempty"`
	ConsumerGroupName *string `thrift:"consumerGroupName,2" json:"consumerGroupName,omitempty"`
	AddressInclusive  *int64  `thrift:"addressInclusive,3" json:"addressInclusive,omitempty"`
}

func NewSetConsumedMessagesRequest() *SetConsumedMessagesRequest {
	return &SetConsumedMessagesRequest{}
}

var SetConsumedMessagesRequest_DestinationPath_DEFAULT string

func (p *SetConsumedMessagesRequest) GetDestinationPath() string {
	if !p.IsSetDestinationPath() {
		return SetConsumedMessagesRequest_DestinationPath_DEFAULT
	}
	return *p.DestinationPath
}

var SetConsumedMessagesRequest_ConsumerGroupName_DEFAULT string

func (p *SetConsumedMessagesRequest) GetConsumerGroupName() string {
	if !p.IsSetConsumerGroupName() {
		return SetConsumedMessagesRequest_ConsumerGroupName_DEFAULT
	}
	return *p.ConsumerGroupName
}

var SetConsumedMessagesRequest_AddressInclusive_DEFAULT int64

func (p *SetConsumedMessagesRequest) GetAddressInclusive() int64 {
	if !p.IsSetAddressInclusive() {
		return SetConsumedMessagesRequest_AddressInclusive_DEFAULT
	}
	return *p.AddressInclusive
}
func (p *SetConsumedMessagesRequest) IsSetDestinationPath() bool {
	return p.DestinationPath != nil
}

func (p *SetConsumedMessagesRequest) IsSetConsumerGroupName() bool {
	return p.ConsumerGroupName != nil
}

func (p *SetConsumedMessagesRequest) IsSetAddressInclusive() bool {
	return p.AddressInclusive != nil
}

func (p *SetConsumedMessagesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SetConsumedMessagesRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationPath = &v
	}
	return nil
}

func (p *SetConsumedMessagesRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ConsumerGroupName = &v
	}
	return nil
}

func (p *SetConsumedMessagesRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AddressInclusive = &v
	}
	return nil
}

func (p *SetConsumedMessagesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetConsumedMessagesRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SetConsumedMessagesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationPath() {
		if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err)
		}
	}
	return err
}

func (p *SetConsumedMessagesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupName() {
		if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err)
		}
	}
	return err
}

func (p *SetConsumedMessagesRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddressInclusive() {
		if err := oprot.WriteFieldBegin("addressInclusive", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:addressInclusive: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.AddressInclusive)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.addressInclusive (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:addressInclusive: ", p), err)
		}
	}
	return err
}

func (p *SetConsumedMessagesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetConsumedMessagesRequest(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - Messages
type PutMessageBatchRequest struct {
	DestinationPath *string       `thrift:"destinationPath,1" json:"destinationPath,omitempty"`
	Messages        []*PutMessage `thrift:"messages,2" json:"messages,omitempty"`
}

func NewPutMessageBatchRequest() *PutMessageBatchRequest {
	return &PutMessageBatchRequest{}
}

var PutMessageBatchRequest_DestinationPath_DEFAULT string

func (p *PutMessageBatchRequest) GetDestinationPath() string {
	if !p.IsSetDestinationPath() {
		return PutMessageBatchRequest_DestinationPath_DEFAULT
	}
	return *p.DestinationPath
}

var PutMessageBatchRequest_Messages_DEFAULT []*PutMessage

func (p *PutMessageBatchRequest) GetMessages() []*PutMessage {
	return p.Messages
}
func (p *PutMessageBatchRequest) IsSetDestinationPath() bool {
	return p.DestinationPath != nil
}

func (p *PutMessageBatchRequest) IsSetMessages() bool {
	return p.Messages != nil
}

func (p *PutMessageBatchRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PutMessageBatchRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationPath = &v
	}
	return nil
}

func (p *PutMessageBatchRequest) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*PutMessage, 0, size)
	p.Messages = tSlice
	for i := 0; i < size; i++ {
		_elem19 := &PutMessage{}
		if err := _elem19.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
		}
		p.Messages = append(p.Messages, _elem19)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *PutMessageBatchRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PutMessageBatchRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PutMessageBatchRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationPath() {
		if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err)
		}
	}
	return err
}

func (p *PutMessageBatchRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessages() {
		if err := oprot.WriteFieldBegin("messages", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messages: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Messages)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Messages {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messages: ", p), err)
		}
	}
	return err
}

func (p *PutMessageBatchRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PutMessageBatchRequest(%+v)", *p)
}

// Attributes:
//  - FailedMessages
//  - SuccessMessages
type PutMessageBatchResult_ struct {
	FailedMessages  []*PutMessageAck `thrift:"failedMessages,1" json:"failedMessages,omitempty"`
	SuccessMessages []*PutMessageAck `thrift:"successMessages,2" json:"successMessages,omitempty"`
}

func NewPutMessageBatchResult_() *PutMessageBatchResult_ {
	return &PutMessageBatchResult_{}
}

var PutMessageBatchResult__FailedMessages_DEFAULT []*PutMessageAck

func (p *PutMessageBatchResult_) GetFailedMessages() []*PutMessageAck {
	return p.FailedMessages
}

var PutMessageBatchResult__SuccessMessages_DEFAULT []*PutMessageAck

func (p *PutMessageBatchResult_) GetSuccessMessages() []*PutMessageAck {
	return p.SuccessMessages
}
func (p *PutMessageBatchResult_) IsSetFailedMessages() bool {
	return p.FailedMessages != nil
}

func (p *PutMessageBatchResult_) IsSetSuccessMessages() bool {
	return p.SuccessMessages != nil
}

func (p *PutMessageBatchResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PutMessageBatchResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*PutMessageAck, 0, size)
	p.FailedMessages = tSlice
	for i := 0; i < size; i++ {
		_elem20 := &PutMessageAck{}
		if err := _elem20.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem20), err)
		}
		p.FailedMessages = append(p.FailedMessages, _elem20)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *PutMessageBatchResult_) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*PutMessageAck, 0, size)
	p.SuccessMessages = tSlice
	for i := 0; i < size; i++ {
		_elem21 := &PutMessageAck{}
		if err := _elem21.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem21), err)
		}
		p.SuccessMessages = append(p.SuccessMessages, _elem21)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *PutMessageBatchResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PutMessageBatchResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PutMessageBatchResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFailedMessages() {
		if err := oprot.WriteFieldBegin("failedMessages", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failedMessages: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FailedMessages)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.FailedMessages {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failedMessages: ", p), err)
		}
	}
	return err
}

func (p *PutMessageBatchResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccessMessages() {
		if err := oprot.WriteFieldBegin("successMessages", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:successMessages: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SuccessMessages)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.SuccessMessages {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:successMessages: ", p), err)
		}
	}
	return err
}

func (p *PutMessageBatchResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PutMessageBatchResult_(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
//  - MaxNumberOfMessages
//  - ReceiveTimeout
type ReceiveMessageBatchRequest struct {
	DestinationPath     *string `thrift:"destinationPath,1" json:"destinationPath,omitempty"`
	ConsumerGroupName   *string `thrift:"consumerGroupName,2" json:"consumerGroupName,omitempty"`
	MaxNumberOfMessages *int32  `thrift:"maxNumberOfMessages,3" json:"maxNumberOfMessages,omitempty"`
	ReceiveTimeout      *int32  `thrift:"receiveTimeout,4" json:"receiveTimeout,omitempty"`
}

func NewReceiveMessageBatchRequest() *ReceiveMessageBatchRequest {
	return &ReceiveMessageBatchRequest{}
}

var ReceiveMessageBatchRequest_DestinationPath_DEFAULT string

func (p *ReceiveMessageBatchRequest) GetDestinationPath() string {
	if !p.IsSetDestinationPath() {
		return ReceiveMessageBatchRequest_DestinationPath_DEFAULT
	}
	return *p.DestinationPath
}

var ReceiveMessageBatchRequest_ConsumerGroupName_DEFAULT string

func (p *ReceiveMessageBatchRequest) GetConsumerGroupName() string {
	if !p.IsSetConsumerGroupName() {
		return ReceiveMessageBatchRequest_ConsumerGroupName_DEFAULT
	}
	return *p.ConsumerGroupName
}

var ReceiveMessageBatchRequest_MaxNumberOfMessages_DEFAULT int32

func (p *ReceiveMessageBatchRequest) GetMaxNumberOfMessages() int32 {
	if !p.IsSetMaxNumberOfMessages() {
		return ReceiveMessageBatchRequest_MaxNumberOfMessages_DEFAULT
	}
	return *p.MaxNumberOfMessages
}

var ReceiveMessageBatchRequest_ReceiveTimeout_DEFAULT int32

func (p *ReceiveMessageBatchRequest) GetReceiveTimeout() int32 {
	if !p.IsSetReceiveTimeout() {
		return ReceiveMessageBatchRequest_ReceiveTimeout_DEFAULT
	}
	return *p.ReceiveTimeout
}
func (p *ReceiveMessageBatchRequest) IsSetDestinationPath() bool {
	return p.DestinationPath != nil
}

func (p *ReceiveMessageBatchRequest) IsSetConsumerGroupName() bool {
	return p.ConsumerGroupName != nil
}

func (p *ReceiveMessageBatchRequest) IsSetMaxNumberOfMessages() bool {
	return p.MaxNumberOfMessages != nil
}

func (p *ReceiveMessageBatchRequest) IsSetReceiveTimeout() bool {
	return p.ReceiveTimeout != nil
}

func (p *ReceiveMessageBatchRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReceiveMessageBatchRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationPath = &v
	}
	return nil
}

func (p *ReceiveMessageBatchRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ConsumerGroupName = &v
	}
	return nil
}

func (p *ReceiveMessageBatchRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MaxNumberOfMessages = &v
	}
	return nil
}

func (p *ReceiveMessageBatchRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ReceiveTimeout = &v
	}
	return nil
}

func (p *ReceiveMessageBatchRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReceiveMessageBatchRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReceiveMessageBatchRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationPath() {
		if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err)
		}
	}
	return err
}

func (p *ReceiveMessageBatchRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupName() {
		if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err)
		}
	}
	return err
}

func (p *ReceiveMessageBatchRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxNumberOfMessages() {
		if err := oprot.WriteFieldBegin("maxNumberOfMessages", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxNumberOfMessages: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.MaxNumberOfMessages)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.maxNumberOfMessages (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxNumberOfMessages: ", p), err)
		}
	}
	return err
}

func (p *ReceiveMessageBatchRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetReceiveTimeout() {
		if err := oprot.WriteFieldBegin("receiveTimeout", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:receiveTimeout: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ReceiveTimeout)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.receiveTimeout (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:receiveTimeout: ", p), err)
		}
	}
	return err
}

func (p *ReceiveMessageBatchRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReceiveMessageBatchRequest(%+v)", *p)
}

// Attributes:
//  - Messages
type ReceiveMessageBatchResult_ struct {
	Messages []*ConsumerMessage `thrift:"messages,1" json:"messages,omitempty"`
}

func NewReceiveMessageBatchResult_() *ReceiveMessageBatchResult_ {
	return &ReceiveMessageBatchResult_{}
}

var ReceiveMessageBatchResult__Messages_DEFAULT []*ConsumerMessage

func (p *ReceiveMessageBatchResult_) GetMessages() []*ConsumerMessage {
	return p.Messages
}
func (p *ReceiveMessageBatchResult_) IsSetMessages() bool {
	return p.Messages != nil
}

func (p *ReceiveMessageBatchResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReceiveMessageBatchResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ConsumerMessage, 0, size)
	p.Messages = tSlice
	for i := 0; i < size; i++ {
		_elem22 := &ConsumerMessage{}
		if err := _elem22.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
		}
		p.Messages = append(p.Messages, _elem22)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ReceiveMessageBatchResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReceiveMessageBatchResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReceiveMessageBatchResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessages() {
		if err := oprot.WriteFieldBegin("messages", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:messages: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Messages)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Messages {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:messages: ", p), err)
		}
	}
	return err
}

func (p *ReceiveMessageBatchResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReceiveMessageBatchResult_(%+v)", *p)
}

// Attributes:
//  - Key
type GetQueueDepthInfoRequest struct {
	Key *string `thrift:"key,1" json:"key,omitempty"`
}

func NewGetQueueDepthInfoRequest() *GetQueueDepthInfoRequest {
	return &GetQueueDepthInfoRequest{}
}

var GetQueueDepthInfoRequest_Key_DEFAULT string

func (p *GetQueueDepthInfoRequest) GetKey() string {
	if !p.IsSetKey() {
		return GetQueueDepthInfoRequest_Key_DEFAULT
	}
	return *p.Key
}
func (p *GetQueueDepthInfoRequest) IsSetKey() bool {
	return p.Key != nil
}

func (p *GetQueueDepthInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetQueueDepthInfoRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = &v
	}
	return nil
}

func (p *GetQueueDepthInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetQueueDepthInfoRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetQueueDepthInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Key)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
		}
	}
	return err
}

func (p *GetQueueDepthInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetQueueDepthInfoRequest(%+v)", *p)
}

// Attributes:
//  - Value
type GetQueueDepthInfoResult_ struct {
	Value *string `thrift:"value,1" json:"value,omitempty"`
}

func NewGetQueueDepthInfoResult_() *GetQueueDepthInfoResult_ {
	return &GetQueueDepthInfoResult_{}
}

var GetQueueDepthInfoResult__Value_DEFAULT string

func (p *GetQueueDepthInfoResult_) GetValue() string {
	if !p.IsSetValue() {
		return GetQueueDepthInfoResult__Value_DEFAULT
	}
	return *p.Value
}
func (p *GetQueueDepthInfoResult_) IsSetValue() bool {
	return p.Value != nil
}

func (p *GetQueueDepthInfoResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetQueueDepthInfoResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Value = &v
	}
	return nil
}

func (p *GetQueueDepthInfoResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetQueueDepthInfoResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetQueueDepthInfoResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Value)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err)
		}
	}
	return err
}

func (p *GetQueueDepthInfoResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetQueueDepthInfoResult_(%+v)", *p)
}

// Attributes:
//  - UpdateUUID
type ReconfigureInfo struct {
	UpdateUUID *string `thrift:"updateUUID,1" json:"updateUUID,omitempty"`
}

func NewReconfigureInfo() *ReconfigureInfo {
	return &ReconfigureInfo{}
}

var ReconfigureInfo_UpdateUUID_DEFAULT string

func (p *ReconfigureInfo) GetUpdateUUID() string {
	if !p.IsSetUpdateUUID() {
		return ReconfigureInfo_UpdateUUID_DEFAULT
	}
	return *p.UpdateUUID
}
func (p *ReconfigureInfo) IsSetUpdateUUID() bool {
	return p.UpdateUUID != nil
}

func (p *ReconfigureInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReconfigureInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UpdateUUID = &v
	}
	return nil
}

func (p *ReconfigureInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReconfigureInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReconfigureInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateUUID() {
		if err := oprot.WriteFieldBegin("updateUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.UpdateUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updateUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateUUID: ", p), err)
		}
	}
	return err
}

func (p *ReconfigureInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReconfigureInfo(%+v)", *p)
}

// Attributes:
//  - Type
//  - Ack
//  - Reconfigure
type InputHostCommand struct {
	Type        *InputHostCommandType `thrift:"type,1" json:"type,omitempty"`
	Ack         *PutMessageAck        `thrift:"ack,2" json:"ack,omitempty"`
	Reconfigure *ReconfigureInfo      `thrift:"reconfigure,3" json:"reconfigure,omitempty"`
}

func NewInputHostCommand() *InputHostCommand {
	return &InputHostCommand{}
}

var InputHostCommand_Type_DEFAULT InputHostCommandType

func (p *InputHostCommand) GetType() InputHostCommandType {
	if !p.IsSetType() {
		return InputHostCommand_Type_DEFAULT
	}
	return *p.Type
}

var InputHostCommand_Ack_DEFAULT *PutMessageAck

func (p *InputHostCommand) GetAck() *PutMessageAck {
	if !p.IsSetAck() {
		return InputHostCommand_Ack_DEFAULT
	}
	return p.Ack
}

var InputHostCommand_Reconfigure_DEFAULT *ReconfigureInfo

func (p *InputHostCommand) GetReconfigure() *ReconfigureInfo {
	if !p.IsSetReconfigure() {
		return InputHostCommand_Reconfigure_DEFAULT
	}
	return p.Reconfigure
}
func (p *InputHostCommand) IsSetType() bool {
	return p.Type != nil
}

func (p *InputHostCommand) IsSetAck() bool {
	return p.Ack != nil
}

func (p *InputHostCommand) IsSetReconfigure() bool {
	return p.Reconfigure != nil
}

func (p *InputHostCommand) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InputHostCommand) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := InputHostCommandType(v)
		p.Type = &temp
	}
	return nil
}

func (p *InputHostCommand) readField2(iprot thrift.TProtocol) error {
	p.Ack = &PutMessageAck{}
	if err := p.Ack.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ack), err)
	}
	return nil
}

func (p *InputHostCommand) readField3(iprot thrift.TProtocol) error {
	p.Reconfigure = &ReconfigureInfo{}
	if err := p.Reconfigure.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Reconfigure), err)
	}
	return nil
}

func (p *InputHostCommand) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InputHostCommand"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InputHostCommand) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
		}
	}
	return err
}

func (p *InputHostCommand) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAck() {
		if err := oprot.WriteFieldBegin("ack", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ack: ", p), err)
		}
		if err := p.Ack.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ack), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ack: ", p), err)
		}
	}
	return err
}

func (p *InputHostCommand) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetReconfigure() {
		if err := oprot.WriteFieldBegin("reconfigure", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reconfigure: ", p), err)
		}
		if err := p.Reconfigure.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Reconfigure), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reconfigure: ", p), err)
		}
	}
	return err
}

func (p *InputHostCommand) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InputHostCommand(%+v)", *p)
}

// Attributes:
//  - Type
//  - Message
//  - Reconfigure
type OutputHostCommand struct {
	Type        *OutputHostCommandType `thrift:"type,1" json:"type,omitempty"`
	Message     *ConsumerMessage       `thrift:"message,2" json:"message,omitempty"`
	Reconfigure *ReconfigureInfo       `thrift:"reconfigure,3" json:"reconfigure,omitempty"`
}

func NewOutputHostCommand() *OutputHostCommand {
	return &OutputHostCommand{}
}

var OutputHostCommand_Type_DEFAULT OutputHostCommandType

func (p *OutputHostCommand) GetType() OutputHostCommandType {
	if !p.IsSetType() {
		return OutputHostCommand_Type_DEFAULT
	}
	return *p.Type
}

var OutputHostCommand_Message_DEFAULT *ConsumerMessage

func (p *OutputHostCommand) GetMessage() *ConsumerMessage {
	if !p.IsSetMessage() {
		return OutputHostCommand_Message_DEFAULT
	}
	return p.Message
}

var OutputHostCommand_Reconfigure_DEFAULT *ReconfigureInfo

func (p *OutputHostCommand) GetReconfigure() *ReconfigureInfo {
	if !p.IsSetReconfigure() {
		return OutputHostCommand_Reconfigure_DEFAULT
	}
	return p.Reconfigure
}
func (p *OutputHostCommand) IsSetType() bool {
	return p.Type != nil
}

func (p *OutputHostCommand) IsSetMessage() bool {
	return p.Message != nil
}

func (p *OutputHostCommand) IsSetReconfigure() bool {
	return p.Reconfigure != nil
}

func (p *OutputHostCommand) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OutputHostCommand) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := OutputHostCommandType(v)
		p.Type = &temp
	}
	return nil
}

func (p *OutputHostCommand) readField2(iprot thrift.TProtocol) error {
	p.Message = &ConsumerMessage{}
	if err := p.Message.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
	}
	return nil
}

func (p *OutputHostCommand) readField3(iprot thrift.TProtocol) error {
	p.Reconfigure = &ReconfigureInfo{}
	if err := p.Reconfigure.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Reconfigure), err)
	}
	return nil
}

func (p *OutputHostCommand) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OutputHostCommand"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OutputHostCommand) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
		}
	}
	return err
}

func (p *OutputHostCommand) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
		}
		if err := p.Message.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
		}
	}
	return err
}

func (p *OutputHostCommand) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetReconfigure() {
		if err := oprot.WriteFieldBegin("reconfigure", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reconfigure: ", p), err)
		}
		if err := p.Reconfigure.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Reconfigure), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reconfigure: ", p), err)
		}
	}
	return err
}

func (p *OutputHostCommand) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OutputHostCommand(%+v)", *p)
}

// Attributes:
//  - Credits
type ControlFlow struct {
	Credits *int32 `thrift:"credits,1" json:"credits,omitempty"`
}

func NewControlFlow() *ControlFlow {
	return &ControlFlow{}
}

var ControlFlow_Credits_DEFAULT int32

func (p *ControlFlow) GetCredits() int32 {
	if !p.IsSetCredits() {
		return ControlFlow_Credits_DEFAULT
	}
	return *p.Credits
}
func (p *ControlFlow) IsSetCredits() bool {
	return p.Credits != nil
}

func (p *ControlFlow) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ControlFlow) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Credits = &v
	}
	return nil
}

func (p *ControlFlow) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ControlFlow"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ControlFlow) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCredits() {
		if err := oprot.WriteFieldBegin("credits", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:credits: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Credits)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.credits (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:credits: ", p), err)
		}
	}
	return err
}

func (p *ControlFlow) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControlFlow(%+v)", *p)
}
