// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package admin

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type NotificationType int64
const (
  NotificationType_HOST NotificationType = 1
  NotificationType_CLIENT NotificationType = 2
  NotificationType_ALL NotificationType = 3
)

func (p NotificationType) String() string {
  switch p {
  case NotificationType_HOST: return "HOST"
  case NotificationType_CLIENT: return "CLIENT"
  case NotificationType_ALL: return "ALL"
  }
  return "<UNSET>"
}

func NotificationTypeFromString(s string) (NotificationType, error) {
  switch s {
  case "HOST": return NotificationType_HOST, nil 
  case "CLIENT": return NotificationType_CLIENT, nil 
  case "ALL": return NotificationType_ALL, nil 
  }
  return NotificationType(0), fmt.Errorf("not a valid NotificationType string")
}


func NotificationTypePtr(v NotificationType) *NotificationType { return &v }

func (p NotificationType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *NotificationType) UnmarshalText(text []byte) error {
q, err := NotificationTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *NotificationType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = NotificationType(v)
return nil
}

func (p * NotificationType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - NumberOfConnections
type ReconfigureClientInfo struct {
  NumberOfConnections *int32 `thrift:"numberOfConnections,1" db:"numberOfConnections" json:"numberOfConnections,omitempty"`
}

func NewReconfigureClientInfo() *ReconfigureClientInfo {
  return &ReconfigureClientInfo{}
}

var ReconfigureClientInfo_NumberOfConnections_DEFAULT int32
func (p *ReconfigureClientInfo) GetNumberOfConnections() int32 {
  if !p.IsSetNumberOfConnections() {
    return ReconfigureClientInfo_NumberOfConnections_DEFAULT
  }
return *p.NumberOfConnections
}
func (p *ReconfigureClientInfo) IsSetNumberOfConnections() bool {
  return p.NumberOfConnections != nil
}

func (p *ReconfigureClientInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReconfigureClientInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NumberOfConnections = &v
}
  return nil
}

func (p *ReconfigureClientInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReconfigureClientInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReconfigureClientInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNumberOfConnections() {
    if err := oprot.WriteFieldBegin("numberOfConnections", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:numberOfConnections: ", p), err) }
    if err := oprot.WriteI32(int32(*p.NumberOfConnections)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.numberOfConnections (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:numberOfConnections: ", p), err) }
  }
  return err
}

func (p *ReconfigureClientInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReconfigureClientInfo(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - Type
//  - ClientInfo
//  - ExtentUUID
//  - StoreIds
type DestinationUpdatedNotification struct {
  DestinationUUID *string `thrift:"destinationUUID,1" db:"destinationUUID" json:"destinationUUID,omitempty"`
  Type *NotificationType `thrift:"type,2" db:"type" json:"type,omitempty"`
  ClientInfo *ReconfigureClientInfo `thrift:"clientInfo,3" db:"clientInfo" json:"clientInfo,omitempty"`
  ExtentUUID *string `thrift:"extentUUID,4" db:"extentUUID" json:"extentUUID,omitempty"`
  StoreIds []string `thrift:"storeIds,5" db:"storeIds" json:"storeIds,omitempty"`
}

func NewDestinationUpdatedNotification() *DestinationUpdatedNotification {
  return &DestinationUpdatedNotification{}
}

var DestinationUpdatedNotification_DestinationUUID_DEFAULT string
func (p *DestinationUpdatedNotification) GetDestinationUUID() string {
  if !p.IsSetDestinationUUID() {
    return DestinationUpdatedNotification_DestinationUUID_DEFAULT
  }
return *p.DestinationUUID
}
var DestinationUpdatedNotification_Type_DEFAULT NotificationType
func (p *DestinationUpdatedNotification) GetType() NotificationType {
  if !p.IsSetType() {
    return DestinationUpdatedNotification_Type_DEFAULT
  }
return *p.Type
}
var DestinationUpdatedNotification_ClientInfo_DEFAULT *ReconfigureClientInfo
func (p *DestinationUpdatedNotification) GetClientInfo() *ReconfigureClientInfo {
  if !p.IsSetClientInfo() {
    return DestinationUpdatedNotification_ClientInfo_DEFAULT
  }
return p.ClientInfo
}
var DestinationUpdatedNotification_ExtentUUID_DEFAULT string
func (p *DestinationUpdatedNotification) GetExtentUUID() string {
  if !p.IsSetExtentUUID() {
    return DestinationUpdatedNotification_ExtentUUID_DEFAULT
  }
return *p.ExtentUUID
}
var DestinationUpdatedNotification_StoreIds_DEFAULT []string

func (p *DestinationUpdatedNotification) GetStoreIds() []string {
  return p.StoreIds
}
func (p *DestinationUpdatedNotification) IsSetDestinationUUID() bool {
  return p.DestinationUUID != nil
}

func (p *DestinationUpdatedNotification) IsSetType() bool {
  return p.Type != nil
}

func (p *DestinationUpdatedNotification) IsSetClientInfo() bool {
  return p.ClientInfo != nil
}

func (p *DestinationUpdatedNotification) IsSetExtentUUID() bool {
  return p.ExtentUUID != nil
}

func (p *DestinationUpdatedNotification) IsSetStoreIds() bool {
  return p.StoreIds != nil
}

func (p *DestinationUpdatedNotification) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DestinationUpdatedNotification)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationUUID = &v
}
  return nil
}

func (p *DestinationUpdatedNotification)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := NotificationType(v)
  p.Type = &temp
}
  return nil
}

func (p *DestinationUpdatedNotification)  ReadField3(iprot thrift.TProtocol) error {
  p.ClientInfo = &ReconfigureClientInfo{}
  if err := p.ClientInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ClientInfo), err)
  }
  return nil
}

func (p *DestinationUpdatedNotification)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ExtentUUID = &v
}
  return nil
}

func (p *DestinationUpdatedNotification)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.StoreIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.StoreIds = append(p.StoreIds, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DestinationUpdatedNotification) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DestinationUpdatedNotification"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DestinationUpdatedNotification) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationUUID() {
    if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err) }
  }
  return err
}

func (p *DestinationUpdatedNotification) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  }
  return err
}

func (p *DestinationUpdatedNotification) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetClientInfo() {
    if err := oprot.WriteFieldBegin("clientInfo", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:clientInfo: ", p), err) }
    if err := p.ClientInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ClientInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:clientInfo: ", p), err) }
  }
  return err
}

func (p *DestinationUpdatedNotification) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentUUID() {
    if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extentUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extentUUID (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extentUUID: ", p), err) }
  }
  return err
}

func (p *DestinationUpdatedNotification) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetStoreIds() {
    if err := oprot.WriteFieldBegin("storeIds", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:storeIds: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.StoreIds)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.StoreIds {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:storeIds: ", p), err) }
  }
  return err
}

func (p *DestinationUpdatedNotification) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DestinationUpdatedNotification(%+v)", *p)
}

// Attributes:
//  - UpdateUUID
//  - Updates
type DestinationsUpdatedRequest struct {
  UpdateUUID *string `thrift:"updateUUID,1" db:"updateUUID" json:"updateUUID,omitempty"`
  Updates []*DestinationUpdatedNotification `thrift:"updates,2" db:"updates" json:"updates,omitempty"`
}

func NewDestinationsUpdatedRequest() *DestinationsUpdatedRequest {
  return &DestinationsUpdatedRequest{}
}

var DestinationsUpdatedRequest_UpdateUUID_DEFAULT string
func (p *DestinationsUpdatedRequest) GetUpdateUUID() string {
  if !p.IsSetUpdateUUID() {
    return DestinationsUpdatedRequest_UpdateUUID_DEFAULT
  }
return *p.UpdateUUID
}
var DestinationsUpdatedRequest_Updates_DEFAULT []*DestinationUpdatedNotification

func (p *DestinationsUpdatedRequest) GetUpdates() []*DestinationUpdatedNotification {
  return p.Updates
}
func (p *DestinationsUpdatedRequest) IsSetUpdateUUID() bool {
  return p.UpdateUUID != nil
}

func (p *DestinationsUpdatedRequest) IsSetUpdates() bool {
  return p.Updates != nil
}

func (p *DestinationsUpdatedRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DestinationsUpdatedRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UpdateUUID = &v
}
  return nil
}

func (p *DestinationsUpdatedRequest)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DestinationUpdatedNotification, 0, size)
  p.Updates =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &DestinationUpdatedNotification{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Updates = append(p.Updates, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DestinationsUpdatedRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DestinationsUpdatedRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DestinationsUpdatedRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetUpdateUUID() {
    if err := oprot.WriteFieldBegin("updateUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.UpdateUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updateUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateUUID: ", p), err) }
  }
  return err
}

func (p *DestinationsUpdatedRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetUpdates() {
    if err := oprot.WriteFieldBegin("updates", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:updates: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Updates)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Updates {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:updates: ", p), err) }
  }
  return err
}

func (p *DestinationsUpdatedRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DestinationsUpdatedRequest(%+v)", *p)
}

// Attributes:
//  - ConsumerGroupUUID
//  - Type
//  - ClientInfo
type ConsumerGroupUpdatedNotification struct {
  ConsumerGroupUUID *string `thrift:"consumerGroupUUID,1" db:"consumerGroupUUID" json:"consumerGroupUUID,omitempty"`
  Type *NotificationType `thrift:"type,2" db:"type" json:"type,omitempty"`
  ClientInfo *ReconfigureClientInfo `thrift:"clientInfo,3" db:"clientInfo" json:"clientInfo,omitempty"`
}

func NewConsumerGroupUpdatedNotification() *ConsumerGroupUpdatedNotification {
  return &ConsumerGroupUpdatedNotification{}
}

var ConsumerGroupUpdatedNotification_ConsumerGroupUUID_DEFAULT string
func (p *ConsumerGroupUpdatedNotification) GetConsumerGroupUUID() string {
  if !p.IsSetConsumerGroupUUID() {
    return ConsumerGroupUpdatedNotification_ConsumerGroupUUID_DEFAULT
  }
return *p.ConsumerGroupUUID
}
var ConsumerGroupUpdatedNotification_Type_DEFAULT NotificationType
func (p *ConsumerGroupUpdatedNotification) GetType() NotificationType {
  if !p.IsSetType() {
    return ConsumerGroupUpdatedNotification_Type_DEFAULT
  }
return *p.Type
}
var ConsumerGroupUpdatedNotification_ClientInfo_DEFAULT *ReconfigureClientInfo
func (p *ConsumerGroupUpdatedNotification) GetClientInfo() *ReconfigureClientInfo {
  if !p.IsSetClientInfo() {
    return ConsumerGroupUpdatedNotification_ClientInfo_DEFAULT
  }
return p.ClientInfo
}
func (p *ConsumerGroupUpdatedNotification) IsSetConsumerGroupUUID() bool {
  return p.ConsumerGroupUUID != nil
}

func (p *ConsumerGroupUpdatedNotification) IsSetType() bool {
  return p.Type != nil
}

func (p *ConsumerGroupUpdatedNotification) IsSetClientInfo() bool {
  return p.ClientInfo != nil
}

func (p *ConsumerGroupUpdatedNotification) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConsumerGroupUpdatedNotification)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ConsumerGroupUUID = &v
}
  return nil
}

func (p *ConsumerGroupUpdatedNotification)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := NotificationType(v)
  p.Type = &temp
}
  return nil
}

func (p *ConsumerGroupUpdatedNotification)  ReadField3(iprot thrift.TProtocol) error {
  p.ClientInfo = &ReconfigureClientInfo{}
  if err := p.ClientInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ClientInfo), err)
  }
  return nil
}

func (p *ConsumerGroupUpdatedNotification) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ConsumerGroupUpdatedNotification"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConsumerGroupUpdatedNotification) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupUUID() {
    if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:consumerGroupUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:consumerGroupUUID: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupUpdatedNotification) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupUpdatedNotification) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetClientInfo() {
    if err := oprot.WriteFieldBegin("clientInfo", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:clientInfo: ", p), err) }
    if err := p.ClientInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ClientInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:clientInfo: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupUpdatedNotification) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConsumerGroupUpdatedNotification(%+v)", *p)
}

// Attributes:
//  - UpdateUUID
//  - Updates
type ConsumerGroupsUpdatedRequest struct {
  UpdateUUID *string `thrift:"updateUUID,1" db:"updateUUID" json:"updateUUID,omitempty"`
  Updates []*ConsumerGroupUpdatedNotification `thrift:"updates,2" db:"updates" json:"updates,omitempty"`
}

func NewConsumerGroupsUpdatedRequest() *ConsumerGroupsUpdatedRequest {
  return &ConsumerGroupsUpdatedRequest{}
}

var ConsumerGroupsUpdatedRequest_UpdateUUID_DEFAULT string
func (p *ConsumerGroupsUpdatedRequest) GetUpdateUUID() string {
  if !p.IsSetUpdateUUID() {
    return ConsumerGroupsUpdatedRequest_UpdateUUID_DEFAULT
  }
return *p.UpdateUUID
}
var ConsumerGroupsUpdatedRequest_Updates_DEFAULT []*ConsumerGroupUpdatedNotification

func (p *ConsumerGroupsUpdatedRequest) GetUpdates() []*ConsumerGroupUpdatedNotification {
  return p.Updates
}
func (p *ConsumerGroupsUpdatedRequest) IsSetUpdateUUID() bool {
  return p.UpdateUUID != nil
}

func (p *ConsumerGroupsUpdatedRequest) IsSetUpdates() bool {
  return p.Updates != nil
}

func (p *ConsumerGroupsUpdatedRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConsumerGroupsUpdatedRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UpdateUUID = &v
}
  return nil
}

func (p *ConsumerGroupsUpdatedRequest)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConsumerGroupUpdatedNotification, 0, size)
  p.Updates =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &ConsumerGroupUpdatedNotification{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Updates = append(p.Updates, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConsumerGroupsUpdatedRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ConsumerGroupsUpdatedRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConsumerGroupsUpdatedRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetUpdateUUID() {
    if err := oprot.WriteFieldBegin("updateUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.UpdateUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updateUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateUUID: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupsUpdatedRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetUpdates() {
    if err := oprot.WriteFieldBegin("updates", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:updates: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Updates)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Updates {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:updates: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupsUpdatedRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConsumerGroupsUpdatedRequest(%+v)", *p)
}

// Attributes:
//  - CgUUIDs
type UnloadConsumerGroupsRequest struct {
  CgUUIDs []string `thrift:"cgUUIDs,1" db:"cgUUIDs" json:"cgUUIDs,omitempty"`
}

func NewUnloadConsumerGroupsRequest() *UnloadConsumerGroupsRequest {
  return &UnloadConsumerGroupsRequest{}
}

var UnloadConsumerGroupsRequest_CgUUIDs_DEFAULT []string

func (p *UnloadConsumerGroupsRequest) GetCgUUIDs() []string {
  return p.CgUUIDs
}
func (p *UnloadConsumerGroupsRequest) IsSetCgUUIDs() bool {
  return p.CgUUIDs != nil
}

func (p *UnloadConsumerGroupsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnloadConsumerGroupsRequest)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.CgUUIDs =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.CgUUIDs = append(p.CgUUIDs, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UnloadConsumerGroupsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UnloadConsumerGroupsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnloadConsumerGroupsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetCgUUIDs() {
    if err := oprot.WriteFieldBegin("cgUUIDs", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cgUUIDs: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.CgUUIDs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.CgUUIDs {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cgUUIDs: ", p), err) }
  }
  return err
}

func (p *UnloadConsumerGroupsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnloadConsumerGroupsRequest(%+v)", *p)
}

// Attributes:
//  - AckMgrID
//  - IsSealed
//  - ReadLevelSeq
//  - AckLevelSeq
//  - ReadLevelOffset
//  - AckLevelOffset
//  - LastAckLevelUpdateTime
//  - LastAckedSeq
//  - NumAckedMsgs
//  - NumUnackedMsgs
type AckMgrState struct {
  AckMgrID *int16 `thrift:"ackMgrID,1" db:"ackMgrID" json:"ackMgrID,omitempty"`
  IsSealed *bool `thrift:"isSealed,2" db:"isSealed" json:"isSealed,omitempty"`
  ReadLevelSeq *int64 `thrift:"readLevelSeq,3" db:"readLevelSeq" json:"readLevelSeq,omitempty"`
  AckLevelSeq *int64 `thrift:"ackLevelSeq,4" db:"ackLevelSeq" json:"ackLevelSeq,omitempty"`
  ReadLevelOffset *int64 `thrift:"readLevelOffset,5" db:"readLevelOffset" json:"readLevelOffset,omitempty"`
  AckLevelOffset *int64 `thrift:"ackLevelOffset,6" db:"ackLevelOffset" json:"ackLevelOffset,omitempty"`
  LastAckLevelUpdateTime *int64 `thrift:"lastAckLevelUpdateTime,7" db:"lastAckLevelUpdateTime" json:"lastAckLevelUpdateTime,omitempty"`
  LastAckedSeq *int64 `thrift:"lastAckedSeq,8" db:"lastAckedSeq" json:"lastAckedSeq,omitempty"`
  NumAckedMsgs *int64 `thrift:"numAckedMsgs,9" db:"numAckedMsgs" json:"numAckedMsgs,omitempty"`
  NumUnackedMsgs *int64 `thrift:"numUnackedMsgs,10" db:"numUnackedMsgs" json:"numUnackedMsgs,omitempty"`
}

func NewAckMgrState() *AckMgrState {
  return &AckMgrState{}
}

var AckMgrState_AckMgrID_DEFAULT int16
func (p *AckMgrState) GetAckMgrID() int16 {
  if !p.IsSetAckMgrID() {
    return AckMgrState_AckMgrID_DEFAULT
  }
return *p.AckMgrID
}
var AckMgrState_IsSealed_DEFAULT bool
func (p *AckMgrState) GetIsSealed() bool {
  if !p.IsSetIsSealed() {
    return AckMgrState_IsSealed_DEFAULT
  }
return *p.IsSealed
}
var AckMgrState_ReadLevelSeq_DEFAULT int64
func (p *AckMgrState) GetReadLevelSeq() int64 {
  if !p.IsSetReadLevelSeq() {
    return AckMgrState_ReadLevelSeq_DEFAULT
  }
return *p.ReadLevelSeq
}
var AckMgrState_AckLevelSeq_DEFAULT int64
func (p *AckMgrState) GetAckLevelSeq() int64 {
  if !p.IsSetAckLevelSeq() {
    return AckMgrState_AckLevelSeq_DEFAULT
  }
return *p.AckLevelSeq
}
var AckMgrState_ReadLevelOffset_DEFAULT int64
func (p *AckMgrState) GetReadLevelOffset() int64 {
  if !p.IsSetReadLevelOffset() {
    return AckMgrState_ReadLevelOffset_DEFAULT
  }
return *p.ReadLevelOffset
}
var AckMgrState_AckLevelOffset_DEFAULT int64
func (p *AckMgrState) GetAckLevelOffset() int64 {
  if !p.IsSetAckLevelOffset() {
    return AckMgrState_AckLevelOffset_DEFAULT
  }
return *p.AckLevelOffset
}
var AckMgrState_LastAckLevelUpdateTime_DEFAULT int64
func (p *AckMgrState) GetLastAckLevelUpdateTime() int64 {
  if !p.IsSetLastAckLevelUpdateTime() {
    return AckMgrState_LastAckLevelUpdateTime_DEFAULT
  }
return *p.LastAckLevelUpdateTime
}
var AckMgrState_LastAckedSeq_DEFAULT int64
func (p *AckMgrState) GetLastAckedSeq() int64 {
  if !p.IsSetLastAckedSeq() {
    return AckMgrState_LastAckedSeq_DEFAULT
  }
return *p.LastAckedSeq
}
var AckMgrState_NumAckedMsgs_DEFAULT int64
func (p *AckMgrState) GetNumAckedMsgs() int64 {
  if !p.IsSetNumAckedMsgs() {
    return AckMgrState_NumAckedMsgs_DEFAULT
  }
return *p.NumAckedMsgs
}
var AckMgrState_NumUnackedMsgs_DEFAULT int64
func (p *AckMgrState) GetNumUnackedMsgs() int64 {
  if !p.IsSetNumUnackedMsgs() {
    return AckMgrState_NumUnackedMsgs_DEFAULT
  }
return *p.NumUnackedMsgs
}
func (p *AckMgrState) IsSetAckMgrID() bool {
  return p.AckMgrID != nil
}

func (p *AckMgrState) IsSetIsSealed() bool {
  return p.IsSealed != nil
}

func (p *AckMgrState) IsSetReadLevelSeq() bool {
  return p.ReadLevelSeq != nil
}

func (p *AckMgrState) IsSetAckLevelSeq() bool {
  return p.AckLevelSeq != nil
}

func (p *AckMgrState) IsSetReadLevelOffset() bool {
  return p.ReadLevelOffset != nil
}

func (p *AckMgrState) IsSetAckLevelOffset() bool {
  return p.AckLevelOffset != nil
}

func (p *AckMgrState) IsSetLastAckLevelUpdateTime() bool {
  return p.LastAckLevelUpdateTime != nil
}

func (p *AckMgrState) IsSetLastAckedSeq() bool {
  return p.LastAckedSeq != nil
}

func (p *AckMgrState) IsSetNumAckedMsgs() bool {
  return p.NumAckedMsgs != nil
}

func (p *AckMgrState) IsSetNumUnackedMsgs() bool {
  return p.NumUnackedMsgs != nil
}

func (p *AckMgrState) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AckMgrState)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AckMgrID = &v
}
  return nil
}

func (p *AckMgrState)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IsSealed = &v
}
  return nil
}

func (p *AckMgrState)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ReadLevelSeq = &v
}
  return nil
}

func (p *AckMgrState)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AckLevelSeq = &v
}
  return nil
}

func (p *AckMgrState)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ReadLevelOffset = &v
}
  return nil
}

func (p *AckMgrState)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.AckLevelOffset = &v
}
  return nil
}

func (p *AckMgrState)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.LastAckLevelUpdateTime = &v
}
  return nil
}

func (p *AckMgrState)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.LastAckedSeq = &v
}
  return nil
}

func (p *AckMgrState)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.NumAckedMsgs = &v
}
  return nil
}

func (p *AckMgrState)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.NumUnackedMsgs = &v
}
  return nil
}

func (p *AckMgrState) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AckMgrState"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AckMgrState) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAckMgrID() {
    if err := oprot.WriteFieldBegin("ackMgrID", thrift.I16, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ackMgrID: ", p), err) }
    if err := oprot.WriteI16(int16(*p.AckMgrID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ackMgrID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ackMgrID: ", p), err) }
  }
  return err
}

func (p *AckMgrState) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsSealed() {
    if err := oprot.WriteFieldBegin("isSealed", thrift.BOOL, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:isSealed: ", p), err) }
    if err := oprot.WriteBool(bool(*p.IsSealed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.isSealed (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:isSealed: ", p), err) }
  }
  return err
}

func (p *AckMgrState) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetReadLevelSeq() {
    if err := oprot.WriteFieldBegin("readLevelSeq", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:readLevelSeq: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ReadLevelSeq)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.readLevelSeq (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:readLevelSeq: ", p), err) }
  }
  return err
}

func (p *AckMgrState) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAckLevelSeq() {
    if err := oprot.WriteFieldBegin("ackLevelSeq", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ackLevelSeq: ", p), err) }
    if err := oprot.WriteI64(int64(*p.AckLevelSeq)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ackLevelSeq (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ackLevelSeq: ", p), err) }
  }
  return err
}

func (p *AckMgrState) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetReadLevelOffset() {
    if err := oprot.WriteFieldBegin("readLevelOffset", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:readLevelOffset: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ReadLevelOffset)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.readLevelOffset (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:readLevelOffset: ", p), err) }
  }
  return err
}

func (p *AckMgrState) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetAckLevelOffset() {
    if err := oprot.WriteFieldBegin("ackLevelOffset", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ackLevelOffset: ", p), err) }
    if err := oprot.WriteI64(int64(*p.AckLevelOffset)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ackLevelOffset (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ackLevelOffset: ", p), err) }
  }
  return err
}

func (p *AckMgrState) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetLastAckLevelUpdateTime() {
    if err := oprot.WriteFieldBegin("lastAckLevelUpdateTime", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:lastAckLevelUpdateTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.LastAckLevelUpdateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lastAckLevelUpdateTime (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:lastAckLevelUpdateTime: ", p), err) }
  }
  return err
}

func (p *AckMgrState) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetLastAckedSeq() {
    if err := oprot.WriteFieldBegin("lastAckedSeq", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:lastAckedSeq: ", p), err) }
    if err := oprot.WriteI64(int64(*p.LastAckedSeq)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lastAckedSeq (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:lastAckedSeq: ", p), err) }
  }
  return err
}

func (p *AckMgrState) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetNumAckedMsgs() {
    if err := oprot.WriteFieldBegin("numAckedMsgs", thrift.I64, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:numAckedMsgs: ", p), err) }
    if err := oprot.WriteI64(int64(*p.NumAckedMsgs)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.numAckedMsgs (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:numAckedMsgs: ", p), err) }
  }
  return err
}

func (p *AckMgrState) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetNumUnackedMsgs() {
    if err := oprot.WriteFieldBegin("numUnackedMsgs", thrift.I64, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:numUnackedMsgs: ", p), err) }
    if err := oprot.WriteI64(int64(*p.NumUnackedMsgs)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.numUnackedMsgs (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:numUnackedMsgs: ", p), err) }
  }
  return err
}

func (p *AckMgrState) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AckMgrState(%+v)", *p)
}

// Attributes:
//  - ExtentUUID
//  - ConnectedStoreUUID
//  - NumCreditsSentToStore
//  - NumMsgsReadFromStore
//  - StartSequence
//  - AckMgrState
type OutputCgExtent struct {
  ExtentUUID *string `thrift:"extentUUID,1" db:"extentUUID" json:"extentUUID,omitempty"`
  ConnectedStoreUUID *string `thrift:"connectedStoreUUID,2" db:"connectedStoreUUID" json:"connectedStoreUUID,omitempty"`
  NumCreditsSentToStore *int32 `thrift:"numCreditsSentToStore,3" db:"numCreditsSentToStore" json:"numCreditsSentToStore,omitempty"`
  NumMsgsReadFromStore *int32 `thrift:"numMsgsReadFromStore,4" db:"numMsgsReadFromStore" json:"numMsgsReadFromStore,omitempty"`
  StartSequence *int64 `thrift:"startSequence,5" db:"startSequence" json:"startSequence,omitempty"`
  AckMgrState *AckMgrState `thrift:"ackMgrState,6" db:"ackMgrState" json:"ackMgrState,omitempty"`
}

func NewOutputCgExtent() *OutputCgExtent {
  return &OutputCgExtent{}
}

var OutputCgExtent_ExtentUUID_DEFAULT string
func (p *OutputCgExtent) GetExtentUUID() string {
  if !p.IsSetExtentUUID() {
    return OutputCgExtent_ExtentUUID_DEFAULT
  }
return *p.ExtentUUID
}
var OutputCgExtent_ConnectedStoreUUID_DEFAULT string
func (p *OutputCgExtent) GetConnectedStoreUUID() string {
  if !p.IsSetConnectedStoreUUID() {
    return OutputCgExtent_ConnectedStoreUUID_DEFAULT
  }
return *p.ConnectedStoreUUID
}
var OutputCgExtent_NumCreditsSentToStore_DEFAULT int32
func (p *OutputCgExtent) GetNumCreditsSentToStore() int32 {
  if !p.IsSetNumCreditsSentToStore() {
    return OutputCgExtent_NumCreditsSentToStore_DEFAULT
  }
return *p.NumCreditsSentToStore
}
var OutputCgExtent_NumMsgsReadFromStore_DEFAULT int32
func (p *OutputCgExtent) GetNumMsgsReadFromStore() int32 {
  if !p.IsSetNumMsgsReadFromStore() {
    return OutputCgExtent_NumMsgsReadFromStore_DEFAULT
  }
return *p.NumMsgsReadFromStore
}
var OutputCgExtent_StartSequence_DEFAULT int64
func (p *OutputCgExtent) GetStartSequence() int64 {
  if !p.IsSetStartSequence() {
    return OutputCgExtent_StartSequence_DEFAULT
  }
return *p.StartSequence
}
var OutputCgExtent_AckMgrState_DEFAULT *AckMgrState
func (p *OutputCgExtent) GetAckMgrState() *AckMgrState {
  if !p.IsSetAckMgrState() {
    return OutputCgExtent_AckMgrState_DEFAULT
  }
return p.AckMgrState
}
func (p *OutputCgExtent) IsSetExtentUUID() bool {
  return p.ExtentUUID != nil
}

func (p *OutputCgExtent) IsSetConnectedStoreUUID() bool {
  return p.ConnectedStoreUUID != nil
}

func (p *OutputCgExtent) IsSetNumCreditsSentToStore() bool {
  return p.NumCreditsSentToStore != nil
}

func (p *OutputCgExtent) IsSetNumMsgsReadFromStore() bool {
  return p.NumMsgsReadFromStore != nil
}

func (p *OutputCgExtent) IsSetStartSequence() bool {
  return p.StartSequence != nil
}

func (p *OutputCgExtent) IsSetAckMgrState() bool {
  return p.AckMgrState != nil
}

func (p *OutputCgExtent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OutputCgExtent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ExtentUUID = &v
}
  return nil
}

func (p *OutputCgExtent)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConnectedStoreUUID = &v
}
  return nil
}

func (p *OutputCgExtent)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumCreditsSentToStore = &v
}
  return nil
}

func (p *OutputCgExtent)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NumMsgsReadFromStore = &v
}
  return nil
}

func (p *OutputCgExtent)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.StartSequence = &v
}
  return nil
}

func (p *OutputCgExtent)  ReadField6(iprot thrift.TProtocol) error {
  p.AckMgrState = &AckMgrState{}
  if err := p.AckMgrState.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AckMgrState), err)
  }
  return nil
}

func (p *OutputCgExtent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OutputCgExtent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OutputCgExtent) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentUUID() {
    if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extentUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentUUID: ", p), err) }
  }
  return err
}

func (p *OutputCgExtent) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetConnectedStoreUUID() {
    if err := oprot.WriteFieldBegin("connectedStoreUUID", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:connectedStoreUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ConnectedStoreUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.connectedStoreUUID (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:connectedStoreUUID: ", p), err) }
  }
  return err
}

func (p *OutputCgExtent) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetNumCreditsSentToStore() {
    if err := oprot.WriteFieldBegin("numCreditsSentToStore", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numCreditsSentToStore: ", p), err) }
    if err := oprot.WriteI32(int32(*p.NumCreditsSentToStore)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.numCreditsSentToStore (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numCreditsSentToStore: ", p), err) }
  }
  return err
}

func (p *OutputCgExtent) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetNumMsgsReadFromStore() {
    if err := oprot.WriteFieldBegin("numMsgsReadFromStore", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:numMsgsReadFromStore: ", p), err) }
    if err := oprot.WriteI32(int32(*p.NumMsgsReadFromStore)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.numMsgsReadFromStore (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:numMsgsReadFromStore: ", p), err) }
  }
  return err
}

func (p *OutputCgExtent) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartSequence() {
    if err := oprot.WriteFieldBegin("startSequence", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:startSequence: ", p), err) }
    if err := oprot.WriteI64(int64(*p.StartSequence)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startSequence (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:startSequence: ", p), err) }
  }
  return err
}

func (p *OutputCgExtent) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetAckMgrState() {
    if err := oprot.WriteFieldBegin("ackMgrState", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ackMgrState: ", p), err) }
    if err := p.AckMgrState.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AckMgrState), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ackMgrState: ", p), err) }
  }
  return err
}

func (p *OutputCgExtent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OutputCgExtent(%+v)", *p)
}

// Attributes:
//  - CgUUID
//  - NumOutstandingMsgs
//  - MsgChSize
//  - MsgCacheChSize
//  - NumConnections
//  - CgExtents
type ConsumerGroupState struct {
  CgUUID *string `thrift:"cgUUID,1" db:"cgUUID" json:"cgUUID,omitempty"`
  NumOutstandingMsgs *int32 `thrift:"numOutstandingMsgs,2" db:"numOutstandingMsgs" json:"numOutstandingMsgs,omitempty"`
  MsgChSize *int64 `thrift:"msgChSize,3" db:"msgChSize" json:"msgChSize,omitempty"`
  MsgCacheChSize *int64 `thrift:"msgCacheChSize,4" db:"msgCacheChSize" json:"msgCacheChSize,omitempty"`
  NumConnections *int64 `thrift:"numConnections,5" db:"numConnections" json:"numConnections,omitempty"`
  CgExtents []*OutputCgExtent `thrift:"cgExtents,6" db:"cgExtents" json:"cgExtents,omitempty"`
}

func NewConsumerGroupState() *ConsumerGroupState {
  return &ConsumerGroupState{}
}

var ConsumerGroupState_CgUUID_DEFAULT string
func (p *ConsumerGroupState) GetCgUUID() string {
  if !p.IsSetCgUUID() {
    return ConsumerGroupState_CgUUID_DEFAULT
  }
return *p.CgUUID
}
var ConsumerGroupState_NumOutstandingMsgs_DEFAULT int32
func (p *ConsumerGroupState) GetNumOutstandingMsgs() int32 {
  if !p.IsSetNumOutstandingMsgs() {
    return ConsumerGroupState_NumOutstandingMsgs_DEFAULT
  }
return *p.NumOutstandingMsgs
}
var ConsumerGroupState_MsgChSize_DEFAULT int64
func (p *ConsumerGroupState) GetMsgChSize() int64 {
  if !p.IsSetMsgChSize() {
    return ConsumerGroupState_MsgChSize_DEFAULT
  }
return *p.MsgChSize
}
var ConsumerGroupState_MsgCacheChSize_DEFAULT int64
func (p *ConsumerGroupState) GetMsgCacheChSize() int64 {
  if !p.IsSetMsgCacheChSize() {
    return ConsumerGroupState_MsgCacheChSize_DEFAULT
  }
return *p.MsgCacheChSize
}
var ConsumerGroupState_NumConnections_DEFAULT int64
func (p *ConsumerGroupState) GetNumConnections() int64 {
  if !p.IsSetNumConnections() {
    return ConsumerGroupState_NumConnections_DEFAULT
  }
return *p.NumConnections
}
var ConsumerGroupState_CgExtents_DEFAULT []*OutputCgExtent

func (p *ConsumerGroupState) GetCgExtents() []*OutputCgExtent {
  return p.CgExtents
}
func (p *ConsumerGroupState) IsSetCgUUID() bool {
  return p.CgUUID != nil
}

func (p *ConsumerGroupState) IsSetNumOutstandingMsgs() bool {
  return p.NumOutstandingMsgs != nil
}

func (p *ConsumerGroupState) IsSetMsgChSize() bool {
  return p.MsgChSize != nil
}

func (p *ConsumerGroupState) IsSetMsgCacheChSize() bool {
  return p.MsgCacheChSize != nil
}

func (p *ConsumerGroupState) IsSetNumConnections() bool {
  return p.NumConnections != nil
}

func (p *ConsumerGroupState) IsSetCgExtents() bool {
  return p.CgExtents != nil
}

func (p *ConsumerGroupState) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConsumerGroupState)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CgUUID = &v
}
  return nil
}

func (p *ConsumerGroupState)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NumOutstandingMsgs = &v
}
  return nil
}

func (p *ConsumerGroupState)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MsgChSize = &v
}
  return nil
}

func (p *ConsumerGroupState)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MsgCacheChSize = &v
}
  return nil
}

func (p *ConsumerGroupState)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NumConnections = &v
}
  return nil
}

func (p *ConsumerGroupState)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*OutputCgExtent, 0, size)
  p.CgExtents =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &OutputCgExtent{}
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.CgExtents = append(p.CgExtents, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConsumerGroupState) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ConsumerGroupState"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConsumerGroupState) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetCgUUID() {
    if err := oprot.WriteFieldBegin("cgUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cgUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.CgUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cgUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cgUUID: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupState) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNumOutstandingMsgs() {
    if err := oprot.WriteFieldBegin("numOutstandingMsgs", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:numOutstandingMsgs: ", p), err) }
    if err := oprot.WriteI32(int32(*p.NumOutstandingMsgs)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.numOutstandingMsgs (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:numOutstandingMsgs: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupState) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetMsgChSize() {
    if err := oprot.WriteFieldBegin("msgChSize", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:msgChSize: ", p), err) }
    if err := oprot.WriteI64(int64(*p.MsgChSize)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.msgChSize (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:msgChSize: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupState) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetMsgCacheChSize() {
    if err := oprot.WriteFieldBegin("msgCacheChSize", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:msgCacheChSize: ", p), err) }
    if err := oprot.WriteI64(int64(*p.MsgCacheChSize)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.msgCacheChSize (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:msgCacheChSize: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupState) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetNumConnections() {
    if err := oprot.WriteFieldBegin("numConnections", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:numConnections: ", p), err) }
    if err := oprot.WriteI64(int64(*p.NumConnections)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.numConnections (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:numConnections: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupState) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetCgExtents() {
    if err := oprot.WriteFieldBegin("cgExtents", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:cgExtents: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CgExtents)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.CgExtents {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:cgExtents: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupState) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConsumerGroupState(%+v)", *p)
}

// Attributes:
//  - SessionID
//  - CgState
type ReadConsumerGroupStateResult_ struct {
  SessionID *int16 `thrift:"sessionID,1" db:"sessionID" json:"sessionID,omitempty"`
  CgState []*ConsumerGroupState `thrift:"cgState,2" db:"cgState" json:"cgState,omitempty"`
}

func NewReadConsumerGroupStateResult_() *ReadConsumerGroupStateResult_ {
  return &ReadConsumerGroupStateResult_{}
}

var ReadConsumerGroupStateResult__SessionID_DEFAULT int16
func (p *ReadConsumerGroupStateResult_) GetSessionID() int16 {
  if !p.IsSetSessionID() {
    return ReadConsumerGroupStateResult__SessionID_DEFAULT
  }
return *p.SessionID
}
var ReadConsumerGroupStateResult__CgState_DEFAULT []*ConsumerGroupState

func (p *ReadConsumerGroupStateResult_) GetCgState() []*ConsumerGroupState {
  return p.CgState
}
func (p *ReadConsumerGroupStateResult_) IsSetSessionID() bool {
  return p.SessionID != nil
}

func (p *ReadConsumerGroupStateResult_) IsSetCgState() bool {
  return p.CgState != nil
}

func (p *ReadConsumerGroupStateResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadConsumerGroupStateResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SessionID = &v
}
  return nil
}

func (p *ReadConsumerGroupStateResult_)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConsumerGroupState, 0, size)
  p.CgState =  tSlice
  for i := 0; i < size; i ++ {
    _elem5 := &ConsumerGroupState{}
    if err := _elem5.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
    }
    p.CgState = append(p.CgState, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReadConsumerGroupStateResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadConsumerGroupStateResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadConsumerGroupStateResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSessionID() {
    if err := oprot.WriteFieldBegin("sessionID", thrift.I16, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionID: ", p), err) }
    if err := oprot.WriteI16(int16(*p.SessionID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sessionID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionID: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupStateResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetCgState() {
    if err := oprot.WriteFieldBegin("cgState", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cgState: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CgState)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.CgState {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cgState: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupStateResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadConsumerGroupStateResult_(%+v)", *p)
}

// Attributes:
//  - CgUUIDs
type ReadConsumerGroupStateRequest struct {
  CgUUIDs []string `thrift:"cgUUIDs,1" db:"cgUUIDs" json:"cgUUIDs,omitempty"`
}

func NewReadConsumerGroupStateRequest() *ReadConsumerGroupStateRequest {
  return &ReadConsumerGroupStateRequest{}
}

var ReadConsumerGroupStateRequest_CgUUIDs_DEFAULT []string

func (p *ReadConsumerGroupStateRequest) GetCgUUIDs() []string {
  return p.CgUUIDs
}
func (p *ReadConsumerGroupStateRequest) IsSetCgUUIDs() bool {
  return p.CgUUIDs != nil
}

func (p *ReadConsumerGroupStateRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadConsumerGroupStateRequest)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.CgUUIDs =  tSlice
  for i := 0; i < size; i ++ {
var _elem6 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem6 = v
}
    p.CgUUIDs = append(p.CgUUIDs, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReadConsumerGroupStateRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadConsumerGroupStateRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadConsumerGroupStateRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetCgUUIDs() {
    if err := oprot.WriteFieldBegin("cgUUIDs", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cgUUIDs: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.CgUUIDs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.CgUUIDs {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cgUUIDs: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupStateRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadConsumerGroupStateRequest(%+v)", *p)
}

// Attributes:
//  - CgUUID
//  - CgName
//  - DestPath
type ConsumerGroups struct {
  CgUUID *string `thrift:"cgUUID,1" db:"cgUUID" json:"cgUUID,omitempty"`
  CgName *string `thrift:"cgName,2" db:"cgName" json:"cgName,omitempty"`
  DestPath *string `thrift:"destPath,3" db:"destPath" json:"destPath,omitempty"`
}

func NewConsumerGroups() *ConsumerGroups {
  return &ConsumerGroups{}
}

var ConsumerGroups_CgUUID_DEFAULT string
func (p *ConsumerGroups) GetCgUUID() string {
  if !p.IsSetCgUUID() {
    return ConsumerGroups_CgUUID_DEFAULT
  }
return *p.CgUUID
}
var ConsumerGroups_CgName_DEFAULT string
func (p *ConsumerGroups) GetCgName() string {
  if !p.IsSetCgName() {
    return ConsumerGroups_CgName_DEFAULT
  }
return *p.CgName
}
var ConsumerGroups_DestPath_DEFAULT string
func (p *ConsumerGroups) GetDestPath() string {
  if !p.IsSetDestPath() {
    return ConsumerGroups_DestPath_DEFAULT
  }
return *p.DestPath
}
func (p *ConsumerGroups) IsSetCgUUID() bool {
  return p.CgUUID != nil
}

func (p *ConsumerGroups) IsSetCgName() bool {
  return p.CgName != nil
}

func (p *ConsumerGroups) IsSetDestPath() bool {
  return p.DestPath != nil
}

func (p *ConsumerGroups) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConsumerGroups)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CgUUID = &v
}
  return nil
}

func (p *ConsumerGroups)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CgName = &v
}
  return nil
}

func (p *ConsumerGroups)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DestPath = &v
}
  return nil
}

func (p *ConsumerGroups) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ConsumerGroups"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConsumerGroups) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetCgUUID() {
    if err := oprot.WriteFieldBegin("cgUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cgUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.CgUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cgUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cgUUID: ", p), err) }
  }
  return err
}

func (p *ConsumerGroups) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetCgName() {
    if err := oprot.WriteFieldBegin("cgName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cgName: ", p), err) }
    if err := oprot.WriteString(string(*p.CgName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cgName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cgName: ", p), err) }
  }
  return err
}

func (p *ConsumerGroups) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestPath() {
    if err := oprot.WriteFieldBegin("destPath", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:destPath: ", p), err) }
    if err := oprot.WriteString(string(*p.DestPath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destPath (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:destPath: ", p), err) }
  }
  return err
}

func (p *ConsumerGroups) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConsumerGroups(%+v)", *p)
}

// Attributes:
//  - Cgs
type ListConsumerGroupsResult_ struct {
  Cgs []*ConsumerGroups `thrift:"cgs,1" db:"cgs" json:"cgs,omitempty"`
}

func NewListConsumerGroupsResult_() *ListConsumerGroupsResult_ {
  return &ListConsumerGroupsResult_{}
}

var ListConsumerGroupsResult__Cgs_DEFAULT []*ConsumerGroups

func (p *ListConsumerGroupsResult_) GetCgs() []*ConsumerGroups {
  return p.Cgs
}
func (p *ListConsumerGroupsResult_) IsSetCgs() bool {
  return p.Cgs != nil
}

func (p *ListConsumerGroupsResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListConsumerGroupsResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConsumerGroups, 0, size)
  p.Cgs =  tSlice
  for i := 0; i < size; i ++ {
    _elem7 := &ConsumerGroups{}
    if err := _elem7.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
    }
    p.Cgs = append(p.Cgs, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListConsumerGroupsResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListConsumerGroupsResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListConsumerGroupsResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetCgs() {
    if err := oprot.WriteFieldBegin("cgs", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cgs: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Cgs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Cgs {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cgs: ", p), err) }
  }
  return err
}

func (p *ListConsumerGroupsResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListConsumerGroupsResult_(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - ExtentUUID
//  - SealSequenceNumber
type ExtentUnreachableNotification struct {
  DestinationUUID *string `thrift:"destinationUUID,1" db:"destinationUUID" json:"destinationUUID,omitempty"`
  ExtentUUID *string `thrift:"extentUUID,2" db:"extentUUID" json:"extentUUID,omitempty"`
  SealSequenceNumber *int64 `thrift:"sealSequenceNumber,3" db:"sealSequenceNumber" json:"sealSequenceNumber,omitempty"`
}

func NewExtentUnreachableNotification() *ExtentUnreachableNotification {
  return &ExtentUnreachableNotification{}
}

var ExtentUnreachableNotification_DestinationUUID_DEFAULT string
func (p *ExtentUnreachableNotification) GetDestinationUUID() string {
  if !p.IsSetDestinationUUID() {
    return ExtentUnreachableNotification_DestinationUUID_DEFAULT
  }
return *p.DestinationUUID
}
var ExtentUnreachableNotification_ExtentUUID_DEFAULT string
func (p *ExtentUnreachableNotification) GetExtentUUID() string {
  if !p.IsSetExtentUUID() {
    return ExtentUnreachableNotification_ExtentUUID_DEFAULT
  }
return *p.ExtentUUID
}
var ExtentUnreachableNotification_SealSequenceNumber_DEFAULT int64
func (p *ExtentUnreachableNotification) GetSealSequenceNumber() int64 {
  if !p.IsSetSealSequenceNumber() {
    return ExtentUnreachableNotification_SealSequenceNumber_DEFAULT
  }
return *p.SealSequenceNumber
}
func (p *ExtentUnreachableNotification) IsSetDestinationUUID() bool {
  return p.DestinationUUID != nil
}

func (p *ExtentUnreachableNotification) IsSetExtentUUID() bool {
  return p.ExtentUUID != nil
}

func (p *ExtentUnreachableNotification) IsSetSealSequenceNumber() bool {
  return p.SealSequenceNumber != nil
}

func (p *ExtentUnreachableNotification) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExtentUnreachableNotification)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationUUID = &v
}
  return nil
}

func (p *ExtentUnreachableNotification)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExtentUUID = &v
}
  return nil
}

func (p *ExtentUnreachableNotification)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SealSequenceNumber = &v
}
  return nil
}

func (p *ExtentUnreachableNotification) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExtentUnreachableNotification"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExtentUnreachableNotification) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationUUID() {
    if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err) }
  }
  return err
}

func (p *ExtentUnreachableNotification) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentUUID() {
    if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extentUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extentUUID (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extentUUID: ", p), err) }
  }
  return err
}

func (p *ExtentUnreachableNotification) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetSealSequenceNumber() {
    if err := oprot.WriteFieldBegin("sealSequenceNumber", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sealSequenceNumber: ", p), err) }
    if err := oprot.WriteI64(int64(*p.SealSequenceNumber)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sealSequenceNumber (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sealSequenceNumber: ", p), err) }
  }
  return err
}

func (p *ExtentUnreachableNotification) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExtentUnreachableNotification(%+v)", *p)
}

// Attributes:
//  - UpdateUUID
//  - Updates
type ExtentsUnreachableRequest struct {
  UpdateUUID *string `thrift:"updateUUID,1" db:"updateUUID" json:"updateUUID,omitempty"`
  Updates []*ExtentUnreachableNotification `thrift:"updates,2" db:"updates" json:"updates,omitempty"`
}

func NewExtentsUnreachableRequest() *ExtentsUnreachableRequest {
  return &ExtentsUnreachableRequest{}
}

var ExtentsUnreachableRequest_UpdateUUID_DEFAULT string
func (p *ExtentsUnreachableRequest) GetUpdateUUID() string {
  if !p.IsSetUpdateUUID() {
    return ExtentsUnreachableRequest_UpdateUUID_DEFAULT
  }
return *p.UpdateUUID
}
var ExtentsUnreachableRequest_Updates_DEFAULT []*ExtentUnreachableNotification

func (p *ExtentsUnreachableRequest) GetUpdates() []*ExtentUnreachableNotification {
  return p.Updates
}
func (p *ExtentsUnreachableRequest) IsSetUpdateUUID() bool {
  return p.UpdateUUID != nil
}

func (p *ExtentsUnreachableRequest) IsSetUpdates() bool {
  return p.Updates != nil
}

func (p *ExtentsUnreachableRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExtentsUnreachableRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UpdateUUID = &v
}
  return nil
}

func (p *ExtentsUnreachableRequest)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ExtentUnreachableNotification, 0, size)
  p.Updates =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &ExtentUnreachableNotification{}
    if err := _elem8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.Updates = append(p.Updates, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ExtentsUnreachableRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExtentsUnreachableRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExtentsUnreachableRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetUpdateUUID() {
    if err := oprot.WriteFieldBegin("updateUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.UpdateUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updateUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateUUID: ", p), err) }
  }
  return err
}

func (p *ExtentsUnreachableRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetUpdates() {
    if err := oprot.WriteFieldBegin("updates", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:updates: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Updates)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Updates {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:updates: ", p), err) }
  }
  return err
}

func (p *ExtentsUnreachableRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExtentsUnreachableRequest(%+v)", *p)
}

type InputHostAdmin interface {
  // Parameters:
  //  - Request
  DestinationsUpdated(request *DestinationsUpdatedRequest) (err error)
}

type InputHostAdminClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewInputHostAdminClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *InputHostAdminClient {
  return &InputHostAdminClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewInputHostAdminClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *InputHostAdminClient {
  return &InputHostAdminClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - Request
func (p *InputHostAdminClient) DestinationsUpdated(request *DestinationsUpdatedRequest) (err error) {
  if err = p.sendDestinationsUpdated(request); err != nil { return }
  return p.recvDestinationsUpdated()
}

func (p *InputHostAdminClient) sendDestinationsUpdated(request *DestinationsUpdatedRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("destinationsUpdated", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := InputHostAdminDestinationsUpdatedArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *InputHostAdminClient) recvDestinationsUpdated() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "destinationsUpdated" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "destinationsUpdated failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "destinationsUpdated failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error9 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error10 error
    error10, err = error9.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error10
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "destinationsUpdated failed: invalid message type")
    return
  }
  result := InputHostAdminDestinationsUpdatedResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}


type InputHostAdminProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler InputHostAdmin
}

func (p *InputHostAdminProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *InputHostAdminProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *InputHostAdminProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewInputHostAdminProcessor(handler InputHostAdmin) *InputHostAdminProcessor {

  self11 := &InputHostAdminProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self11.processorMap["destinationsUpdated"] = &inputHostAdminProcessorDestinationsUpdated{handler:handler}
return self11
}

func (p *InputHostAdminProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x12 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x12.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x12

}

type inputHostAdminProcessorDestinationsUpdated struct {
  handler InputHostAdmin
}

func (p *inputHostAdminProcessorDestinationsUpdated) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := InputHostAdminDestinationsUpdatedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("destinationsUpdated", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := InputHostAdminDestinationsUpdatedResult{}
  var err2 error
  if err2 = p.handler.DestinationsUpdated(args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing destinationsUpdated: " + err2.Error())
    oprot.WriteMessageBegin("destinationsUpdated", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("destinationsUpdated", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type InputHostAdminDestinationsUpdatedArgs struct {
  Request *DestinationsUpdatedRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewInputHostAdminDestinationsUpdatedArgs() *InputHostAdminDestinationsUpdatedArgs {
  return &InputHostAdminDestinationsUpdatedArgs{}
}

var InputHostAdminDestinationsUpdatedArgs_Request_DEFAULT *DestinationsUpdatedRequest
func (p *InputHostAdminDestinationsUpdatedArgs) GetRequest() *DestinationsUpdatedRequest {
  if !p.IsSetRequest() {
    return InputHostAdminDestinationsUpdatedArgs_Request_DEFAULT
  }
return p.Request
}
func (p *InputHostAdminDestinationsUpdatedArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *InputHostAdminDestinationsUpdatedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InputHostAdminDestinationsUpdatedArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &DestinationsUpdatedRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *InputHostAdminDestinationsUpdatedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("destinationsUpdated_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InputHostAdminDestinationsUpdatedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *InputHostAdminDestinationsUpdatedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InputHostAdminDestinationsUpdatedArgs(%+v)", *p)
}

type InputHostAdminDestinationsUpdatedResult struct {
}

func NewInputHostAdminDestinationsUpdatedResult() *InputHostAdminDestinationsUpdatedResult {
  return &InputHostAdminDestinationsUpdatedResult{}
}

func (p *InputHostAdminDestinationsUpdatedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InputHostAdminDestinationsUpdatedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("destinationsUpdated_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InputHostAdminDestinationsUpdatedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InputHostAdminDestinationsUpdatedResult(%+v)", *p)
}


type OutputHostAdmin interface {
  // Parameters:
  //  - Request
  ConsumerGroupsUpdated(request *ConsumerGroupsUpdatedRequest) (err error)
  // Parameters:
  //  - Request
  UnloadConsumerGroups(request *UnloadConsumerGroupsRequest) (err error)
  // Parameters:
  //  - Request
  ReadCgState(request *ReadConsumerGroupStateRequest) (r *ReadConsumerGroupStateResult_, err error)
  ListLoadedConsumerGroups() (r *ListConsumerGroupsResult_, err error)
}

type OutputHostAdminClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewOutputHostAdminClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *OutputHostAdminClient {
  return &OutputHostAdminClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewOutputHostAdminClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *OutputHostAdminClient {
  return &OutputHostAdminClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - Request
func (p *OutputHostAdminClient) ConsumerGroupsUpdated(request *ConsumerGroupsUpdatedRequest) (err error) {
  if err = p.sendConsumerGroupsUpdated(request); err != nil { return }
  return p.recvConsumerGroupsUpdated()
}

func (p *OutputHostAdminClient) sendConsumerGroupsUpdated(request *ConsumerGroupsUpdatedRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("consumerGroupsUpdated", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := OutputHostAdminConsumerGroupsUpdatedArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *OutputHostAdminClient) recvConsumerGroupsUpdated() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "consumerGroupsUpdated" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "consumerGroupsUpdated failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "consumerGroupsUpdated failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error19 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error20 error
    error20, err = error19.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error20
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "consumerGroupsUpdated failed: invalid message type")
    return
  }
  result := OutputHostAdminConsumerGroupsUpdatedResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}

// Parameters:
//  - Request
func (p *OutputHostAdminClient) UnloadConsumerGroups(request *UnloadConsumerGroupsRequest) (err error) {
  if err = p.sendUnloadConsumerGroups(request); err != nil { return }
  return p.recvUnloadConsumerGroups()
}

func (p *OutputHostAdminClient) sendUnloadConsumerGroups(request *UnloadConsumerGroupsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("unloadConsumerGroups", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := OutputHostAdminUnloadConsumerGroupsArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *OutputHostAdminClient) recvUnloadConsumerGroups() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "unloadConsumerGroups" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "unloadConsumerGroups failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "unloadConsumerGroups failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error21 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error22 error
    error22, err = error21.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error22
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "unloadConsumerGroups failed: invalid message type")
    return
  }
  result := OutputHostAdminUnloadConsumerGroupsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}

// Parameters:
//  - Request
func (p *OutputHostAdminClient) ReadCgState(request *ReadConsumerGroupStateRequest) (r *ReadConsumerGroupStateResult_, err error) {
  if err = p.sendReadCgState(request); err != nil { return }
  return p.recvReadCgState()
}

func (p *OutputHostAdminClient) sendReadCgState(request *ReadConsumerGroupStateRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("readCgState", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := OutputHostAdminReadCgStateArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *OutputHostAdminClient) recvReadCgState() (value *ReadConsumerGroupStateResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "readCgState" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readCgState failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readCgState failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error23 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error24 error
    error24, err = error23.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error24
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readCgState failed: invalid message type")
    return
  }
  result := OutputHostAdminReadCgStateResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

func (p *OutputHostAdminClient) ListLoadedConsumerGroups() (r *ListConsumerGroupsResult_, err error) {
  if err = p.sendListLoadedConsumerGroups(); err != nil { return }
  return p.recvListLoadedConsumerGroups()
}

func (p *OutputHostAdminClient) sendListLoadedConsumerGroups()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listLoadedConsumerGroups", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := OutputHostAdminListLoadedConsumerGroupsArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *OutputHostAdminClient) recvListLoadedConsumerGroups() (value *ListConsumerGroupsResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listLoadedConsumerGroups" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listLoadedConsumerGroups failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listLoadedConsumerGroups failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error25 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error26 error
    error26, err = error25.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error26
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listLoadedConsumerGroups failed: invalid message type")
    return
  }
  result := OutputHostAdminListLoadedConsumerGroupsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type OutputHostAdminProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler OutputHostAdmin
}

func (p *OutputHostAdminProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *OutputHostAdminProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *OutputHostAdminProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewOutputHostAdminProcessor(handler OutputHostAdmin) *OutputHostAdminProcessor {

  self27 := &OutputHostAdminProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self27.processorMap["consumerGroupsUpdated"] = &outputHostAdminProcessorConsumerGroupsUpdated{handler:handler}
  self27.processorMap["unloadConsumerGroups"] = &outputHostAdminProcessorUnloadConsumerGroups{handler:handler}
  self27.processorMap["readCgState"] = &outputHostAdminProcessorReadCgState{handler:handler}
  self27.processorMap["listLoadedConsumerGroups"] = &outputHostAdminProcessorListLoadedConsumerGroups{handler:handler}
return self27
}

func (p *OutputHostAdminProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x28 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x28.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x28

}

type outputHostAdminProcessorConsumerGroupsUpdated struct {
  handler OutputHostAdmin
}

func (p *outputHostAdminProcessorConsumerGroupsUpdated) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OutputHostAdminConsumerGroupsUpdatedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("consumerGroupsUpdated", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OutputHostAdminConsumerGroupsUpdatedResult{}
  var err2 error
  if err2 = p.handler.ConsumerGroupsUpdated(args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing consumerGroupsUpdated: " + err2.Error())
    oprot.WriteMessageBegin("consumerGroupsUpdated", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("consumerGroupsUpdated", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type outputHostAdminProcessorUnloadConsumerGroups struct {
  handler OutputHostAdmin
}

func (p *outputHostAdminProcessorUnloadConsumerGroups) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OutputHostAdminUnloadConsumerGroupsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("unloadConsumerGroups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OutputHostAdminUnloadConsumerGroupsResult{}
  var err2 error
  if err2 = p.handler.UnloadConsumerGroups(args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unloadConsumerGroups: " + err2.Error())
    oprot.WriteMessageBegin("unloadConsumerGroups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("unloadConsumerGroups", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type outputHostAdminProcessorReadCgState struct {
  handler OutputHostAdmin
}

func (p *outputHostAdminProcessorReadCgState) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OutputHostAdminReadCgStateArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("readCgState", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OutputHostAdminReadCgStateResult{}
var retval *ReadConsumerGroupStateResult_
  var err2 error
  if retval, err2 = p.handler.ReadCgState(args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readCgState: " + err2.Error())
    oprot.WriteMessageBegin("readCgState", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("readCgState", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type outputHostAdminProcessorListLoadedConsumerGroups struct {
  handler OutputHostAdmin
}

func (p *outputHostAdminProcessorListLoadedConsumerGroups) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OutputHostAdminListLoadedConsumerGroupsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("listLoadedConsumerGroups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OutputHostAdminListLoadedConsumerGroupsResult{}
var retval *ListConsumerGroupsResult_
  var err2 error
  if retval, err2 = p.handler.ListLoadedConsumerGroups(); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listLoadedConsumerGroups: " + err2.Error())
    oprot.WriteMessageBegin("listLoadedConsumerGroups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("listLoadedConsumerGroups", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type OutputHostAdminConsumerGroupsUpdatedArgs struct {
  Request *ConsumerGroupsUpdatedRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewOutputHostAdminConsumerGroupsUpdatedArgs() *OutputHostAdminConsumerGroupsUpdatedArgs {
  return &OutputHostAdminConsumerGroupsUpdatedArgs{}
}

var OutputHostAdminConsumerGroupsUpdatedArgs_Request_DEFAULT *ConsumerGroupsUpdatedRequest
func (p *OutputHostAdminConsumerGroupsUpdatedArgs) GetRequest() *ConsumerGroupsUpdatedRequest {
  if !p.IsSetRequest() {
    return OutputHostAdminConsumerGroupsUpdatedArgs_Request_DEFAULT
  }
return p.Request
}
func (p *OutputHostAdminConsumerGroupsUpdatedArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *OutputHostAdminConsumerGroupsUpdatedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OutputHostAdminConsumerGroupsUpdatedArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &ConsumerGroupsUpdatedRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *OutputHostAdminConsumerGroupsUpdatedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("consumerGroupsUpdated_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OutputHostAdminConsumerGroupsUpdatedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *OutputHostAdminConsumerGroupsUpdatedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OutputHostAdminConsumerGroupsUpdatedArgs(%+v)", *p)
}

type OutputHostAdminConsumerGroupsUpdatedResult struct {
}

func NewOutputHostAdminConsumerGroupsUpdatedResult() *OutputHostAdminConsumerGroupsUpdatedResult {
  return &OutputHostAdminConsumerGroupsUpdatedResult{}
}

func (p *OutputHostAdminConsumerGroupsUpdatedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OutputHostAdminConsumerGroupsUpdatedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("consumerGroupsUpdated_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OutputHostAdminConsumerGroupsUpdatedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OutputHostAdminConsumerGroupsUpdatedResult(%+v)", *p)
}

// Attributes:
//  - Request
type OutputHostAdminUnloadConsumerGroupsArgs struct {
  Request *UnloadConsumerGroupsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewOutputHostAdminUnloadConsumerGroupsArgs() *OutputHostAdminUnloadConsumerGroupsArgs {
  return &OutputHostAdminUnloadConsumerGroupsArgs{}
}

var OutputHostAdminUnloadConsumerGroupsArgs_Request_DEFAULT *UnloadConsumerGroupsRequest
func (p *OutputHostAdminUnloadConsumerGroupsArgs) GetRequest() *UnloadConsumerGroupsRequest {
  if !p.IsSetRequest() {
    return OutputHostAdminUnloadConsumerGroupsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *OutputHostAdminUnloadConsumerGroupsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *OutputHostAdminUnloadConsumerGroupsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OutputHostAdminUnloadConsumerGroupsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &UnloadConsumerGroupsRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *OutputHostAdminUnloadConsumerGroupsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unloadConsumerGroups_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OutputHostAdminUnloadConsumerGroupsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *OutputHostAdminUnloadConsumerGroupsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OutputHostAdminUnloadConsumerGroupsArgs(%+v)", *p)
}

type OutputHostAdminUnloadConsumerGroupsResult struct {
}

func NewOutputHostAdminUnloadConsumerGroupsResult() *OutputHostAdminUnloadConsumerGroupsResult {
  return &OutputHostAdminUnloadConsumerGroupsResult{}
}

func (p *OutputHostAdminUnloadConsumerGroupsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OutputHostAdminUnloadConsumerGroupsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unloadConsumerGroups_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OutputHostAdminUnloadConsumerGroupsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OutputHostAdminUnloadConsumerGroupsResult(%+v)", *p)
}

// Attributes:
//  - Request
type OutputHostAdminReadCgStateArgs struct {
  Request *ReadConsumerGroupStateRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewOutputHostAdminReadCgStateArgs() *OutputHostAdminReadCgStateArgs {
  return &OutputHostAdminReadCgStateArgs{}
}

var OutputHostAdminReadCgStateArgs_Request_DEFAULT *ReadConsumerGroupStateRequest
func (p *OutputHostAdminReadCgStateArgs) GetRequest() *ReadConsumerGroupStateRequest {
  if !p.IsSetRequest() {
    return OutputHostAdminReadCgStateArgs_Request_DEFAULT
  }
return p.Request
}
func (p *OutputHostAdminReadCgStateArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *OutputHostAdminReadCgStateArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OutputHostAdminReadCgStateArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &ReadConsumerGroupStateRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *OutputHostAdminReadCgStateArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readCgState_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OutputHostAdminReadCgStateArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *OutputHostAdminReadCgStateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OutputHostAdminReadCgStateArgs(%+v)", *p)
}

// Attributes:
//  - Success
type OutputHostAdminReadCgStateResult struct {
  Success *ReadConsumerGroupStateResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewOutputHostAdminReadCgStateResult() *OutputHostAdminReadCgStateResult {
  return &OutputHostAdminReadCgStateResult{}
}

var OutputHostAdminReadCgStateResult_Success_DEFAULT *ReadConsumerGroupStateResult_
func (p *OutputHostAdminReadCgStateResult) GetSuccess() *ReadConsumerGroupStateResult_ {
  if !p.IsSetSuccess() {
    return OutputHostAdminReadCgStateResult_Success_DEFAULT
  }
return p.Success
}
func (p *OutputHostAdminReadCgStateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OutputHostAdminReadCgStateResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OutputHostAdminReadCgStateResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ReadConsumerGroupStateResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OutputHostAdminReadCgStateResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readCgState_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OutputHostAdminReadCgStateResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OutputHostAdminReadCgStateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OutputHostAdminReadCgStateResult(%+v)", *p)
}

type OutputHostAdminListLoadedConsumerGroupsArgs struct {
}

func NewOutputHostAdminListLoadedConsumerGroupsArgs() *OutputHostAdminListLoadedConsumerGroupsArgs {
  return &OutputHostAdminListLoadedConsumerGroupsArgs{}
}

func (p *OutputHostAdminListLoadedConsumerGroupsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OutputHostAdminListLoadedConsumerGroupsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listLoadedConsumerGroups_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OutputHostAdminListLoadedConsumerGroupsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OutputHostAdminListLoadedConsumerGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type OutputHostAdminListLoadedConsumerGroupsResult struct {
  Success *ListConsumerGroupsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewOutputHostAdminListLoadedConsumerGroupsResult() *OutputHostAdminListLoadedConsumerGroupsResult {
  return &OutputHostAdminListLoadedConsumerGroupsResult{}
}

var OutputHostAdminListLoadedConsumerGroupsResult_Success_DEFAULT *ListConsumerGroupsResult_
func (p *OutputHostAdminListLoadedConsumerGroupsResult) GetSuccess() *ListConsumerGroupsResult_ {
  if !p.IsSetSuccess() {
    return OutputHostAdminListLoadedConsumerGroupsResult_Success_DEFAULT
  }
return p.Success
}
func (p *OutputHostAdminListLoadedConsumerGroupsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OutputHostAdminListLoadedConsumerGroupsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OutputHostAdminListLoadedConsumerGroupsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ListConsumerGroupsResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OutputHostAdminListLoadedConsumerGroupsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listLoadedConsumerGroups_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OutputHostAdminListLoadedConsumerGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OutputHostAdminListLoadedConsumerGroupsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OutputHostAdminListLoadedConsumerGroupsResult(%+v)", *p)
}


type ControllerHostAdmin interface {
  // Parameters:
  //  - Request
  ExtentsUnreachable(request *ExtentsUnreachableRequest) (err error)
}

type ControllerHostAdminClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewControllerHostAdminClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ControllerHostAdminClient {
  return &ControllerHostAdminClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewControllerHostAdminClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ControllerHostAdminClient {
  return &ControllerHostAdminClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - Request
func (p *ControllerHostAdminClient) ExtentsUnreachable(request *ExtentsUnreachableRequest) (err error) {
  if err = p.sendExtentsUnreachable(request); err != nil { return }
  return p.recvExtentsUnreachable()
}

func (p *ControllerHostAdminClient) sendExtentsUnreachable(request *ExtentsUnreachableRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("extentsUnreachable", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ControllerHostAdminExtentsUnreachableArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ControllerHostAdminClient) recvExtentsUnreachable() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "extentsUnreachable" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "extentsUnreachable failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "extentsUnreachable failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error47 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error48 error
    error48, err = error47.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error48
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "extentsUnreachable failed: invalid message type")
    return
  }
  result := ControllerHostAdminExtentsUnreachableResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}


type ControllerHostAdminProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler ControllerHostAdmin
}

func (p *ControllerHostAdminProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ControllerHostAdminProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ControllerHostAdminProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewControllerHostAdminProcessor(handler ControllerHostAdmin) *ControllerHostAdminProcessor {

  self49 := &ControllerHostAdminProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self49.processorMap["extentsUnreachable"] = &controllerHostAdminProcessorExtentsUnreachable{handler:handler}
return self49
}

func (p *ControllerHostAdminProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x50 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x50.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x50

}

type controllerHostAdminProcessorExtentsUnreachable struct {
  handler ControllerHostAdmin
}

func (p *controllerHostAdminProcessorExtentsUnreachable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ControllerHostAdminExtentsUnreachableArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("extentsUnreachable", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ControllerHostAdminExtentsUnreachableResult{}
  var err2 error
  if err2 = p.handler.ExtentsUnreachable(args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing extentsUnreachable: " + err2.Error())
    oprot.WriteMessageBegin("extentsUnreachable", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("extentsUnreachable", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type ControllerHostAdminExtentsUnreachableArgs struct {
  Request *ExtentsUnreachableRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewControllerHostAdminExtentsUnreachableArgs() *ControllerHostAdminExtentsUnreachableArgs {
  return &ControllerHostAdminExtentsUnreachableArgs{}
}

var ControllerHostAdminExtentsUnreachableArgs_Request_DEFAULT *ExtentsUnreachableRequest
func (p *ControllerHostAdminExtentsUnreachableArgs) GetRequest() *ExtentsUnreachableRequest {
  if !p.IsSetRequest() {
    return ControllerHostAdminExtentsUnreachableArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ControllerHostAdminExtentsUnreachableArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ControllerHostAdminExtentsUnreachableArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerHostAdminExtentsUnreachableArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &ExtentsUnreachableRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ControllerHostAdminExtentsUnreachableArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("extentsUnreachable_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerHostAdminExtentsUnreachableArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ControllerHostAdminExtentsUnreachableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerHostAdminExtentsUnreachableArgs(%+v)", *p)
}

type ControllerHostAdminExtentsUnreachableResult struct {
}

func NewControllerHostAdminExtentsUnreachableResult() *ControllerHostAdminExtentsUnreachableResult {
  return &ControllerHostAdminExtentsUnreachableResult{}
}

func (p *ControllerHostAdminExtentsUnreachableResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerHostAdminExtentsUnreachableResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("extentsUnreachable_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerHostAdminExtentsUnreachableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerHostAdminExtentsUnreachableResult(%+v)", *p)
}


