// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package admin

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type NotificationType int64

const (
	NotificationType_HOST   NotificationType = 1
	NotificationType_CLIENT NotificationType = 2
	NotificationType_ALL    NotificationType = 3
)

func (p NotificationType) String() string {
	switch p {
	case NotificationType_HOST:
		return "HOST"
	case NotificationType_CLIENT:
		return "CLIENT"
	case NotificationType_ALL:
		return "ALL"
	}
	return "<UNSET>"
}

func NotificationTypeFromString(s string) (NotificationType, error) {
	switch s {
	case "HOST":
		return NotificationType_HOST, nil
	case "CLIENT":
		return NotificationType_CLIENT, nil
	case "ALL":
		return NotificationType_ALL, nil
	}
	return NotificationType(0), fmt.Errorf("not a valid NotificationType string")
}

func NotificationTypePtr(v NotificationType) *NotificationType { return &v }

func (p NotificationType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *NotificationType) UnmarshalText(text []byte) error {
	q, err := NotificationTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Attributes:
//  - NumberOfConnections
type ReconfigureClientInfo struct {
	NumberOfConnections *int32 `thrift:"numberOfConnections,1" json:"numberOfConnections,omitempty"`
}

func NewReconfigureClientInfo() *ReconfigureClientInfo {
	return &ReconfigureClientInfo{}
}

var ReconfigureClientInfo_NumberOfConnections_DEFAULT int32

func (p *ReconfigureClientInfo) GetNumberOfConnections() int32 {
	if !p.IsSetNumberOfConnections() {
		return ReconfigureClientInfo_NumberOfConnections_DEFAULT
	}
	return *p.NumberOfConnections
}
func (p *ReconfigureClientInfo) IsSetNumberOfConnections() bool {
	return p.NumberOfConnections != nil
}

func (p *ReconfigureClientInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReconfigureClientInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NumberOfConnections = &v
	}
	return nil
}

func (p *ReconfigureClientInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReconfigureClientInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReconfigureClientInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumberOfConnections() {
		if err := oprot.WriteFieldBegin("numberOfConnections", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:numberOfConnections: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.NumberOfConnections)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.numberOfConnections (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:numberOfConnections: ", p), err)
		}
	}
	return err
}

func (p *ReconfigureClientInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReconfigureClientInfo(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - Type
//  - ClientInfo
//  - ExtentUUID
//  - StoreIds
type DestinationUpdatedNotification struct {
	DestinationUUID *string                `thrift:"destinationUUID,1" json:"destinationUUID,omitempty"`
	Type            *NotificationType      `thrift:"type,2" json:"type,omitempty"`
	ClientInfo      *ReconfigureClientInfo `thrift:"clientInfo,3" json:"clientInfo,omitempty"`
	ExtentUUID      *string                `thrift:"extentUUID,4" json:"extentUUID,omitempty"`
	StoreIds        []string               `thrift:"storeIds,5" json:"storeIds,omitempty"`
}

func NewDestinationUpdatedNotification() *DestinationUpdatedNotification {
	return &DestinationUpdatedNotification{}
}

var DestinationUpdatedNotification_DestinationUUID_DEFAULT string

func (p *DestinationUpdatedNotification) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return DestinationUpdatedNotification_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var DestinationUpdatedNotification_Type_DEFAULT NotificationType

func (p *DestinationUpdatedNotification) GetType() NotificationType {
	if !p.IsSetType() {
		return DestinationUpdatedNotification_Type_DEFAULT
	}
	return *p.Type
}

var DestinationUpdatedNotification_ClientInfo_DEFAULT *ReconfigureClientInfo

func (p *DestinationUpdatedNotification) GetClientInfo() *ReconfigureClientInfo {
	if !p.IsSetClientInfo() {
		return DestinationUpdatedNotification_ClientInfo_DEFAULT
	}
	return p.ClientInfo
}

var DestinationUpdatedNotification_ExtentUUID_DEFAULT string

func (p *DestinationUpdatedNotification) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return DestinationUpdatedNotification_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var DestinationUpdatedNotification_StoreIds_DEFAULT []string

func (p *DestinationUpdatedNotification) GetStoreIds() []string {
	return p.StoreIds
}
func (p *DestinationUpdatedNotification) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *DestinationUpdatedNotification) IsSetType() bool {
	return p.Type != nil
}

func (p *DestinationUpdatedNotification) IsSetClientInfo() bool {
	return p.ClientInfo != nil
}

func (p *DestinationUpdatedNotification) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *DestinationUpdatedNotification) IsSetStoreIds() bool {
	return p.StoreIds != nil
}

func (p *DestinationUpdatedNotification) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DestinationUpdatedNotification) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *DestinationUpdatedNotification) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := NotificationType(v)
		p.Type = &temp
	}
	return nil
}

func (p *DestinationUpdatedNotification) readField3(iprot thrift.TProtocol) error {
	p.ClientInfo = &ReconfigureClientInfo{}
	if err := p.ClientInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ClientInfo), err)
	}
	return nil
}

func (p *DestinationUpdatedNotification) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *DestinationUpdatedNotification) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.StoreIds = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.StoreIds = append(p.StoreIds, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DestinationUpdatedNotification) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DestinationUpdatedNotification"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DestinationUpdatedNotification) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *DestinationUpdatedNotification) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
		}
	}
	return err
}

func (p *DestinationUpdatedNotification) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetClientInfo() {
		if err := oprot.WriteFieldBegin("clientInfo", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:clientInfo: ", p), err)
		}
		if err := p.ClientInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ClientInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:clientInfo: ", p), err)
		}
	}
	return err
}

func (p *DestinationUpdatedNotification) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *DestinationUpdatedNotification) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoreIds() {
		if err := oprot.WriteFieldBegin("storeIds", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:storeIds: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.StoreIds)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.StoreIds {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:storeIds: ", p), err)
		}
	}
	return err
}

func (p *DestinationUpdatedNotification) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DestinationUpdatedNotification(%+v)", *p)
}

// Attributes:
//  - UpdateUUID
//  - Updates
type DestinationsUpdatedRequest struct {
	UpdateUUID *string                           `thrift:"updateUUID,1" json:"updateUUID,omitempty"`
	Updates    []*DestinationUpdatedNotification `thrift:"updates,2" json:"updates,omitempty"`
}

func NewDestinationsUpdatedRequest() *DestinationsUpdatedRequest {
	return &DestinationsUpdatedRequest{}
}

var DestinationsUpdatedRequest_UpdateUUID_DEFAULT string

func (p *DestinationsUpdatedRequest) GetUpdateUUID() string {
	if !p.IsSetUpdateUUID() {
		return DestinationsUpdatedRequest_UpdateUUID_DEFAULT
	}
	return *p.UpdateUUID
}

var DestinationsUpdatedRequest_Updates_DEFAULT []*DestinationUpdatedNotification

func (p *DestinationsUpdatedRequest) GetUpdates() []*DestinationUpdatedNotification {
	return p.Updates
}
func (p *DestinationsUpdatedRequest) IsSetUpdateUUID() bool {
	return p.UpdateUUID != nil
}

func (p *DestinationsUpdatedRequest) IsSetUpdates() bool {
	return p.Updates != nil
}

func (p *DestinationsUpdatedRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DestinationsUpdatedRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UpdateUUID = &v
	}
	return nil
}

func (p *DestinationsUpdatedRequest) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*DestinationUpdatedNotification, 0, size)
	p.Updates = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &DestinationUpdatedNotification{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.Updates = append(p.Updates, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DestinationsUpdatedRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DestinationsUpdatedRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DestinationsUpdatedRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateUUID() {
		if err := oprot.WriteFieldBegin("updateUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.UpdateUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updateUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateUUID: ", p), err)
		}
	}
	return err
}

func (p *DestinationsUpdatedRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdates() {
		if err := oprot.WriteFieldBegin("updates", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:updates: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Updates)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Updates {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:updates: ", p), err)
		}
	}
	return err
}

func (p *DestinationsUpdatedRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DestinationsUpdatedRequest(%+v)", *p)
}

// Attributes:
//  - ConsumerGroupUUID
//  - Type
//  - ClientInfo
type ConsumerGroupUpdatedNotification struct {
	ConsumerGroupUUID *string                `thrift:"consumerGroupUUID,1" json:"consumerGroupUUID,omitempty"`
	Type              *NotificationType      `thrift:"type,2" json:"type,omitempty"`
	ClientInfo        *ReconfigureClientInfo `thrift:"clientInfo,3" json:"clientInfo,omitempty"`
}

func NewConsumerGroupUpdatedNotification() *ConsumerGroupUpdatedNotification {
	return &ConsumerGroupUpdatedNotification{}
}

var ConsumerGroupUpdatedNotification_ConsumerGroupUUID_DEFAULT string

func (p *ConsumerGroupUpdatedNotification) GetConsumerGroupUUID() string {
	if !p.IsSetConsumerGroupUUID() {
		return ConsumerGroupUpdatedNotification_ConsumerGroupUUID_DEFAULT
	}
	return *p.ConsumerGroupUUID
}

var ConsumerGroupUpdatedNotification_Type_DEFAULT NotificationType

func (p *ConsumerGroupUpdatedNotification) GetType() NotificationType {
	if !p.IsSetType() {
		return ConsumerGroupUpdatedNotification_Type_DEFAULT
	}
	return *p.Type
}

var ConsumerGroupUpdatedNotification_ClientInfo_DEFAULT *ReconfigureClientInfo

func (p *ConsumerGroupUpdatedNotification) GetClientInfo() *ReconfigureClientInfo {
	if !p.IsSetClientInfo() {
		return ConsumerGroupUpdatedNotification_ClientInfo_DEFAULT
	}
	return p.ClientInfo
}
func (p *ConsumerGroupUpdatedNotification) IsSetConsumerGroupUUID() bool {
	return p.ConsumerGroupUUID != nil
}

func (p *ConsumerGroupUpdatedNotification) IsSetType() bool {
	return p.Type != nil
}

func (p *ConsumerGroupUpdatedNotification) IsSetClientInfo() bool {
	return p.ClientInfo != nil
}

func (p *ConsumerGroupUpdatedNotification) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConsumerGroupUpdatedNotification) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ConsumerGroupUUID = &v
	}
	return nil
}

func (p *ConsumerGroupUpdatedNotification) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := NotificationType(v)
		p.Type = &temp
	}
	return nil
}

func (p *ConsumerGroupUpdatedNotification) readField3(iprot thrift.TProtocol) error {
	p.ClientInfo = &ReconfigureClientInfo{}
	if err := p.ClientInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ClientInfo), err)
	}
	return nil
}

func (p *ConsumerGroupUpdatedNotification) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConsumerGroupUpdatedNotification"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ConsumerGroupUpdatedNotification) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupUUID() {
		if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:consumerGroupUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:consumerGroupUUID: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupUpdatedNotification) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupUpdatedNotification) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetClientInfo() {
		if err := oprot.WriteFieldBegin("clientInfo", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:clientInfo: ", p), err)
		}
		if err := p.ClientInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ClientInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:clientInfo: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupUpdatedNotification) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConsumerGroupUpdatedNotification(%+v)", *p)
}

// Attributes:
//  - UpdateUUID
//  - Updates
type ConsumerGroupsUpdatedRequest struct {
	UpdateUUID *string                             `thrift:"updateUUID,1" json:"updateUUID,omitempty"`
	Updates    []*ConsumerGroupUpdatedNotification `thrift:"updates,2" json:"updates,omitempty"`
}

func NewConsumerGroupsUpdatedRequest() *ConsumerGroupsUpdatedRequest {
	return &ConsumerGroupsUpdatedRequest{}
}

var ConsumerGroupsUpdatedRequest_UpdateUUID_DEFAULT string

func (p *ConsumerGroupsUpdatedRequest) GetUpdateUUID() string {
	if !p.IsSetUpdateUUID() {
		return ConsumerGroupsUpdatedRequest_UpdateUUID_DEFAULT
	}
	return *p.UpdateUUID
}

var ConsumerGroupsUpdatedRequest_Updates_DEFAULT []*ConsumerGroupUpdatedNotification

func (p *ConsumerGroupsUpdatedRequest) GetUpdates() []*ConsumerGroupUpdatedNotification {
	return p.Updates
}
func (p *ConsumerGroupsUpdatedRequest) IsSetUpdateUUID() bool {
	return p.UpdateUUID != nil
}

func (p *ConsumerGroupsUpdatedRequest) IsSetUpdates() bool {
	return p.Updates != nil
}

func (p *ConsumerGroupsUpdatedRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConsumerGroupsUpdatedRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UpdateUUID = &v
	}
	return nil
}

func (p *ConsumerGroupsUpdatedRequest) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ConsumerGroupUpdatedNotification, 0, size)
	p.Updates = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &ConsumerGroupUpdatedNotification{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.Updates = append(p.Updates, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ConsumerGroupsUpdatedRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConsumerGroupsUpdatedRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ConsumerGroupsUpdatedRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateUUID() {
		if err := oprot.WriteFieldBegin("updateUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.UpdateUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updateUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateUUID: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupsUpdatedRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdates() {
		if err := oprot.WriteFieldBegin("updates", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:updates: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Updates)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Updates {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:updates: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupsUpdatedRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConsumerGroupsUpdatedRequest(%+v)", *p)
}

// Attributes:
//  - CgUUIDs
type UnloadConsumerGroupsRequest struct {
	CgUUIDs []string `thrift:"cgUUIDs,1" json:"cgUUIDs,omitempty"`
}

func NewUnloadConsumerGroupsRequest() *UnloadConsumerGroupsRequest {
	return &UnloadConsumerGroupsRequest{}
}

var UnloadConsumerGroupsRequest_CgUUIDs_DEFAULT []string

func (p *UnloadConsumerGroupsRequest) GetCgUUIDs() []string {
	return p.CgUUIDs
}
func (p *UnloadConsumerGroupsRequest) IsSetCgUUIDs() bool {
	return p.CgUUIDs != nil
}

func (p *UnloadConsumerGroupsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UnloadConsumerGroupsRequest) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.CgUUIDs = tSlice
	for i := 0; i < size; i++ {
		var _elem3 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem3 = v
		}
		p.CgUUIDs = append(p.CgUUIDs, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UnloadConsumerGroupsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UnloadConsumerGroupsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UnloadConsumerGroupsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCgUUIDs() {
		if err := oprot.WriteFieldBegin("cgUUIDs", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cgUUIDs: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.CgUUIDs)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.CgUUIDs {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cgUUIDs: ", p), err)
		}
	}
	return err
}

func (p *UnloadConsumerGroupsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnloadConsumerGroupsRequest(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - ExtentUUID
//  - SealSequenceNumber
type ExtentUnreachableNotification struct {
	DestinationUUID    *string `thrift:"destinationUUID,1" json:"destinationUUID,omitempty"`
	ExtentUUID         *string `thrift:"extentUUID,2" json:"extentUUID,omitempty"`
	SealSequenceNumber *int64  `thrift:"sealSequenceNumber,3" json:"sealSequenceNumber,omitempty"`
}

func NewExtentUnreachableNotification() *ExtentUnreachableNotification {
	return &ExtentUnreachableNotification{}
}

var ExtentUnreachableNotification_DestinationUUID_DEFAULT string

func (p *ExtentUnreachableNotification) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return ExtentUnreachableNotification_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var ExtentUnreachableNotification_ExtentUUID_DEFAULT string

func (p *ExtentUnreachableNotification) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return ExtentUnreachableNotification_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var ExtentUnreachableNotification_SealSequenceNumber_DEFAULT int64

func (p *ExtentUnreachableNotification) GetSealSequenceNumber() int64 {
	if !p.IsSetSealSequenceNumber() {
		return ExtentUnreachableNotification_SealSequenceNumber_DEFAULT
	}
	return *p.SealSequenceNumber
}
func (p *ExtentUnreachableNotification) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *ExtentUnreachableNotification) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *ExtentUnreachableNotification) IsSetSealSequenceNumber() bool {
	return p.SealSequenceNumber != nil
}

func (p *ExtentUnreachableNotification) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ExtentUnreachableNotification) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *ExtentUnreachableNotification) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *ExtentUnreachableNotification) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SealSequenceNumber = &v
	}
	return nil
}

func (p *ExtentUnreachableNotification) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExtentUnreachableNotification"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExtentUnreachableNotification) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *ExtentUnreachableNotification) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *ExtentUnreachableNotification) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSealSequenceNumber() {
		if err := oprot.WriteFieldBegin("sealSequenceNumber", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sealSequenceNumber: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SealSequenceNumber)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sealSequenceNumber (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sealSequenceNumber: ", p), err)
		}
	}
	return err
}

func (p *ExtentUnreachableNotification) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExtentUnreachableNotification(%+v)", *p)
}

// Attributes:
//  - UpdateUUID
//  - Updates
type ExtentsUnreachableRequest struct {
	UpdateUUID *string                          `thrift:"updateUUID,1" json:"updateUUID,omitempty"`
	Updates    []*ExtentUnreachableNotification `thrift:"updates,2" json:"updates,omitempty"`
}

func NewExtentsUnreachableRequest() *ExtentsUnreachableRequest {
	return &ExtentsUnreachableRequest{}
}

var ExtentsUnreachableRequest_UpdateUUID_DEFAULT string

func (p *ExtentsUnreachableRequest) GetUpdateUUID() string {
	if !p.IsSetUpdateUUID() {
		return ExtentsUnreachableRequest_UpdateUUID_DEFAULT
	}
	return *p.UpdateUUID
}

var ExtentsUnreachableRequest_Updates_DEFAULT []*ExtentUnreachableNotification

func (p *ExtentsUnreachableRequest) GetUpdates() []*ExtentUnreachableNotification {
	return p.Updates
}
func (p *ExtentsUnreachableRequest) IsSetUpdateUUID() bool {
	return p.UpdateUUID != nil
}

func (p *ExtentsUnreachableRequest) IsSetUpdates() bool {
	return p.Updates != nil
}

func (p *ExtentsUnreachableRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ExtentsUnreachableRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UpdateUUID = &v
	}
	return nil
}

func (p *ExtentsUnreachableRequest) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ExtentUnreachableNotification, 0, size)
	p.Updates = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &ExtentUnreachableNotification{}
		if err := _elem4.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
		}
		p.Updates = append(p.Updates, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ExtentsUnreachableRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExtentsUnreachableRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExtentsUnreachableRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateUUID() {
		if err := oprot.WriteFieldBegin("updateUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.UpdateUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updateUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateUUID: ", p), err)
		}
	}
	return err
}

func (p *ExtentsUnreachableRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdates() {
		if err := oprot.WriteFieldBegin("updates", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:updates: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Updates)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Updates {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:updates: ", p), err)
		}
	}
	return err
}

func (p *ExtentsUnreachableRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExtentsUnreachableRequest(%+v)", *p)
}
