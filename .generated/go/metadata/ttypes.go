// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package metadata

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/cherami-thrift/.generated/go/shared"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = shared.GoUnusedProtection__
var GoUnusedProtection__ int

type ConsumerGroupExtentStatus int64

const (
	ConsumerGroupExtentStatus_OPEN     ConsumerGroupExtentStatus = 0
	ConsumerGroupExtentStatus_CONSUMED ConsumerGroupExtentStatus = 1
	ConsumerGroupExtentStatus_DELETED  ConsumerGroupExtentStatus = 2
)

func (p ConsumerGroupExtentStatus) String() string {
	switch p {
	case ConsumerGroupExtentStatus_OPEN:
		return "OPEN"
	case ConsumerGroupExtentStatus_CONSUMED:
		return "CONSUMED"
	case ConsumerGroupExtentStatus_DELETED:
		return "DELETED"
	}
	return "<UNSET>"
}

func ConsumerGroupExtentStatusFromString(s string) (ConsumerGroupExtentStatus, error) {
	switch s {
	case "OPEN":
		return ConsumerGroupExtentStatus_OPEN, nil
	case "CONSUMED":
		return ConsumerGroupExtentStatus_CONSUMED, nil
	case "DELETED":
		return ConsumerGroupExtentStatus_DELETED, nil
	}
	return ConsumerGroupExtentStatus(0), fmt.Errorf("not a valid ConsumerGroupExtentStatus string")
}

func ConsumerGroupExtentStatusPtr(v ConsumerGroupExtentStatus) *ConsumerGroupExtentStatus { return &v }

func (p ConsumerGroupExtentStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ConsumerGroupExtentStatus) UnmarshalText(text []byte) error {
	q, err := ConsumerGroupExtentStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type HostType int64

const (
	HostType_UNKNOWN HostType = -1
	HostType_HOST    HostType = 0
	HostType_UUID    HostType = 1
)

func (p HostType) String() string {
	switch p {
	case HostType_UNKNOWN:
		return "UNKNOWN"
	case HostType_HOST:
		return "HOST"
	case HostType_UUID:
		return "UUID"
	}
	return "<UNSET>"
}

func HostTypeFromString(s string) (HostType, error) {
	switch s {
	case "UNKNOWN":
		return HostType_UNKNOWN, nil
	case "HOST":
		return HostType_HOST, nil
	case "UUID":
		return HostType_UUID, nil
	}
	return HostType(0), fmt.Errorf("not a valid HostType string")
}

func HostTypePtr(v HostType) *HostType { return &v }

func (p HostType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *HostType) UnmarshalText(text []byte) error {
	q, err := HostTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Attributes:
//  - Message
type IllegalStateError struct {
	Message string `thrift:"message,1,required" json:"message"`
}

func NewIllegalStateError() *IllegalStateError {
	return &IllegalStateError{}
}

func (p *IllegalStateError) GetMessage() string {
	return p.Message
}
func (p *IllegalStateError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMessage bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetMessage = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMessage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"))
	}
	return nil
}

func (p *IllegalStateError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *IllegalStateError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IllegalStateError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IllegalStateError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *IllegalStateError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IllegalStateError(%+v)", *p)
}

func (p *IllegalStateError) Error() string {
	return p.String()
}

// Attributes:
//  - Path
//  - DestinationUUID
type ReadDestinationRequest struct {
	Path            *string `thrift:"path,1" json:"path,omitempty"`
	DestinationUUID *string `thrift:"destinationUUID,2" json:"destinationUUID,omitempty"`
}

func NewReadDestinationRequest() *ReadDestinationRequest {
	return &ReadDestinationRequest{}
}

var ReadDestinationRequest_Path_DEFAULT string

func (p *ReadDestinationRequest) GetPath() string {
	if !p.IsSetPath() {
		return ReadDestinationRequest_Path_DEFAULT
	}
	return *p.Path
}

var ReadDestinationRequest_DestinationUUID_DEFAULT string

func (p *ReadDestinationRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return ReadDestinationRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}
func (p *ReadDestinationRequest) IsSetPath() bool {
	return p.Path != nil
}

func (p *ReadDestinationRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *ReadDestinationRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadDestinationRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = &v
	}
	return nil
}

func (p *ReadDestinationRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *ReadDestinationRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadDestinationRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadDestinationRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPath() {
		if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Path)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
		}
	}
	return err
}

func (p *ReadDestinationRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *ReadDestinationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadDestinationRequest(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - DLQPurgeBefore
//  - DLQMergeBefore
type UpdateDestinationDLQCursorsRequest struct {
	DestinationUUID *string `thrift:"destinationUUID,1" json:"destinationUUID,omitempty"`
	DLQPurgeBefore  *int64  `thrift:"dLQPurgeBefore,2" json:"dLQPurgeBefore,omitempty"`
	DLQMergeBefore  *int64  `thrift:"dLQMergeBefore,3" json:"dLQMergeBefore,omitempty"`
}

func NewUpdateDestinationDLQCursorsRequest() *UpdateDestinationDLQCursorsRequest {
	return &UpdateDestinationDLQCursorsRequest{}
}

var UpdateDestinationDLQCursorsRequest_DestinationUUID_DEFAULT string

func (p *UpdateDestinationDLQCursorsRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return UpdateDestinationDLQCursorsRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var UpdateDestinationDLQCursorsRequest_DLQPurgeBefore_DEFAULT int64

func (p *UpdateDestinationDLQCursorsRequest) GetDLQPurgeBefore() int64 {
	if !p.IsSetDLQPurgeBefore() {
		return UpdateDestinationDLQCursorsRequest_DLQPurgeBefore_DEFAULT
	}
	return *p.DLQPurgeBefore
}

var UpdateDestinationDLQCursorsRequest_DLQMergeBefore_DEFAULT int64

func (p *UpdateDestinationDLQCursorsRequest) GetDLQMergeBefore() int64 {
	if !p.IsSetDLQMergeBefore() {
		return UpdateDestinationDLQCursorsRequest_DLQMergeBefore_DEFAULT
	}
	return *p.DLQMergeBefore
}
func (p *UpdateDestinationDLQCursorsRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *UpdateDestinationDLQCursorsRequest) IsSetDLQPurgeBefore() bool {
	return p.DLQPurgeBefore != nil
}

func (p *UpdateDestinationDLQCursorsRequest) IsSetDLQMergeBefore() bool {
	return p.DLQMergeBefore != nil
}

func (p *UpdateDestinationDLQCursorsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateDestinationDLQCursorsRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *UpdateDestinationDLQCursorsRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DLQPurgeBefore = &v
	}
	return nil
}

func (p *UpdateDestinationDLQCursorsRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DLQMergeBefore = &v
	}
	return nil
}

func (p *UpdateDestinationDLQCursorsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateDestinationDLQCursorsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateDestinationDLQCursorsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *UpdateDestinationDLQCursorsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDLQPurgeBefore() {
		if err := oprot.WriteFieldBegin("dLQPurgeBefore", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dLQPurgeBefore: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.DLQPurgeBefore)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.dLQPurgeBefore (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dLQPurgeBefore: ", p), err)
		}
	}
	return err
}

func (p *UpdateDestinationDLQCursorsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDLQMergeBefore() {
		if err := oprot.WriteFieldBegin("dLQMergeBefore", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dLQMergeBefore: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.DLQMergeBefore)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.dLQMergeBefore (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dLQMergeBefore: ", p), err)
		}
	}
	return err
}

func (p *UpdateDestinationDLQCursorsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateDestinationDLQCursorsRequest(%+v)", *p)
}

// Attributes:
//  - UUID
//  - TtlSeconds
type DeleteDestinationUUIDRequest struct {
	UUID       *string `thrift:"UUID,1" json:"UUID,omitempty"`
	TtlSeconds *int32  `thrift:"ttlSeconds,2" json:"ttlSeconds,omitempty"`
}

func NewDeleteDestinationUUIDRequest() *DeleteDestinationUUIDRequest {
	return &DeleteDestinationUUIDRequest{}
}

var DeleteDestinationUUIDRequest_UUID_DEFAULT string

func (p *DeleteDestinationUUIDRequest) GetUUID() string {
	if !p.IsSetUUID() {
		return DeleteDestinationUUIDRequest_UUID_DEFAULT
	}
	return *p.UUID
}

var DeleteDestinationUUIDRequest_TtlSeconds_DEFAULT int32

func (p *DeleteDestinationUUIDRequest) GetTtlSeconds() int32 {
	if !p.IsSetTtlSeconds() {
		return DeleteDestinationUUIDRequest_TtlSeconds_DEFAULT
	}
	return *p.TtlSeconds
}
func (p *DeleteDestinationUUIDRequest) IsSetUUID() bool {
	return p.UUID != nil
}

func (p *DeleteDestinationUUIDRequest) IsSetTtlSeconds() bool {
	return p.TtlSeconds != nil
}

func (p *DeleteDestinationUUIDRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DeleteDestinationUUIDRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UUID = &v
	}
	return nil
}

func (p *DeleteDestinationUUIDRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TtlSeconds = &v
	}
	return nil
}

func (p *DeleteDestinationUUIDRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteDestinationUUIDRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DeleteDestinationUUIDRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUUID() {
		if err := oprot.WriteFieldBegin("UUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.UUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.UUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UUID: ", p), err)
		}
	}
	return err
}

func (p *DeleteDestinationUUIDRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTtlSeconds() {
		if err := oprot.WriteFieldBegin("ttlSeconds", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ttlSeconds: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.TtlSeconds)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ttlSeconds (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ttlSeconds: ", p), err)
		}
	}
	return err
}

func (p *DeleteDestinationUUIDRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteDestinationUUIDRequest(%+v)", *p)
}

//  * UUID type means getting the host information from uuit_to_hostaddr table, which contains history data
// *
//
// Attributes:
//  - HostName
//  - HostAddr
//  - HostUUID
type HostDescription struct {
	HostName *string `thrift:"hostName,1" json:"hostName,omitempty"`
	HostAddr *string `thrift:"hostAddr,2" json:"hostAddr,omitempty"`
	HostUUID *string `thrift:"hostUUID,3" json:"hostUUID,omitempty"`
}

func NewHostDescription() *HostDescription {
	return &HostDescription{}
}

var HostDescription_HostName_DEFAULT string

func (p *HostDescription) GetHostName() string {
	if !p.IsSetHostName() {
		return HostDescription_HostName_DEFAULT
	}
	return *p.HostName
}

var HostDescription_HostAddr_DEFAULT string

func (p *HostDescription) GetHostAddr() string {
	if !p.IsSetHostAddr() {
		return HostDescription_HostAddr_DEFAULT
	}
	return *p.HostAddr
}

var HostDescription_HostUUID_DEFAULT string

func (p *HostDescription) GetHostUUID() string {
	if !p.IsSetHostUUID() {
		return HostDescription_HostUUID_DEFAULT
	}
	return *p.HostUUID
}
func (p *HostDescription) IsSetHostName() bool {
	return p.HostName != nil
}

func (p *HostDescription) IsSetHostAddr() bool {
	return p.HostAddr != nil
}

func (p *HostDescription) IsSetHostUUID() bool {
	return p.HostUUID != nil
}

func (p *HostDescription) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HostDescription) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HostName = &v
	}
	return nil
}

func (p *HostDescription) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.HostAddr = &v
	}
	return nil
}

func (p *HostDescription) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.HostUUID = &v
	}
	return nil
}

func (p *HostDescription) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HostDescription"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HostDescription) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostName() {
		if err := oprot.WriteFieldBegin("hostName", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HostName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hostName (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostName: ", p), err)
		}
	}
	return err
}

func (p *HostDescription) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostAddr() {
		if err := oprot.WriteFieldBegin("hostAddr", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostAddr: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HostAddr)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hostAddr (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostAddr: ", p), err)
		}
	}
	return err
}

func (p *HostDescription) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostUUID() {
		if err := oprot.WriteFieldBegin("hostUUID", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hostUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HostUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hostUUID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hostUUID: ", p), err)
		}
	}
	return err
}

func (p *HostDescription) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HostDescription(%+v)", *p)
}

// Attributes:
//  - HostType
//  - PageToken
//  - Limit
type ListHostsRequest struct {
	HostType  *HostType `thrift:"hostType,1" json:"hostType,omitempty"`
	PageToken []byte    `thrift:"pageToken,2" json:"pageToken,omitempty"`
	Limit     *int64    `thrift:"limit,3" json:"limit,omitempty"`
}

func NewListHostsRequest() *ListHostsRequest {
	return &ListHostsRequest{}
}

var ListHostsRequest_HostType_DEFAULT HostType

func (p *ListHostsRequest) GetHostType() HostType {
	if !p.IsSetHostType() {
		return ListHostsRequest_HostType_DEFAULT
	}
	return *p.HostType
}

var ListHostsRequest_PageToken_DEFAULT []byte

func (p *ListHostsRequest) GetPageToken() []byte {
	return p.PageToken
}

var ListHostsRequest_Limit_DEFAULT int64

func (p *ListHostsRequest) GetLimit() int64 {
	if !p.IsSetLimit() {
		return ListHostsRequest_Limit_DEFAULT
	}
	return *p.Limit
}
func (p *ListHostsRequest) IsSetHostType() bool {
	return p.HostType != nil
}

func (p *ListHostsRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListHostsRequest) IsSetLimit() bool {
	return p.Limit != nil
}

func (p *ListHostsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListHostsRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := HostType(v)
		p.HostType = &temp
	}
	return nil
}

func (p *ListHostsRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PageToken = v
	}
	return nil
}

func (p *ListHostsRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Limit = &v
	}
	return nil
}

func (p *ListHostsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListHostsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListHostsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostType() {
		if err := oprot.WriteFieldBegin("hostType", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.HostType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hostType (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostType: ", p), err)
		}
	}
	return err
}

func (p *ListHostsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err := oprot.WriteFieldBegin("pageToken", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pageToken: ", p), err)
		}
		if err := oprot.WriteBinary(p.PageToken); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pageToken (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pageToken: ", p), err)
		}
	}
	return err
}

func (p *ListHostsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err := oprot.WriteFieldBegin("limit", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limit: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Limit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.limit (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limit: ", p), err)
		}
	}
	return err
}

func (p *ListHostsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListHostsRequest(%+v)", *p)
}

// Attributes:
//  - Hosts
//  - NextPageToken
type ListHostsResult_ struct {
	Hosts         []*HostDescription `thrift:"hosts,1" json:"hosts,omitempty"`
	NextPageToken []byte             `thrift:"nextPageToken,2" json:"nextPageToken,omitempty"`
}

func NewListHostsResult_() *ListHostsResult_ {
	return &ListHostsResult_{}
}

var ListHostsResult__Hosts_DEFAULT []*HostDescription

func (p *ListHostsResult_) GetHosts() []*HostDescription {
	return p.Hosts
}

var ListHostsResult__NextPageToken_DEFAULT []byte

func (p *ListHostsResult_) GetNextPageToken() []byte {
	return p.NextPageToken
}
func (p *ListHostsResult_) IsSetHosts() bool {
	return p.Hosts != nil
}

func (p *ListHostsResult_) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListHostsResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListHostsResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*HostDescription, 0, size)
	p.Hosts = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &HostDescription{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Hosts = append(p.Hosts, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ListHostsResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NextPageToken = v
	}
	return nil
}

func (p *ListHostsResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListHostsResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListHostsResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHosts() {
		if err := oprot.WriteFieldBegin("hosts", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hosts: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Hosts)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Hosts {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hosts: ", p), err)
		}
	}
	return err
}

func (p *ListHostsResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err := oprot.WriteFieldBegin("nextPageToken", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nextPageToken: ", p), err)
		}
		if err := oprot.WriteBinary(p.NextPageToken); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nextPageToken (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nextPageToken: ", p), err)
		}
	}
	return err
}

func (p *ListHostsResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListHostsResult_(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
//  - DestinationUUID
//  - ConsumerGroupUUID
type ReadConsumerGroupRequest struct {
	DestinationPath   *string `thrift:"destinationPath,1" json:"destinationPath,omitempty"`
	ConsumerGroupName *string `thrift:"consumerGroupName,2" json:"consumerGroupName,omitempty"`
	DestinationUUID   *string `thrift:"destinationUUID,3" json:"destinationUUID,omitempty"`
	ConsumerGroupUUID *string `thrift:"consumerGroupUUID,4" json:"consumerGroupUUID,omitempty"`
}

func NewReadConsumerGroupRequest() *ReadConsumerGroupRequest {
	return &ReadConsumerGroupRequest{}
}

var ReadConsumerGroupRequest_DestinationPath_DEFAULT string

func (p *ReadConsumerGroupRequest) GetDestinationPath() string {
	if !p.IsSetDestinationPath() {
		return ReadConsumerGroupRequest_DestinationPath_DEFAULT
	}
	return *p.DestinationPath
}

var ReadConsumerGroupRequest_ConsumerGroupName_DEFAULT string

func (p *ReadConsumerGroupRequest) GetConsumerGroupName() string {
	if !p.IsSetConsumerGroupName() {
		return ReadConsumerGroupRequest_ConsumerGroupName_DEFAULT
	}
	return *p.ConsumerGroupName
}

var ReadConsumerGroupRequest_DestinationUUID_DEFAULT string

func (p *ReadConsumerGroupRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return ReadConsumerGroupRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var ReadConsumerGroupRequest_ConsumerGroupUUID_DEFAULT string

func (p *ReadConsumerGroupRequest) GetConsumerGroupUUID() string {
	if !p.IsSetConsumerGroupUUID() {
		return ReadConsumerGroupRequest_ConsumerGroupUUID_DEFAULT
	}
	return *p.ConsumerGroupUUID
}
func (p *ReadConsumerGroupRequest) IsSetDestinationPath() bool {
	return p.DestinationPath != nil
}

func (p *ReadConsumerGroupRequest) IsSetConsumerGroupName() bool {
	return p.ConsumerGroupName != nil
}

func (p *ReadConsumerGroupRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *ReadConsumerGroupRequest) IsSetConsumerGroupUUID() bool {
	return p.ConsumerGroupUUID != nil
}

func (p *ReadConsumerGroupRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadConsumerGroupRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationPath = &v
	}
	return nil
}

func (p *ReadConsumerGroupRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ConsumerGroupName = &v
	}
	return nil
}

func (p *ReadConsumerGroupRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *ReadConsumerGroupRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ConsumerGroupUUID = &v
	}
	return nil
}

func (p *ReadConsumerGroupRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadConsumerGroupRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadConsumerGroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationPath() {
		if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupName() {
		if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupUUID() {
		if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:consumerGroupUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:consumerGroupUUID: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadConsumerGroupRequest(%+v)", *p)
}

// Attributes:
//  - EntityUUID
//  - EntityName
//  - EntityType
//  - PageToken
//  - Limit
type ListEntityOpsRequest struct {
	EntityUUID *string `thrift:"entityUUID,1" json:"entityUUID,omitempty"`
	EntityName *string `thrift:"entityName,2" json:"entityName,omitempty"`
	EntityType *string `thrift:"entityType,3" json:"entityType,omitempty"`
	PageToken  []byte  `thrift:"pageToken,4" json:"pageToken,omitempty"`
	Limit      *int64  `thrift:"limit,5" json:"limit,omitempty"`
}

func NewListEntityOpsRequest() *ListEntityOpsRequest {
	return &ListEntityOpsRequest{}
}

var ListEntityOpsRequest_EntityUUID_DEFAULT string

func (p *ListEntityOpsRequest) GetEntityUUID() string {
	if !p.IsSetEntityUUID() {
		return ListEntityOpsRequest_EntityUUID_DEFAULT
	}
	return *p.EntityUUID
}

var ListEntityOpsRequest_EntityName_DEFAULT string

func (p *ListEntityOpsRequest) GetEntityName() string {
	if !p.IsSetEntityName() {
		return ListEntityOpsRequest_EntityName_DEFAULT
	}
	return *p.EntityName
}

var ListEntityOpsRequest_EntityType_DEFAULT string

func (p *ListEntityOpsRequest) GetEntityType() string {
	if !p.IsSetEntityType() {
		return ListEntityOpsRequest_EntityType_DEFAULT
	}
	return *p.EntityType
}

var ListEntityOpsRequest_PageToken_DEFAULT []byte

func (p *ListEntityOpsRequest) GetPageToken() []byte {
	return p.PageToken
}

var ListEntityOpsRequest_Limit_DEFAULT int64

func (p *ListEntityOpsRequest) GetLimit() int64 {
	if !p.IsSetLimit() {
		return ListEntityOpsRequest_Limit_DEFAULT
	}
	return *p.Limit
}
func (p *ListEntityOpsRequest) IsSetEntityUUID() bool {
	return p.EntityUUID != nil
}

func (p *ListEntityOpsRequest) IsSetEntityName() bool {
	return p.EntityName != nil
}

func (p *ListEntityOpsRequest) IsSetEntityType() bool {
	return p.EntityType != nil
}

func (p *ListEntityOpsRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListEntityOpsRequest) IsSetLimit() bool {
	return p.Limit != nil
}

func (p *ListEntityOpsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListEntityOpsRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.EntityUUID = &v
	}
	return nil
}

func (p *ListEntityOpsRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EntityName = &v
	}
	return nil
}

func (p *ListEntityOpsRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.EntityType = &v
	}
	return nil
}

func (p *ListEntityOpsRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PageToken = v
	}
	return nil
}

func (p *ListEntityOpsRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Limit = &v
	}
	return nil
}

func (p *ListEntityOpsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListEntityOpsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListEntityOpsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityUUID() {
		if err := oprot.WriteFieldBegin("entityUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.EntityUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.entityUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityUUID: ", p), err)
		}
	}
	return err
}

func (p *ListEntityOpsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityName() {
		if err := oprot.WriteFieldBegin("entityName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entityName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.EntityName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.entityName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entityName: ", p), err)
		}
	}
	return err
}

func (p *ListEntityOpsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityType() {
		if err := oprot.WriteFieldBegin("entityType", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.EntityType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.entityType (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityType: ", p), err)
		}
	}
	return err
}

func (p *ListEntityOpsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err := oprot.WriteFieldBegin("pageToken", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pageToken: ", p), err)
		}
		if err := oprot.WriteBinary(p.PageToken); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pageToken (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pageToken: ", p), err)
		}
	}
	return err
}

func (p *ListEntityOpsRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err := oprot.WriteFieldBegin("limit", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:limit: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Limit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.limit (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:limit: ", p), err)
		}
	}
	return err
}

func (p *ListEntityOpsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEntityOpsRequest(%+v)", *p)
}

// Attributes:
//  - EntityOps
//  - NextPageToken
type ListEntityOpsResult_ struct {
	EntityOps     []*shared.EntityOpsDescription `thrift:"entityOps,1" json:"entityOps,omitempty"`
	NextPageToken []byte                         `thrift:"nextPageToken,2" json:"nextPageToken,omitempty"`
}

func NewListEntityOpsResult_() *ListEntityOpsResult_ {
	return &ListEntityOpsResult_{}
}

var ListEntityOpsResult__EntityOps_DEFAULT []*shared.EntityOpsDescription

func (p *ListEntityOpsResult_) GetEntityOps() []*shared.EntityOpsDescription {
	return p.EntityOps
}

var ListEntityOpsResult__NextPageToken_DEFAULT []byte

func (p *ListEntityOpsResult_) GetNextPageToken() []byte {
	return p.NextPageToken
}
func (p *ListEntityOpsResult_) IsSetEntityOps() bool {
	return p.EntityOps != nil
}

func (p *ListEntityOpsResult_) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListEntityOpsResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListEntityOpsResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*shared.EntityOpsDescription, 0, size)
	p.EntityOps = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &shared.EntityOpsDescription{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.EntityOps = append(p.EntityOps, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ListEntityOpsResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NextPageToken = v
	}
	return nil
}

func (p *ListEntityOpsResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListEntityOpsResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListEntityOpsResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityOps() {
		if err := oprot.WriteFieldBegin("entityOps", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityOps: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EntityOps)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.EntityOps {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityOps: ", p), err)
		}
	}
	return err
}

func (p *ListEntityOpsResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err := oprot.WriteFieldBegin("nextPageToken", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nextPageToken: ", p), err)
		}
		if err := oprot.WriteBinary(p.NextPageToken); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nextPageToken (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nextPageToken: ", p), err)
		}
	}
	return err
}

func (p *ListEntityOpsResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEntityOpsResult_(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
//  - DestinationUUID
//  - PageToken
//  - Limit
type ListConsumerGroupRequest struct {
	DestinationPath   *string `thrift:"destinationPath,1" json:"destinationPath,omitempty"`
	ConsumerGroupName *string `thrift:"consumerGroupName,2" json:"consumerGroupName,omitempty"`
	DestinationUUID   *string `thrift:"destinationUUID,3" json:"destinationUUID,omitempty"`
	PageToken         []byte  `thrift:"pageToken,4" json:"pageToken,omitempty"`
	Limit             *int64  `thrift:"limit,5" json:"limit,omitempty"`
}

func NewListConsumerGroupRequest() *ListConsumerGroupRequest {
	return &ListConsumerGroupRequest{}
}

var ListConsumerGroupRequest_DestinationPath_DEFAULT string

func (p *ListConsumerGroupRequest) GetDestinationPath() string {
	if !p.IsSetDestinationPath() {
		return ListConsumerGroupRequest_DestinationPath_DEFAULT
	}
	return *p.DestinationPath
}

var ListConsumerGroupRequest_ConsumerGroupName_DEFAULT string

func (p *ListConsumerGroupRequest) GetConsumerGroupName() string {
	if !p.IsSetConsumerGroupName() {
		return ListConsumerGroupRequest_ConsumerGroupName_DEFAULT
	}
	return *p.ConsumerGroupName
}

var ListConsumerGroupRequest_DestinationUUID_DEFAULT string

func (p *ListConsumerGroupRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return ListConsumerGroupRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var ListConsumerGroupRequest_PageToken_DEFAULT []byte

func (p *ListConsumerGroupRequest) GetPageToken() []byte {
	return p.PageToken
}

var ListConsumerGroupRequest_Limit_DEFAULT int64

func (p *ListConsumerGroupRequest) GetLimit() int64 {
	if !p.IsSetLimit() {
		return ListConsumerGroupRequest_Limit_DEFAULT
	}
	return *p.Limit
}
func (p *ListConsumerGroupRequest) IsSetDestinationPath() bool {
	return p.DestinationPath != nil
}

func (p *ListConsumerGroupRequest) IsSetConsumerGroupName() bool {
	return p.ConsumerGroupName != nil
}

func (p *ListConsumerGroupRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *ListConsumerGroupRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListConsumerGroupRequest) IsSetLimit() bool {
	return p.Limit != nil
}

func (p *ListConsumerGroupRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListConsumerGroupRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationPath = &v
	}
	return nil
}

func (p *ListConsumerGroupRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ConsumerGroupName = &v
	}
	return nil
}

func (p *ListConsumerGroupRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *ListConsumerGroupRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PageToken = v
	}
	return nil
}

func (p *ListConsumerGroupRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Limit = &v
	}
	return nil
}

func (p *ListConsumerGroupRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListConsumerGroupRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListConsumerGroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationPath() {
		if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err)
		}
	}
	return err
}

func (p *ListConsumerGroupRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupName() {
		if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err)
		}
	}
	return err
}

func (p *ListConsumerGroupRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *ListConsumerGroupRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err := oprot.WriteFieldBegin("pageToken", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pageToken: ", p), err)
		}
		if err := oprot.WriteBinary(p.PageToken); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pageToken (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pageToken: ", p), err)
		}
	}
	return err
}

func (p *ListConsumerGroupRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err := oprot.WriteFieldBegin("limit", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:limit: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Limit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.limit (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:limit: ", p), err)
		}
	}
	return err
}

func (p *ListConsumerGroupRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListConsumerGroupRequest(%+v)", *p)
}

// Attributes:
//  - ConsumerGroups
//  - NextPageToken
type ListConsumerGroupResult_ struct {
	ConsumerGroups []*shared.ConsumerGroupDescription `thrift:"consumerGroups,1" json:"consumerGroups,omitempty"`
	NextPageToken  []byte                             `thrift:"nextPageToken,2" json:"nextPageToken,omitempty"`
}

func NewListConsumerGroupResult_() *ListConsumerGroupResult_ {
	return &ListConsumerGroupResult_{}
}

var ListConsumerGroupResult__ConsumerGroups_DEFAULT []*shared.ConsumerGroupDescription

func (p *ListConsumerGroupResult_) GetConsumerGroups() []*shared.ConsumerGroupDescription {
	return p.ConsumerGroups
}

var ListConsumerGroupResult__NextPageToken_DEFAULT []byte

func (p *ListConsumerGroupResult_) GetNextPageToken() []byte {
	return p.NextPageToken
}
func (p *ListConsumerGroupResult_) IsSetConsumerGroups() bool {
	return p.ConsumerGroups != nil
}

func (p *ListConsumerGroupResult_) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListConsumerGroupResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListConsumerGroupResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*shared.ConsumerGroupDescription, 0, size)
	p.ConsumerGroups = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &shared.ConsumerGroupDescription{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.ConsumerGroups = append(p.ConsumerGroups, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ListConsumerGroupResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NextPageToken = v
	}
	return nil
}

func (p *ListConsumerGroupResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListConsumerGroupResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListConsumerGroupResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroups() {
		if err := oprot.WriteFieldBegin("consumerGroups", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:consumerGroups: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ConsumerGroups)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ConsumerGroups {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:consumerGroups: ", p), err)
		}
	}
	return err
}

func (p *ListConsumerGroupResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err := oprot.WriteFieldBegin("nextPageToken", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nextPageToken: ", p), err)
		}
		if err := oprot.WriteBinary(p.NextPageToken); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nextPageToken (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nextPageToken: ", p), err)
		}
	}
	return err
}

func (p *ListConsumerGroupResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListConsumerGroupResult_(%+v)", *p)
}

// Attributes:
//  - ExtentUUID
//  - ConsumerGroupUUID
//  - Status
//  - AckLevelOffset
//  - OutputHostUUID
//  - StoreUUIDs
//  - ConnectedStoreUUID
//  - AckLevelSeqNo
//  - AckLevelSeqNoRate
//  - ReadLevelOffset
//  - ReadLevelSeqNo
//  - ReadLevelSeqNoRate
//  - WriteTime
type ConsumerGroupExtent struct {
	ExtentUUID         *string                    `thrift:"extentUUID,1" json:"extentUUID,omitempty"`
	ConsumerGroupUUID  *string                    `thrift:"consumerGroupUUID,2" json:"consumerGroupUUID,omitempty"`
	Status             *ConsumerGroupExtentStatus `thrift:"status,3" json:"status,omitempty"`
	AckLevelOffset     *int64                     `thrift:"ackLevelOffset,4" json:"ackLevelOffset,omitempty"`
	OutputHostUUID     *string                    `thrift:"outputHostUUID,5" json:"outputHostUUID,omitempty"`
	StoreUUIDs         []string                   `thrift:"storeUUIDs,6" json:"storeUUIDs,omitempty"`
	ConnectedStoreUUID *string                    `thrift:"connectedStoreUUID,7" json:"connectedStoreUUID,omitempty"`
	AckLevelSeqNo      *int64                     `thrift:"ackLevelSeqNo,8" json:"ackLevelSeqNo,omitempty"`
	AckLevelSeqNoRate  *float64                   `thrift:"ackLevelSeqNoRate,9" json:"ackLevelSeqNoRate,omitempty"`
	ReadLevelOffset    *int64                     `thrift:"readLevelOffset,10" json:"readLevelOffset,omitempty"`
	ReadLevelSeqNo     *int64                     `thrift:"readLevelSeqNo,11" json:"readLevelSeqNo,omitempty"`
	ReadLevelSeqNoRate *float64                   `thrift:"readLevelSeqNoRate,12" json:"readLevelSeqNoRate,omitempty"`
	WriteTime          *int64                     `thrift:"writeTime,13" json:"writeTime,omitempty"`
}

func NewConsumerGroupExtent() *ConsumerGroupExtent {
	return &ConsumerGroupExtent{}
}

var ConsumerGroupExtent_ExtentUUID_DEFAULT string

func (p *ConsumerGroupExtent) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return ConsumerGroupExtent_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var ConsumerGroupExtent_ConsumerGroupUUID_DEFAULT string

func (p *ConsumerGroupExtent) GetConsumerGroupUUID() string {
	if !p.IsSetConsumerGroupUUID() {
		return ConsumerGroupExtent_ConsumerGroupUUID_DEFAULT
	}
	return *p.ConsumerGroupUUID
}

var ConsumerGroupExtent_Status_DEFAULT ConsumerGroupExtentStatus

func (p *ConsumerGroupExtent) GetStatus() ConsumerGroupExtentStatus {
	if !p.IsSetStatus() {
		return ConsumerGroupExtent_Status_DEFAULT
	}
	return *p.Status
}

var ConsumerGroupExtent_AckLevelOffset_DEFAULT int64

func (p *ConsumerGroupExtent) GetAckLevelOffset() int64 {
	if !p.IsSetAckLevelOffset() {
		return ConsumerGroupExtent_AckLevelOffset_DEFAULT
	}
	return *p.AckLevelOffset
}

var ConsumerGroupExtent_OutputHostUUID_DEFAULT string

func (p *ConsumerGroupExtent) GetOutputHostUUID() string {
	if !p.IsSetOutputHostUUID() {
		return ConsumerGroupExtent_OutputHostUUID_DEFAULT
	}
	return *p.OutputHostUUID
}

var ConsumerGroupExtent_StoreUUIDs_DEFAULT []string

func (p *ConsumerGroupExtent) GetStoreUUIDs() []string {
	return p.StoreUUIDs
}

var ConsumerGroupExtent_ConnectedStoreUUID_DEFAULT string

func (p *ConsumerGroupExtent) GetConnectedStoreUUID() string {
	if !p.IsSetConnectedStoreUUID() {
		return ConsumerGroupExtent_ConnectedStoreUUID_DEFAULT
	}
	return *p.ConnectedStoreUUID
}

var ConsumerGroupExtent_AckLevelSeqNo_DEFAULT int64

func (p *ConsumerGroupExtent) GetAckLevelSeqNo() int64 {
	if !p.IsSetAckLevelSeqNo() {
		return ConsumerGroupExtent_AckLevelSeqNo_DEFAULT
	}
	return *p.AckLevelSeqNo
}

var ConsumerGroupExtent_AckLevelSeqNoRate_DEFAULT float64

func (p *ConsumerGroupExtent) GetAckLevelSeqNoRate() float64 {
	if !p.IsSetAckLevelSeqNoRate() {
		return ConsumerGroupExtent_AckLevelSeqNoRate_DEFAULT
	}
	return *p.AckLevelSeqNoRate
}

var ConsumerGroupExtent_ReadLevelOffset_DEFAULT int64

func (p *ConsumerGroupExtent) GetReadLevelOffset() int64 {
	if !p.IsSetReadLevelOffset() {
		return ConsumerGroupExtent_ReadLevelOffset_DEFAULT
	}
	return *p.ReadLevelOffset
}

var ConsumerGroupExtent_ReadLevelSeqNo_DEFAULT int64

func (p *ConsumerGroupExtent) GetReadLevelSeqNo() int64 {
	if !p.IsSetReadLevelSeqNo() {
		return ConsumerGroupExtent_ReadLevelSeqNo_DEFAULT
	}
	return *p.ReadLevelSeqNo
}

var ConsumerGroupExtent_ReadLevelSeqNoRate_DEFAULT float64

func (p *ConsumerGroupExtent) GetReadLevelSeqNoRate() float64 {
	if !p.IsSetReadLevelSeqNoRate() {
		return ConsumerGroupExtent_ReadLevelSeqNoRate_DEFAULT
	}
	return *p.ReadLevelSeqNoRate
}

var ConsumerGroupExtent_WriteTime_DEFAULT int64

func (p *ConsumerGroupExtent) GetWriteTime() int64 {
	if !p.IsSetWriteTime() {
		return ConsumerGroupExtent_WriteTime_DEFAULT
	}
	return *p.WriteTime
}
func (p *ConsumerGroupExtent) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *ConsumerGroupExtent) IsSetConsumerGroupUUID() bool {
	return p.ConsumerGroupUUID != nil
}

func (p *ConsumerGroupExtent) IsSetStatus() bool {
	return p.Status != nil
}

func (p *ConsumerGroupExtent) IsSetAckLevelOffset() bool {
	return p.AckLevelOffset != nil
}

func (p *ConsumerGroupExtent) IsSetOutputHostUUID() bool {
	return p.OutputHostUUID != nil
}

func (p *ConsumerGroupExtent) IsSetStoreUUIDs() bool {
	return p.StoreUUIDs != nil
}

func (p *ConsumerGroupExtent) IsSetConnectedStoreUUID() bool {
	return p.ConnectedStoreUUID != nil
}

func (p *ConsumerGroupExtent) IsSetAckLevelSeqNo() bool {
	return p.AckLevelSeqNo != nil
}

func (p *ConsumerGroupExtent) IsSetAckLevelSeqNoRate() bool {
	return p.AckLevelSeqNoRate != nil
}

func (p *ConsumerGroupExtent) IsSetReadLevelOffset() bool {
	return p.ReadLevelOffset != nil
}

func (p *ConsumerGroupExtent) IsSetReadLevelSeqNo() bool {
	return p.ReadLevelSeqNo != nil
}

func (p *ConsumerGroupExtent) IsSetReadLevelSeqNoRate() bool {
	return p.ReadLevelSeqNoRate != nil
}

func (p *ConsumerGroupExtent) IsSetWriteTime() bool {
	return p.WriteTime != nil
}

func (p *ConsumerGroupExtent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConsumerGroupExtent) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *ConsumerGroupExtent) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ConsumerGroupUUID = &v
	}
	return nil
}

func (p *ConsumerGroupExtent) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := ConsumerGroupExtentStatus(v)
		p.Status = &temp
	}
	return nil
}

func (p *ConsumerGroupExtent) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AckLevelOffset = &v
	}
	return nil
}

func (p *ConsumerGroupExtent) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.OutputHostUUID = &v
	}
	return nil
}

func (p *ConsumerGroupExtent) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.StoreUUIDs = tSlice
	for i := 0; i < size; i++ {
		var _elem3 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem3 = v
		}
		p.StoreUUIDs = append(p.StoreUUIDs, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ConsumerGroupExtent) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ConnectedStoreUUID = &v
	}
	return nil
}

func (p *ConsumerGroupExtent) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.AckLevelSeqNo = &v
	}
	return nil
}

func (p *ConsumerGroupExtent) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.AckLevelSeqNoRate = &v
	}
	return nil
}

func (p *ConsumerGroupExtent) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.ReadLevelOffset = &v
	}
	return nil
}

func (p *ConsumerGroupExtent) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.ReadLevelSeqNo = &v
	}
	return nil
}

func (p *ConsumerGroupExtent) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.ReadLevelSeqNoRate = &v
	}
	return nil
}

func (p *ConsumerGroupExtent) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.WriteTime = &v
	}
	return nil
}

func (p *ConsumerGroupExtent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConsumerGroupExtent"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ConsumerGroupExtent) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupExtent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupUUID() {
		if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupUUID: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupExtent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupExtent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAckLevelOffset() {
		if err := oprot.WriteFieldBegin("ackLevelOffset", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ackLevelOffset: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.AckLevelOffset)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ackLevelOffset (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ackLevelOffset: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupExtent) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputHostUUID() {
		if err := oprot.WriteFieldBegin("outputHostUUID", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:outputHostUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OutputHostUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.outputHostUUID (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:outputHostUUID: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupExtent) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoreUUIDs() {
		if err := oprot.WriteFieldBegin("storeUUIDs", thrift.LIST, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:storeUUIDs: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.StoreUUIDs)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.StoreUUIDs {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:storeUUIDs: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupExtent) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetConnectedStoreUUID() {
		if err := oprot.WriteFieldBegin("connectedStoreUUID", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:connectedStoreUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConnectedStoreUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.connectedStoreUUID (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:connectedStoreUUID: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupExtent) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetAckLevelSeqNo() {
		if err := oprot.WriteFieldBegin("ackLevelSeqNo", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:ackLevelSeqNo: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.AckLevelSeqNo)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ackLevelSeqNo (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:ackLevelSeqNo: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupExtent) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetAckLevelSeqNoRate() {
		if err := oprot.WriteFieldBegin("ackLevelSeqNoRate", thrift.DOUBLE, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:ackLevelSeqNoRate: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.AckLevelSeqNoRate)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ackLevelSeqNoRate (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:ackLevelSeqNoRate: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupExtent) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadLevelOffset() {
		if err := oprot.WriteFieldBegin("readLevelOffset", thrift.I64, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:readLevelOffset: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ReadLevelOffset)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.readLevelOffset (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:readLevelOffset: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupExtent) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadLevelSeqNo() {
		if err := oprot.WriteFieldBegin("readLevelSeqNo", thrift.I64, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:readLevelSeqNo: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ReadLevelSeqNo)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.readLevelSeqNo (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:readLevelSeqNo: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupExtent) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadLevelSeqNoRate() {
		if err := oprot.WriteFieldBegin("readLevelSeqNoRate", thrift.DOUBLE, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:readLevelSeqNoRate: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.ReadLevelSeqNoRate)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.readLevelSeqNoRate (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:readLevelSeqNoRate: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupExtent) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetWriteTime() {
		if err := oprot.WriteFieldBegin("writeTime", thrift.I64, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:writeTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.WriteTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.writeTime (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:writeTime: ", p), err)
		}
	}
	return err
}

func (p *ConsumerGroupExtent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConsumerGroupExtent(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - ExtentUUID
//  - Status
//  - ArchivalLocation
//  - RemoteExtentPrimaryStore
type UpdateExtentStatsRequest struct {
	DestinationUUID          *string              `thrift:"destinationUUID,1" json:"destinationUUID,omitempty"`
	ExtentUUID               *string              `thrift:"extentUUID,2" json:"extentUUID,omitempty"`
	Status                   *shared.ExtentStatus `thrift:"status,3" json:"status,omitempty"`
	ArchivalLocation         *string              `thrift:"archivalLocation,4" json:"archivalLocation,omitempty"`
	RemoteExtentPrimaryStore *string              `thrift:"remoteExtentPrimaryStore,5" json:"remoteExtentPrimaryStore,omitempty"`
}

func NewUpdateExtentStatsRequest() *UpdateExtentStatsRequest {
	return &UpdateExtentStatsRequest{}
}

var UpdateExtentStatsRequest_DestinationUUID_DEFAULT string

func (p *UpdateExtentStatsRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return UpdateExtentStatsRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var UpdateExtentStatsRequest_ExtentUUID_DEFAULT string

func (p *UpdateExtentStatsRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return UpdateExtentStatsRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var UpdateExtentStatsRequest_Status_DEFAULT shared.ExtentStatus

func (p *UpdateExtentStatsRequest) GetStatus() shared.ExtentStatus {
	if !p.IsSetStatus() {
		return UpdateExtentStatsRequest_Status_DEFAULT
	}
	return *p.Status
}

var UpdateExtentStatsRequest_ArchivalLocation_DEFAULT string

func (p *UpdateExtentStatsRequest) GetArchivalLocation() string {
	if !p.IsSetArchivalLocation() {
		return UpdateExtentStatsRequest_ArchivalLocation_DEFAULT
	}
	return *p.ArchivalLocation
}

var UpdateExtentStatsRequest_RemoteExtentPrimaryStore_DEFAULT string

func (p *UpdateExtentStatsRequest) GetRemoteExtentPrimaryStore() string {
	if !p.IsSetRemoteExtentPrimaryStore() {
		return UpdateExtentStatsRequest_RemoteExtentPrimaryStore_DEFAULT
	}
	return *p.RemoteExtentPrimaryStore
}
func (p *UpdateExtentStatsRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *UpdateExtentStatsRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *UpdateExtentStatsRequest) IsSetStatus() bool {
	return p.Status != nil
}

func (p *UpdateExtentStatsRequest) IsSetArchivalLocation() bool {
	return p.ArchivalLocation != nil
}

func (p *UpdateExtentStatsRequest) IsSetRemoteExtentPrimaryStore() bool {
	return p.RemoteExtentPrimaryStore != nil
}

func (p *UpdateExtentStatsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateExtentStatsRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *UpdateExtentStatsRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *UpdateExtentStatsRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := shared.ExtentStatus(v)
		p.Status = &temp
	}
	return nil
}

func (p *UpdateExtentStatsRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ArchivalLocation = &v
	}
	return nil
}

func (p *UpdateExtentStatsRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.RemoteExtentPrimaryStore = &v
	}
	return nil
}

func (p *UpdateExtentStatsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateExtentStatsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateExtentStatsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *UpdateExtentStatsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *UpdateExtentStatsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err)
		}
	}
	return err
}

func (p *UpdateExtentStatsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetArchivalLocation() {
		if err := oprot.WriteFieldBegin("archivalLocation", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:archivalLocation: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ArchivalLocation)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.archivalLocation (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:archivalLocation: ", p), err)
		}
	}
	return err
}

func (p *UpdateExtentStatsRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemoteExtentPrimaryStore() {
		if err := oprot.WriteFieldBegin("remoteExtentPrimaryStore", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:remoteExtentPrimaryStore: ", p), err)
		}
		if err := oprot.WriteString(string(*p.RemoteExtentPrimaryStore)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.remoteExtentPrimaryStore (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:remoteExtentPrimaryStore: ", p), err)
		}
	}
	return err
}

func (p *UpdateExtentStatsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateExtentStatsRequest(%+v)", *p)
}

// Attributes:
//  - ExtentStats
type UpdateExtentStatsResult_ struct {
	ExtentStats *shared.ExtentStats `thrift:"extentStats,1" json:"extentStats,omitempty"`
}

func NewUpdateExtentStatsResult_() *UpdateExtentStatsResult_ {
	return &UpdateExtentStatsResult_{}
}

var UpdateExtentStatsResult__ExtentStats_DEFAULT *shared.ExtentStats

func (p *UpdateExtentStatsResult_) GetExtentStats() *shared.ExtentStats {
	if !p.IsSetExtentStats() {
		return UpdateExtentStatsResult__ExtentStats_DEFAULT
	}
	return p.ExtentStats
}
func (p *UpdateExtentStatsResult_) IsSetExtentStats() bool {
	return p.ExtentStats != nil
}

func (p *UpdateExtentStatsResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateExtentStatsResult_) readField1(iprot thrift.TProtocol) error {
	p.ExtentStats = &shared.ExtentStats{}
	if err := p.ExtentStats.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExtentStats), err)
	}
	return nil
}

func (p *UpdateExtentStatsResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateExtentStatsResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateExtentStatsResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentStats() {
		if err := oprot.WriteFieldBegin("extentStats", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentStats: ", p), err)
		}
		if err := p.ExtentStats.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExtentStats), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentStats: ", p), err)
		}
	}
	return err
}

func (p *UpdateExtentStatsResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateExtentStatsResult_(%+v)", *p)
}

// *** Request and Reply structures ****
//
// Attributes:
//  - DestinationUUID
//  - ExtentUUID
type ReadExtentStatsRequest struct {
	DestinationUUID *string `thrift:"destinationUUID,1" json:"destinationUUID,omitempty"`
	ExtentUUID      *string `thrift:"extentUUID,2" json:"extentUUID,omitempty"`
}

func NewReadExtentStatsRequest() *ReadExtentStatsRequest {
	return &ReadExtentStatsRequest{}
}

var ReadExtentStatsRequest_DestinationUUID_DEFAULT string

func (p *ReadExtentStatsRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return ReadExtentStatsRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var ReadExtentStatsRequest_ExtentUUID_DEFAULT string

func (p *ReadExtentStatsRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return ReadExtentStatsRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}
func (p *ReadExtentStatsRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *ReadExtentStatsRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *ReadExtentStatsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadExtentStatsRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *ReadExtentStatsRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *ReadExtentStatsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadExtentStatsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadExtentStatsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *ReadExtentStatsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *ReadExtentStatsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadExtentStatsRequest(%+v)", *p)
}

// Attributes:
//  - ExtentStats
type ReadExtentStatsResult_ struct {
	ExtentStats *shared.ExtentStats `thrift:"extentStats,1" json:"extentStats,omitempty"`
}

func NewReadExtentStatsResult_() *ReadExtentStatsResult_ {
	return &ReadExtentStatsResult_{}
}

var ReadExtentStatsResult__ExtentStats_DEFAULT *shared.ExtentStats

func (p *ReadExtentStatsResult_) GetExtentStats() *shared.ExtentStats {
	if !p.IsSetExtentStats() {
		return ReadExtentStatsResult__ExtentStats_DEFAULT
	}
	return p.ExtentStats
}
func (p *ReadExtentStatsResult_) IsSetExtentStats() bool {
	return p.ExtentStats != nil
}

func (p *ReadExtentStatsResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadExtentStatsResult_) readField1(iprot thrift.TProtocol) error {
	p.ExtentStats = &shared.ExtentStats{}
	if err := p.ExtentStats.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExtentStats), err)
	}
	return nil
}

func (p *ReadExtentStatsResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadExtentStatsResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadExtentStatsResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentStats() {
		if err := oprot.WriteFieldBegin("extentStats", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentStats: ", p), err)
		}
		if err := p.ExtentStats.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExtentStats), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentStats: ", p), err)
		}
	}
	return err
}

func (p *ReadExtentStatsResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadExtentStatsResult_(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - InputHostUUID
//  - Status
type ListInputHostExtentsStatsRequest struct {
	DestinationUUID *string              `thrift:"destinationUUID,1" json:"destinationUUID,omitempty"`
	InputHostUUID   *string              `thrift:"inputHostUUID,2" json:"inputHostUUID,omitempty"`
	Status          *shared.ExtentStatus `thrift:"status,3" json:"status,omitempty"`
}

func NewListInputHostExtentsStatsRequest() *ListInputHostExtentsStatsRequest {
	return &ListInputHostExtentsStatsRequest{}
}

var ListInputHostExtentsStatsRequest_DestinationUUID_DEFAULT string

func (p *ListInputHostExtentsStatsRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return ListInputHostExtentsStatsRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var ListInputHostExtentsStatsRequest_InputHostUUID_DEFAULT string

func (p *ListInputHostExtentsStatsRequest) GetInputHostUUID() string {
	if !p.IsSetInputHostUUID() {
		return ListInputHostExtentsStatsRequest_InputHostUUID_DEFAULT
	}
	return *p.InputHostUUID
}

var ListInputHostExtentsStatsRequest_Status_DEFAULT shared.ExtentStatus

func (p *ListInputHostExtentsStatsRequest) GetStatus() shared.ExtentStatus {
	if !p.IsSetStatus() {
		return ListInputHostExtentsStatsRequest_Status_DEFAULT
	}
	return *p.Status
}
func (p *ListInputHostExtentsStatsRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *ListInputHostExtentsStatsRequest) IsSetInputHostUUID() bool {
	return p.InputHostUUID != nil
}

func (p *ListInputHostExtentsStatsRequest) IsSetStatus() bool {
	return p.Status != nil
}

func (p *ListInputHostExtentsStatsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListInputHostExtentsStatsRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *ListInputHostExtentsStatsRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.InputHostUUID = &v
	}
	return nil
}

func (p *ListInputHostExtentsStatsRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := shared.ExtentStatus(v)
		p.Status = &temp
	}
	return nil
}

func (p *ListInputHostExtentsStatsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListInputHostExtentsStatsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListInputHostExtentsStatsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *ListInputHostExtentsStatsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputHostUUID() {
		if err := oprot.WriteFieldBegin("inputHostUUID", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:inputHostUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.InputHostUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.inputHostUUID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:inputHostUUID: ", p), err)
		}
	}
	return err
}

func (p *ListInputHostExtentsStatsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err)
		}
	}
	return err
}

func (p *ListInputHostExtentsStatsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListInputHostExtentsStatsRequest(%+v)", *p)
}

// Attributes:
//  - ExtentStatsList
type ListInputHostExtentsStatsResult_ struct {
	ExtentStatsList []*shared.ExtentStats `thrift:"extentStatsList,1" json:"extentStatsList,omitempty"`
}

func NewListInputHostExtentsStatsResult_() *ListInputHostExtentsStatsResult_ {
	return &ListInputHostExtentsStatsResult_{}
}

var ListInputHostExtentsStatsResult__ExtentStatsList_DEFAULT []*shared.ExtentStats

func (p *ListInputHostExtentsStatsResult_) GetExtentStatsList() []*shared.ExtentStats {
	return p.ExtentStatsList
}
func (p *ListInputHostExtentsStatsResult_) IsSetExtentStatsList() bool {
	return p.ExtentStatsList != nil
}

func (p *ListInputHostExtentsStatsResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListInputHostExtentsStatsResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*shared.ExtentStats, 0, size)
	p.ExtentStatsList = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &shared.ExtentStats{}
		if err := _elem4.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
		}
		p.ExtentStatsList = append(p.ExtentStatsList, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ListInputHostExtentsStatsResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListInputHostExtentsStatsResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListInputHostExtentsStatsResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentStatsList() {
		if err := oprot.WriteFieldBegin("extentStatsList", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentStatsList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExtentStatsList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ExtentStatsList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentStatsList: ", p), err)
		}
	}
	return err
}

func (p *ListInputHostExtentsStatsResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListInputHostExtentsStatsResult_(%+v)", *p)
}

// Attributes:
//  - StoreUUID
//  - Status
//  - ReplicationStatus
type ListStoreExtentsStatsRequest struct {
	StoreUUID         *string                                `thrift:"storeUUID,1" json:"storeUUID,omitempty"`
	Status            *shared.ExtentStatus                   `thrift:"status,2" json:"status,omitempty"`
	ReplicationStatus *shared.ExtentReplicaReplicationStatus `thrift:"replicationStatus,3" json:"replicationStatus,omitempty"`
}

func NewListStoreExtentsStatsRequest() *ListStoreExtentsStatsRequest {
	return &ListStoreExtentsStatsRequest{}
}

var ListStoreExtentsStatsRequest_StoreUUID_DEFAULT string

func (p *ListStoreExtentsStatsRequest) GetStoreUUID() string {
	if !p.IsSetStoreUUID() {
		return ListStoreExtentsStatsRequest_StoreUUID_DEFAULT
	}
	return *p.StoreUUID
}

var ListStoreExtentsStatsRequest_Status_DEFAULT shared.ExtentStatus

func (p *ListStoreExtentsStatsRequest) GetStatus() shared.ExtentStatus {
	if !p.IsSetStatus() {
		return ListStoreExtentsStatsRequest_Status_DEFAULT
	}
	return *p.Status
}

var ListStoreExtentsStatsRequest_ReplicationStatus_DEFAULT shared.ExtentReplicaReplicationStatus

func (p *ListStoreExtentsStatsRequest) GetReplicationStatus() shared.ExtentReplicaReplicationStatus {
	if !p.IsSetReplicationStatus() {
		return ListStoreExtentsStatsRequest_ReplicationStatus_DEFAULT
	}
	return *p.ReplicationStatus
}
func (p *ListStoreExtentsStatsRequest) IsSetStoreUUID() bool {
	return p.StoreUUID != nil
}

func (p *ListStoreExtentsStatsRequest) IsSetStatus() bool {
	return p.Status != nil
}

func (p *ListStoreExtentsStatsRequest) IsSetReplicationStatus() bool {
	return p.ReplicationStatus != nil
}

func (p *ListStoreExtentsStatsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListStoreExtentsStatsRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StoreUUID = &v
	}
	return nil
}

func (p *ListStoreExtentsStatsRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := shared.ExtentStatus(v)
		p.Status = &temp
	}
	return nil
}

func (p *ListStoreExtentsStatsRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := shared.ExtentReplicaReplicationStatus(v)
		p.ReplicationStatus = &temp
	}
	return nil
}

func (p *ListStoreExtentsStatsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListStoreExtentsStatsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListStoreExtentsStatsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoreUUID() {
		if err := oprot.WriteFieldBegin("storeUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:storeUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StoreUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.storeUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:storeUUID: ", p), err)
		}
	}
	return err
}

func (p *ListStoreExtentsStatsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err)
		}
	}
	return err
}

func (p *ListStoreExtentsStatsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplicationStatus() {
		if err := oprot.WriteFieldBegin("replicationStatus", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:replicationStatus: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ReplicationStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.replicationStatus (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:replicationStatus: ", p), err)
		}
	}
	return err
}

func (p *ListStoreExtentsStatsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListStoreExtentsStatsRequest(%+v)", *p)
}

// Attributes:
//  - ExtentStatsList
type ListStoreExtentsStatsResult_ struct {
	ExtentStatsList []*shared.ExtentStats `thrift:"extentStatsList,1" json:"extentStatsList,omitempty"`
}

func NewListStoreExtentsStatsResult_() *ListStoreExtentsStatsResult_ {
	return &ListStoreExtentsStatsResult_{}
}

var ListStoreExtentsStatsResult__ExtentStatsList_DEFAULT []*shared.ExtentStats

func (p *ListStoreExtentsStatsResult_) GetExtentStatsList() []*shared.ExtentStats {
	return p.ExtentStatsList
}
func (p *ListStoreExtentsStatsResult_) IsSetExtentStatsList() bool {
	return p.ExtentStatsList != nil
}

func (p *ListStoreExtentsStatsResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListStoreExtentsStatsResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*shared.ExtentStats, 0, size)
	p.ExtentStatsList = tSlice
	for i := 0; i < size; i++ {
		_elem5 := &shared.ExtentStats{}
		if err := _elem5.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
		}
		p.ExtentStatsList = append(p.ExtentStatsList, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ListStoreExtentsStatsResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListStoreExtentsStatsResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListStoreExtentsStatsResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentStatsList() {
		if err := oprot.WriteFieldBegin("extentStatsList", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentStatsList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExtentStatsList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ExtentStatsList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentStatsList: ", p), err)
		}
	}
	return err
}

func (p *ListStoreExtentsStatsResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListStoreExtentsStatsResult_(%+v)", *p)
}

// Attributes:
//  - StoreUUID
//  - ExtentUUID
type ReadStoreExtentReplicaStatsRequest struct {
	StoreUUID  *string `thrift:"storeUUID,1" json:"storeUUID,omitempty"`
	ExtentUUID *string `thrift:"extentUUID,2" json:"extentUUID,omitempty"`
}

func NewReadStoreExtentReplicaStatsRequest() *ReadStoreExtentReplicaStatsRequest {
	return &ReadStoreExtentReplicaStatsRequest{}
}

var ReadStoreExtentReplicaStatsRequest_StoreUUID_DEFAULT string

func (p *ReadStoreExtentReplicaStatsRequest) GetStoreUUID() string {
	if !p.IsSetStoreUUID() {
		return ReadStoreExtentReplicaStatsRequest_StoreUUID_DEFAULT
	}
	return *p.StoreUUID
}

var ReadStoreExtentReplicaStatsRequest_ExtentUUID_DEFAULT string

func (p *ReadStoreExtentReplicaStatsRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return ReadStoreExtentReplicaStatsRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}
func (p *ReadStoreExtentReplicaStatsRequest) IsSetStoreUUID() bool {
	return p.StoreUUID != nil
}

func (p *ReadStoreExtentReplicaStatsRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *ReadStoreExtentReplicaStatsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadStoreExtentReplicaStatsRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StoreUUID = &v
	}
	return nil
}

func (p *ReadStoreExtentReplicaStatsRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *ReadStoreExtentReplicaStatsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadStoreExtentReplicaStatsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadStoreExtentReplicaStatsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoreUUID() {
		if err := oprot.WriteFieldBegin("storeUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:storeUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StoreUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.storeUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:storeUUID: ", p), err)
		}
	}
	return err
}

func (p *ReadStoreExtentReplicaStatsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *ReadStoreExtentReplicaStatsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadStoreExtentReplicaStatsRequest(%+v)", *p)
}

// Attributes:
//  - Extent
type ReadStoreExtentReplicaStatsResult_ struct {
	Extent *shared.ExtentStats `thrift:"extent,1" json:"extent,omitempty"`
}

func NewReadStoreExtentReplicaStatsResult_() *ReadStoreExtentReplicaStatsResult_ {
	return &ReadStoreExtentReplicaStatsResult_{}
}

var ReadStoreExtentReplicaStatsResult__Extent_DEFAULT *shared.ExtentStats

func (p *ReadStoreExtentReplicaStatsResult_) GetExtent() *shared.ExtentStats {
	if !p.IsSetExtent() {
		return ReadStoreExtentReplicaStatsResult__Extent_DEFAULT
	}
	return p.Extent
}
func (p *ReadStoreExtentReplicaStatsResult_) IsSetExtent() bool {
	return p.Extent != nil
}

func (p *ReadStoreExtentReplicaStatsResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadStoreExtentReplicaStatsResult_) readField1(iprot thrift.TProtocol) error {
	p.Extent = &shared.ExtentStats{}
	if err := p.Extent.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Extent), err)
	}
	return nil
}

func (p *ReadStoreExtentReplicaStatsResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadStoreExtentReplicaStatsResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadStoreExtentReplicaStatsResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtent() {
		if err := oprot.WriteFieldBegin("extent", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extent: ", p), err)
		}
		if err := p.Extent.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Extent), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extent: ", p), err)
		}
	}
	return err
}

func (p *ReadStoreExtentReplicaStatsResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadStoreExtentReplicaStatsResult_(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - ExtentUUID
type SealExtentRequest struct {
	DestinationUUID *string `thrift:"destinationUUID,1" json:"destinationUUID,omitempty"`
	ExtentUUID      *string `thrift:"extentUUID,2" json:"extentUUID,omitempty"`
}

func NewSealExtentRequest() *SealExtentRequest {
	return &SealExtentRequest{}
}

var SealExtentRequest_DestinationUUID_DEFAULT string

func (p *SealExtentRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return SealExtentRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var SealExtentRequest_ExtentUUID_DEFAULT string

func (p *SealExtentRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return SealExtentRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}
func (p *SealExtentRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *SealExtentRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *SealExtentRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SealExtentRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *SealExtentRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *SealExtentRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SealExtentRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SealExtentRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *SealExtentRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *SealExtentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SealExtentRequest(%+v)", *p)
}

// Attributes:
//  - ExtentUUID
//  - ReplicaStats
//  - StoreUUID
//  - ReplicationStatus
type UpdateStoreExtentReplicaStatsRequest struct {
	ExtentUUID        *string                                `thrift:"extentUUID,1" json:"extentUUID,omitempty"`
	ReplicaStats      []*shared.ExtentReplicaStats           `thrift:"replicaStats,2" json:"replicaStats,omitempty"`
	StoreUUID         *string                                `thrift:"storeUUID,3" json:"storeUUID,omitempty"`
	ReplicationStatus *shared.ExtentReplicaReplicationStatus `thrift:"replicationStatus,4" json:"replicationStatus,omitempty"`
}

func NewUpdateStoreExtentReplicaStatsRequest() *UpdateStoreExtentReplicaStatsRequest {
	return &UpdateStoreExtentReplicaStatsRequest{}
}

var UpdateStoreExtentReplicaStatsRequest_ExtentUUID_DEFAULT string

func (p *UpdateStoreExtentReplicaStatsRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return UpdateStoreExtentReplicaStatsRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var UpdateStoreExtentReplicaStatsRequest_ReplicaStats_DEFAULT []*shared.ExtentReplicaStats

func (p *UpdateStoreExtentReplicaStatsRequest) GetReplicaStats() []*shared.ExtentReplicaStats {
	return p.ReplicaStats
}

var UpdateStoreExtentReplicaStatsRequest_StoreUUID_DEFAULT string

func (p *UpdateStoreExtentReplicaStatsRequest) GetStoreUUID() string {
	if !p.IsSetStoreUUID() {
		return UpdateStoreExtentReplicaStatsRequest_StoreUUID_DEFAULT
	}
	return *p.StoreUUID
}

var UpdateStoreExtentReplicaStatsRequest_ReplicationStatus_DEFAULT shared.ExtentReplicaReplicationStatus

func (p *UpdateStoreExtentReplicaStatsRequest) GetReplicationStatus() shared.ExtentReplicaReplicationStatus {
	if !p.IsSetReplicationStatus() {
		return UpdateStoreExtentReplicaStatsRequest_ReplicationStatus_DEFAULT
	}
	return *p.ReplicationStatus
}
func (p *UpdateStoreExtentReplicaStatsRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *UpdateStoreExtentReplicaStatsRequest) IsSetReplicaStats() bool {
	return p.ReplicaStats != nil
}

func (p *UpdateStoreExtentReplicaStatsRequest) IsSetStoreUUID() bool {
	return p.StoreUUID != nil
}

func (p *UpdateStoreExtentReplicaStatsRequest) IsSetReplicationStatus() bool {
	return p.ReplicationStatus != nil
}

func (p *UpdateStoreExtentReplicaStatsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateStoreExtentReplicaStatsRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *UpdateStoreExtentReplicaStatsRequest) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*shared.ExtentReplicaStats, 0, size)
	p.ReplicaStats = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &shared.ExtentReplicaStats{}
		if err := _elem6.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
		}
		p.ReplicaStats = append(p.ReplicaStats, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UpdateStoreExtentReplicaStatsRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StoreUUID = &v
	}
	return nil
}

func (p *UpdateStoreExtentReplicaStatsRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := shared.ExtentReplicaReplicationStatus(v)
		p.ReplicationStatus = &temp
	}
	return nil
}

func (p *UpdateStoreExtentReplicaStatsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateStoreExtentReplicaStatsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateStoreExtentReplicaStatsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *UpdateStoreExtentReplicaStatsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplicaStats() {
		if err := oprot.WriteFieldBegin("replicaStats", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:replicaStats: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ReplicaStats)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ReplicaStats {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:replicaStats: ", p), err)
		}
	}
	return err
}

func (p *UpdateStoreExtentReplicaStatsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoreUUID() {
		if err := oprot.WriteFieldBegin("storeUUID", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:storeUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StoreUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.storeUUID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:storeUUID: ", p), err)
		}
	}
	return err
}

func (p *UpdateStoreExtentReplicaStatsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplicationStatus() {
		if err := oprot.WriteFieldBegin("replicationStatus", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:replicationStatus: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ReplicationStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.replicationStatus (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:replicationStatus: ", p), err)
		}
	}
	return err
}

func (p *UpdateStoreExtentReplicaStatsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateStoreExtentReplicaStatsRequest(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - ExtentUUID
//  - InputHostUUID
//  - ReplicaStats
type UpdateExtentReplicaStatsRequest struct {
	DestinationUUID *string                      `thrift:"destinationUUID,1" json:"destinationUUID,omitempty"`
	ExtentUUID      *string                      `thrift:"extentUUID,2" json:"extentUUID,omitempty"`
	InputHostUUID   *string                      `thrift:"inputHostUUID,3" json:"inputHostUUID,omitempty"`
	ReplicaStats    []*shared.ExtentReplicaStats `thrift:"replicaStats,4" json:"replicaStats,omitempty"`
}

func NewUpdateExtentReplicaStatsRequest() *UpdateExtentReplicaStatsRequest {
	return &UpdateExtentReplicaStatsRequest{}
}

var UpdateExtentReplicaStatsRequest_DestinationUUID_DEFAULT string

func (p *UpdateExtentReplicaStatsRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return UpdateExtentReplicaStatsRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var UpdateExtentReplicaStatsRequest_ExtentUUID_DEFAULT string

func (p *UpdateExtentReplicaStatsRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return UpdateExtentReplicaStatsRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var UpdateExtentReplicaStatsRequest_InputHostUUID_DEFAULT string

func (p *UpdateExtentReplicaStatsRequest) GetInputHostUUID() string {
	if !p.IsSetInputHostUUID() {
		return UpdateExtentReplicaStatsRequest_InputHostUUID_DEFAULT
	}
	return *p.InputHostUUID
}

var UpdateExtentReplicaStatsRequest_ReplicaStats_DEFAULT []*shared.ExtentReplicaStats

func (p *UpdateExtentReplicaStatsRequest) GetReplicaStats() []*shared.ExtentReplicaStats {
	return p.ReplicaStats
}
func (p *UpdateExtentReplicaStatsRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *UpdateExtentReplicaStatsRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *UpdateExtentReplicaStatsRequest) IsSetInputHostUUID() bool {
	return p.InputHostUUID != nil
}

func (p *UpdateExtentReplicaStatsRequest) IsSetReplicaStats() bool {
	return p.ReplicaStats != nil
}

func (p *UpdateExtentReplicaStatsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateExtentReplicaStatsRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *UpdateExtentReplicaStatsRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *UpdateExtentReplicaStatsRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.InputHostUUID = &v
	}
	return nil
}

func (p *UpdateExtentReplicaStatsRequest) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*shared.ExtentReplicaStats, 0, size)
	p.ReplicaStats = tSlice
	for i := 0; i < size; i++ {
		_elem7 := &shared.ExtentReplicaStats{}
		if err := _elem7.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
		}
		p.ReplicaStats = append(p.ReplicaStats, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UpdateExtentReplicaStatsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateExtentReplicaStatsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateExtentReplicaStatsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *UpdateExtentReplicaStatsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *UpdateExtentReplicaStatsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputHostUUID() {
		if err := oprot.WriteFieldBegin("inputHostUUID", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:inputHostUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.InputHostUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.inputHostUUID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:inputHostUUID: ", p), err)
		}
	}
	return err
}

func (p *UpdateExtentReplicaStatsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplicaStats() {
		if err := oprot.WriteFieldBegin("replicaStats", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:replicaStats: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ReplicaStats)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ReplicaStats {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:replicaStats: ", p), err)
		}
	}
	return err
}

func (p *UpdateExtentReplicaStatsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateExtentReplicaStatsRequest(%+v)", *p)
}

// Attributes:
//  - ExtentUUID
//  - ConsumerGroupUUID
//  - OutputHostUUID
//  - ConnectedStoreUUID
//  - Status
//  - AckLevelAddress
//  - AckLevelSeqNo
//  - AckLevelSeqNoRate
//  - ReadLevelAddress
//  - ReadLevelSeqNo
//  - ReadLevelSeqNoRate
type SetAckOffsetRequest struct {
	ExtentUUID         *string                    `thrift:"extentUUID,1" json:"extentUUID,omitempty"`
	ConsumerGroupUUID  *string                    `thrift:"consumerGroupUUID,2" json:"consumerGroupUUID,omitempty"`
	OutputHostUUID     *string                    `thrift:"outputHostUUID,3" json:"outputHostUUID,omitempty"`
	ConnectedStoreUUID *string                    `thrift:"connectedStoreUUID,4" json:"connectedStoreUUID,omitempty"`
	Status             *ConsumerGroupExtentStatus `thrift:"status,5" json:"status,omitempty"`
	AckLevelAddress    *int64                     `thrift:"ackLevelAddress,6" json:"ackLevelAddress,omitempty"`
	AckLevelSeqNo      *int64                     `thrift:"ackLevelSeqNo,7" json:"ackLevelSeqNo,omitempty"`
	AckLevelSeqNoRate  *float64                   `thrift:"ackLevelSeqNoRate,8" json:"ackLevelSeqNoRate,omitempty"`
	ReadLevelAddress   *int64                     `thrift:"readLevelAddress,9" json:"readLevelAddress,omitempty"`
	ReadLevelSeqNo     *int64                     `thrift:"readLevelSeqNo,10" json:"readLevelSeqNo,omitempty"`
	ReadLevelSeqNoRate *float64                   `thrift:"readLevelSeqNoRate,11" json:"readLevelSeqNoRate,omitempty"`
}

func NewSetAckOffsetRequest() *SetAckOffsetRequest {
	return &SetAckOffsetRequest{}
}

var SetAckOffsetRequest_ExtentUUID_DEFAULT string

func (p *SetAckOffsetRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return SetAckOffsetRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var SetAckOffsetRequest_ConsumerGroupUUID_DEFAULT string

func (p *SetAckOffsetRequest) GetConsumerGroupUUID() string {
	if !p.IsSetConsumerGroupUUID() {
		return SetAckOffsetRequest_ConsumerGroupUUID_DEFAULT
	}
	return *p.ConsumerGroupUUID
}

var SetAckOffsetRequest_OutputHostUUID_DEFAULT string

func (p *SetAckOffsetRequest) GetOutputHostUUID() string {
	if !p.IsSetOutputHostUUID() {
		return SetAckOffsetRequest_OutputHostUUID_DEFAULT
	}
	return *p.OutputHostUUID
}

var SetAckOffsetRequest_ConnectedStoreUUID_DEFAULT string

func (p *SetAckOffsetRequest) GetConnectedStoreUUID() string {
	if !p.IsSetConnectedStoreUUID() {
		return SetAckOffsetRequest_ConnectedStoreUUID_DEFAULT
	}
	return *p.ConnectedStoreUUID
}

var SetAckOffsetRequest_Status_DEFAULT ConsumerGroupExtentStatus

func (p *SetAckOffsetRequest) GetStatus() ConsumerGroupExtentStatus {
	if !p.IsSetStatus() {
		return SetAckOffsetRequest_Status_DEFAULT
	}
	return *p.Status
}

var SetAckOffsetRequest_AckLevelAddress_DEFAULT int64

func (p *SetAckOffsetRequest) GetAckLevelAddress() int64 {
	if !p.IsSetAckLevelAddress() {
		return SetAckOffsetRequest_AckLevelAddress_DEFAULT
	}
	return *p.AckLevelAddress
}

var SetAckOffsetRequest_AckLevelSeqNo_DEFAULT int64

func (p *SetAckOffsetRequest) GetAckLevelSeqNo() int64 {
	if !p.IsSetAckLevelSeqNo() {
		return SetAckOffsetRequest_AckLevelSeqNo_DEFAULT
	}
	return *p.AckLevelSeqNo
}

var SetAckOffsetRequest_AckLevelSeqNoRate_DEFAULT float64

func (p *SetAckOffsetRequest) GetAckLevelSeqNoRate() float64 {
	if !p.IsSetAckLevelSeqNoRate() {
		return SetAckOffsetRequest_AckLevelSeqNoRate_DEFAULT
	}
	return *p.AckLevelSeqNoRate
}

var SetAckOffsetRequest_ReadLevelAddress_DEFAULT int64

func (p *SetAckOffsetRequest) GetReadLevelAddress() int64 {
	if !p.IsSetReadLevelAddress() {
		return SetAckOffsetRequest_ReadLevelAddress_DEFAULT
	}
	return *p.ReadLevelAddress
}

var SetAckOffsetRequest_ReadLevelSeqNo_DEFAULT int64

func (p *SetAckOffsetRequest) GetReadLevelSeqNo() int64 {
	if !p.IsSetReadLevelSeqNo() {
		return SetAckOffsetRequest_ReadLevelSeqNo_DEFAULT
	}
	return *p.ReadLevelSeqNo
}

var SetAckOffsetRequest_ReadLevelSeqNoRate_DEFAULT float64

func (p *SetAckOffsetRequest) GetReadLevelSeqNoRate() float64 {
	if !p.IsSetReadLevelSeqNoRate() {
		return SetAckOffsetRequest_ReadLevelSeqNoRate_DEFAULT
	}
	return *p.ReadLevelSeqNoRate
}
func (p *SetAckOffsetRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *SetAckOffsetRequest) IsSetConsumerGroupUUID() bool {
	return p.ConsumerGroupUUID != nil
}

func (p *SetAckOffsetRequest) IsSetOutputHostUUID() bool {
	return p.OutputHostUUID != nil
}

func (p *SetAckOffsetRequest) IsSetConnectedStoreUUID() bool {
	return p.ConnectedStoreUUID != nil
}

func (p *SetAckOffsetRequest) IsSetStatus() bool {
	return p.Status != nil
}

func (p *SetAckOffsetRequest) IsSetAckLevelAddress() bool {
	return p.AckLevelAddress != nil
}

func (p *SetAckOffsetRequest) IsSetAckLevelSeqNo() bool {
	return p.AckLevelSeqNo != nil
}

func (p *SetAckOffsetRequest) IsSetAckLevelSeqNoRate() bool {
	return p.AckLevelSeqNoRate != nil
}

func (p *SetAckOffsetRequest) IsSetReadLevelAddress() bool {
	return p.ReadLevelAddress != nil
}

func (p *SetAckOffsetRequest) IsSetReadLevelSeqNo() bool {
	return p.ReadLevelSeqNo != nil
}

func (p *SetAckOffsetRequest) IsSetReadLevelSeqNoRate() bool {
	return p.ReadLevelSeqNoRate != nil
}

func (p *SetAckOffsetRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SetAckOffsetRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *SetAckOffsetRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ConsumerGroupUUID = &v
	}
	return nil
}

func (p *SetAckOffsetRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.OutputHostUUID = &v
	}
	return nil
}

func (p *SetAckOffsetRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ConnectedStoreUUID = &v
	}
	return nil
}

func (p *SetAckOffsetRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := ConsumerGroupExtentStatus(v)
		p.Status = &temp
	}
	return nil
}

func (p *SetAckOffsetRequest) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.AckLevelAddress = &v
	}
	return nil
}

func (p *SetAckOffsetRequest) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.AckLevelSeqNo = &v
	}
	return nil
}

func (p *SetAckOffsetRequest) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.AckLevelSeqNoRate = &v
	}
	return nil
}

func (p *SetAckOffsetRequest) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.ReadLevelAddress = &v
	}
	return nil
}

func (p *SetAckOffsetRequest) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.ReadLevelSeqNo = &v
	}
	return nil
}

func (p *SetAckOffsetRequest) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.ReadLevelSeqNoRate = &v
	}
	return nil
}

func (p *SetAckOffsetRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetAckOffsetRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SetAckOffsetRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *SetAckOffsetRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupUUID() {
		if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupUUID: ", p), err)
		}
	}
	return err
}

func (p *SetAckOffsetRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputHostUUID() {
		if err := oprot.WriteFieldBegin("outputHostUUID", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:outputHostUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OutputHostUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.outputHostUUID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:outputHostUUID: ", p), err)
		}
	}
	return err
}

func (p *SetAckOffsetRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetConnectedStoreUUID() {
		if err := oprot.WriteFieldBegin("connectedStoreUUID", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:connectedStoreUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConnectedStoreUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.connectedStoreUUID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:connectedStoreUUID: ", p), err)
		}
	}
	return err
}

func (p *SetAckOffsetRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:status: ", p), err)
		}
	}
	return err
}

func (p *SetAckOffsetRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetAckLevelAddress() {
		if err := oprot.WriteFieldBegin("ackLevelAddress", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ackLevelAddress: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.AckLevelAddress)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ackLevelAddress (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ackLevelAddress: ", p), err)
		}
	}
	return err
}

func (p *SetAckOffsetRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetAckLevelSeqNo() {
		if err := oprot.WriteFieldBegin("ackLevelSeqNo", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ackLevelSeqNo: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.AckLevelSeqNo)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ackLevelSeqNo (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ackLevelSeqNo: ", p), err)
		}
	}
	return err
}

func (p *SetAckOffsetRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetAckLevelSeqNoRate() {
		if err := oprot.WriteFieldBegin("ackLevelSeqNoRate", thrift.DOUBLE, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:ackLevelSeqNoRate: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.AckLevelSeqNoRate)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ackLevelSeqNoRate (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:ackLevelSeqNoRate: ", p), err)
		}
	}
	return err
}

func (p *SetAckOffsetRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadLevelAddress() {
		if err := oprot.WriteFieldBegin("readLevelAddress", thrift.I64, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:readLevelAddress: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ReadLevelAddress)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.readLevelAddress (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:readLevelAddress: ", p), err)
		}
	}
	return err
}

func (p *SetAckOffsetRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadLevelSeqNo() {
		if err := oprot.WriteFieldBegin("readLevelSeqNo", thrift.I64, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:readLevelSeqNo: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ReadLevelSeqNo)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.readLevelSeqNo (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:readLevelSeqNo: ", p), err)
		}
	}
	return err
}

func (p *SetAckOffsetRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadLevelSeqNoRate() {
		if err := oprot.WriteFieldBegin("readLevelSeqNoRate", thrift.DOUBLE, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:readLevelSeqNoRate: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.ReadLevelSeqNoRate)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.readLevelSeqNoRate (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:readLevelSeqNoRate: ", p), err)
		}
	}
	return err
}

func (p *SetAckOffsetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetAckOffsetRequest(%+v)", *p)
}

// Attributes:
//  - ConsumerGroupUUID
//  - ExtentUUID
//  - Status
type UpdateConsumerGroupExtentStatusRequest struct {
	ConsumerGroupUUID *string                    `thrift:"consumerGroupUUID,1" json:"consumerGroupUUID,omitempty"`
	ExtentUUID        *string                    `thrift:"extentUUID,2" json:"extentUUID,omitempty"`
	Status            *ConsumerGroupExtentStatus `thrift:"status,3" json:"status,omitempty"`
}

func NewUpdateConsumerGroupExtentStatusRequest() *UpdateConsumerGroupExtentStatusRequest {
	return &UpdateConsumerGroupExtentStatusRequest{}
}

var UpdateConsumerGroupExtentStatusRequest_ConsumerGroupUUID_DEFAULT string

func (p *UpdateConsumerGroupExtentStatusRequest) GetConsumerGroupUUID() string {
	if !p.IsSetConsumerGroupUUID() {
		return UpdateConsumerGroupExtentStatusRequest_ConsumerGroupUUID_DEFAULT
	}
	return *p.ConsumerGroupUUID
}

var UpdateConsumerGroupExtentStatusRequest_ExtentUUID_DEFAULT string

func (p *UpdateConsumerGroupExtentStatusRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return UpdateConsumerGroupExtentStatusRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var UpdateConsumerGroupExtentStatusRequest_Status_DEFAULT ConsumerGroupExtentStatus

func (p *UpdateConsumerGroupExtentStatusRequest) GetStatus() ConsumerGroupExtentStatus {
	if !p.IsSetStatus() {
		return UpdateConsumerGroupExtentStatusRequest_Status_DEFAULT
	}
	return *p.Status
}
func (p *UpdateConsumerGroupExtentStatusRequest) IsSetConsumerGroupUUID() bool {
	return p.ConsumerGroupUUID != nil
}

func (p *UpdateConsumerGroupExtentStatusRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *UpdateConsumerGroupExtentStatusRequest) IsSetStatus() bool {
	return p.Status != nil
}

func (p *UpdateConsumerGroupExtentStatusRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateConsumerGroupExtentStatusRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ConsumerGroupUUID = &v
	}
	return nil
}

func (p *UpdateConsumerGroupExtentStatusRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *UpdateConsumerGroupExtentStatusRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := ConsumerGroupExtentStatus(v)
		p.Status = &temp
	}
	return nil
}

func (p *UpdateConsumerGroupExtentStatusRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateConsumerGroupExtentStatusRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateConsumerGroupExtentStatusRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupUUID() {
		if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:consumerGroupUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:consumerGroupUUID: ", p), err)
		}
	}
	return err
}

func (p *UpdateConsumerGroupExtentStatusRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *UpdateConsumerGroupExtentStatusRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err)
		}
	}
	return err
}

func (p *UpdateConsumerGroupExtentStatusRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateConsumerGroupExtentStatusRequest(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - ExtentUUID
//  - ConsumerGroupUUID
//  - OutputHostUUID
//  - StoreUUIDs
type CreateConsumerGroupExtentRequest struct {
	DestinationUUID   *string  `thrift:"destinationUUID,1" json:"destinationUUID,omitempty"`
	ExtentUUID        *string  `thrift:"extentUUID,2" json:"extentUUID,omitempty"`
	ConsumerGroupUUID *string  `thrift:"consumerGroupUUID,3" json:"consumerGroupUUID,omitempty"`
	OutputHostUUID    *string  `thrift:"outputHostUUID,4" json:"outputHostUUID,omitempty"`
	StoreUUIDs        []string `thrift:"storeUUIDs,5" json:"storeUUIDs,omitempty"`
}

func NewCreateConsumerGroupExtentRequest() *CreateConsumerGroupExtentRequest {
	return &CreateConsumerGroupExtentRequest{}
}

var CreateConsumerGroupExtentRequest_DestinationUUID_DEFAULT string

func (p *CreateConsumerGroupExtentRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return CreateConsumerGroupExtentRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var CreateConsumerGroupExtentRequest_ExtentUUID_DEFAULT string

func (p *CreateConsumerGroupExtentRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return CreateConsumerGroupExtentRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var CreateConsumerGroupExtentRequest_ConsumerGroupUUID_DEFAULT string

func (p *CreateConsumerGroupExtentRequest) GetConsumerGroupUUID() string {
	if !p.IsSetConsumerGroupUUID() {
		return CreateConsumerGroupExtentRequest_ConsumerGroupUUID_DEFAULT
	}
	return *p.ConsumerGroupUUID
}

var CreateConsumerGroupExtentRequest_OutputHostUUID_DEFAULT string

func (p *CreateConsumerGroupExtentRequest) GetOutputHostUUID() string {
	if !p.IsSetOutputHostUUID() {
		return CreateConsumerGroupExtentRequest_OutputHostUUID_DEFAULT
	}
	return *p.OutputHostUUID
}

var CreateConsumerGroupExtentRequest_StoreUUIDs_DEFAULT []string

func (p *CreateConsumerGroupExtentRequest) GetStoreUUIDs() []string {
	return p.StoreUUIDs
}
func (p *CreateConsumerGroupExtentRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *CreateConsumerGroupExtentRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *CreateConsumerGroupExtentRequest) IsSetConsumerGroupUUID() bool {
	return p.ConsumerGroupUUID != nil
}

func (p *CreateConsumerGroupExtentRequest) IsSetOutputHostUUID() bool {
	return p.OutputHostUUID != nil
}

func (p *CreateConsumerGroupExtentRequest) IsSetStoreUUIDs() bool {
	return p.StoreUUIDs != nil
}

func (p *CreateConsumerGroupExtentRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CreateConsumerGroupExtentRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *CreateConsumerGroupExtentRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *CreateConsumerGroupExtentRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ConsumerGroupUUID = &v
	}
	return nil
}

func (p *CreateConsumerGroupExtentRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.OutputHostUUID = &v
	}
	return nil
}

func (p *CreateConsumerGroupExtentRequest) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.StoreUUIDs = tSlice
	for i := 0; i < size; i++ {
		var _elem8 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem8 = v
		}
		p.StoreUUIDs = append(p.StoreUUIDs, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *CreateConsumerGroupExtentRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateConsumerGroupExtentRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CreateConsumerGroupExtentRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *CreateConsumerGroupExtentRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *CreateConsumerGroupExtentRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupUUID() {
		if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:consumerGroupUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:consumerGroupUUID: ", p), err)
		}
	}
	return err
}

func (p *CreateConsumerGroupExtentRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputHostUUID() {
		if err := oprot.WriteFieldBegin("outputHostUUID", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:outputHostUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OutputHostUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.outputHostUUID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:outputHostUUID: ", p), err)
		}
	}
	return err
}

func (p *CreateConsumerGroupExtentRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoreUUIDs() {
		if err := oprot.WriteFieldBegin("storeUUIDs", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:storeUUIDs: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.StoreUUIDs)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.StoreUUIDs {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:storeUUIDs: ", p), err)
		}
	}
	return err
}

func (p *CreateConsumerGroupExtentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateConsumerGroupExtentRequest(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - ExtentUUID
//  - ConsumerGroupUUID
type ReadConsumerGroupExtentRequest struct {
	DestinationUUID   *string `thrift:"destinationUUID,1" json:"destinationUUID,omitempty"`
	ExtentUUID        *string `thrift:"extentUUID,2" json:"extentUUID,omitempty"`
	ConsumerGroupUUID *string `thrift:"consumerGroupUUID,3" json:"consumerGroupUUID,omitempty"`
}

func NewReadConsumerGroupExtentRequest() *ReadConsumerGroupExtentRequest {
	return &ReadConsumerGroupExtentRequest{}
}

var ReadConsumerGroupExtentRequest_DestinationUUID_DEFAULT string

func (p *ReadConsumerGroupExtentRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return ReadConsumerGroupExtentRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var ReadConsumerGroupExtentRequest_ExtentUUID_DEFAULT string

func (p *ReadConsumerGroupExtentRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return ReadConsumerGroupExtentRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var ReadConsumerGroupExtentRequest_ConsumerGroupUUID_DEFAULT string

func (p *ReadConsumerGroupExtentRequest) GetConsumerGroupUUID() string {
	if !p.IsSetConsumerGroupUUID() {
		return ReadConsumerGroupExtentRequest_ConsumerGroupUUID_DEFAULT
	}
	return *p.ConsumerGroupUUID
}
func (p *ReadConsumerGroupExtentRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *ReadConsumerGroupExtentRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *ReadConsumerGroupExtentRequest) IsSetConsumerGroupUUID() bool {
	return p.ConsumerGroupUUID != nil
}

func (p *ReadConsumerGroupExtentRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadConsumerGroupExtentRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *ReadConsumerGroupExtentRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *ReadConsumerGroupExtentRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ConsumerGroupUUID = &v
	}
	return nil
}

func (p *ReadConsumerGroupExtentRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadConsumerGroupExtentRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadConsumerGroupExtentRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupExtentRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupExtentRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupUUID() {
		if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:consumerGroupUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:consumerGroupUUID: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupExtentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadConsumerGroupExtentRequest(%+v)", *p)
}

// Attributes:
//  - Extent
type ReadConsumerGroupExtentResult_ struct {
	Extent *ConsumerGroupExtent `thrift:"extent,1" json:"extent,omitempty"`
}

func NewReadConsumerGroupExtentResult_() *ReadConsumerGroupExtentResult_ {
	return &ReadConsumerGroupExtentResult_{}
}

var ReadConsumerGroupExtentResult__Extent_DEFAULT *ConsumerGroupExtent

func (p *ReadConsumerGroupExtentResult_) GetExtent() *ConsumerGroupExtent {
	if !p.IsSetExtent() {
		return ReadConsumerGroupExtentResult__Extent_DEFAULT
	}
	return p.Extent
}
func (p *ReadConsumerGroupExtentResult_) IsSetExtent() bool {
	return p.Extent != nil
}

func (p *ReadConsumerGroupExtentResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadConsumerGroupExtentResult_) readField1(iprot thrift.TProtocol) error {
	p.Extent = &ConsumerGroupExtent{}
	if err := p.Extent.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Extent), err)
	}
	return nil
}

func (p *ReadConsumerGroupExtentResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadConsumerGroupExtentResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadConsumerGroupExtentResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtent() {
		if err := oprot.WriteFieldBegin("extent", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extent: ", p), err)
		}
		if err := p.Extent.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Extent), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extent: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupExtentResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadConsumerGroupExtentResult_(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - ExtentUUID
//  - ConsumerGroupUUID
//  - OutputHostUUID
type SetOutputHostRequest struct {
	DestinationUUID   *string `thrift:"destinationUUID,1" json:"destinationUUID,omitempty"`
	ExtentUUID        *string `thrift:"extentUUID,2" json:"extentUUID,omitempty"`
	ConsumerGroupUUID *string `thrift:"consumerGroupUUID,3" json:"consumerGroupUUID,omitempty"`
	OutputHostUUID    *string `thrift:"outputHostUUID,4" json:"outputHostUUID,omitempty"`
}

func NewSetOutputHostRequest() *SetOutputHostRequest {
	return &SetOutputHostRequest{}
}

var SetOutputHostRequest_DestinationUUID_DEFAULT string

func (p *SetOutputHostRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return SetOutputHostRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var SetOutputHostRequest_ExtentUUID_DEFAULT string

func (p *SetOutputHostRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return SetOutputHostRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var SetOutputHostRequest_ConsumerGroupUUID_DEFAULT string

func (p *SetOutputHostRequest) GetConsumerGroupUUID() string {
	if !p.IsSetConsumerGroupUUID() {
		return SetOutputHostRequest_ConsumerGroupUUID_DEFAULT
	}
	return *p.ConsumerGroupUUID
}

var SetOutputHostRequest_OutputHostUUID_DEFAULT string

func (p *SetOutputHostRequest) GetOutputHostUUID() string {
	if !p.IsSetOutputHostUUID() {
		return SetOutputHostRequest_OutputHostUUID_DEFAULT
	}
	return *p.OutputHostUUID
}
func (p *SetOutputHostRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *SetOutputHostRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *SetOutputHostRequest) IsSetConsumerGroupUUID() bool {
	return p.ConsumerGroupUUID != nil
}

func (p *SetOutputHostRequest) IsSetOutputHostUUID() bool {
	return p.OutputHostUUID != nil
}

func (p *SetOutputHostRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SetOutputHostRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *SetOutputHostRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *SetOutputHostRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ConsumerGroupUUID = &v
	}
	return nil
}

func (p *SetOutputHostRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.OutputHostUUID = &v
	}
	return nil
}

func (p *SetOutputHostRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetOutputHostRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SetOutputHostRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *SetOutputHostRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *SetOutputHostRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupUUID() {
		if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:consumerGroupUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:consumerGroupUUID: ", p), err)
		}
	}
	return err
}

func (p *SetOutputHostRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputHostUUID() {
		if err := oprot.WriteFieldBegin("outputHostUUID", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:outputHostUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OutputHostUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.outputHostUUID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:outputHostUUID: ", p), err)
		}
	}
	return err
}

func (p *SetOutputHostRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetOutputHostRequest(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - ConsumerGroupUUID
//  - MaxResults
//  - OutputHostUUID
//  - Status
//  - PageToken
type ReadConsumerGroupExtentsRequest struct {
	DestinationUUID   *string                    `thrift:"destinationUUID,1" json:"destinationUUID,omitempty"`
	ConsumerGroupUUID *string                    `thrift:"consumerGroupUUID,2" json:"consumerGroupUUID,omitempty"`
	MaxResults        *int32                     `thrift:"maxResults,3" json:"maxResults,omitempty"`
	OutputHostUUID    *string                    `thrift:"outputHostUUID,4" json:"outputHostUUID,omitempty"`
	Status            *ConsumerGroupExtentStatus `thrift:"status,5" json:"status,omitempty"`
	PageToken         []byte                     `thrift:"pageToken,6" json:"pageToken,omitempty"`
}

func NewReadConsumerGroupExtentsRequest() *ReadConsumerGroupExtentsRequest {
	return &ReadConsumerGroupExtentsRequest{}
}

var ReadConsumerGroupExtentsRequest_DestinationUUID_DEFAULT string

func (p *ReadConsumerGroupExtentsRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return ReadConsumerGroupExtentsRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var ReadConsumerGroupExtentsRequest_ConsumerGroupUUID_DEFAULT string

func (p *ReadConsumerGroupExtentsRequest) GetConsumerGroupUUID() string {
	if !p.IsSetConsumerGroupUUID() {
		return ReadConsumerGroupExtentsRequest_ConsumerGroupUUID_DEFAULT
	}
	return *p.ConsumerGroupUUID
}

var ReadConsumerGroupExtentsRequest_MaxResults_DEFAULT int32

func (p *ReadConsumerGroupExtentsRequest) GetMaxResults() int32 {
	if !p.IsSetMaxResults() {
		return ReadConsumerGroupExtentsRequest_MaxResults_DEFAULT
	}
	return *p.MaxResults
}

var ReadConsumerGroupExtentsRequest_OutputHostUUID_DEFAULT string

func (p *ReadConsumerGroupExtentsRequest) GetOutputHostUUID() string {
	if !p.IsSetOutputHostUUID() {
		return ReadConsumerGroupExtentsRequest_OutputHostUUID_DEFAULT
	}
	return *p.OutputHostUUID
}

var ReadConsumerGroupExtentsRequest_Status_DEFAULT ConsumerGroupExtentStatus

func (p *ReadConsumerGroupExtentsRequest) GetStatus() ConsumerGroupExtentStatus {
	if !p.IsSetStatus() {
		return ReadConsumerGroupExtentsRequest_Status_DEFAULT
	}
	return *p.Status
}

var ReadConsumerGroupExtentsRequest_PageToken_DEFAULT []byte

func (p *ReadConsumerGroupExtentsRequest) GetPageToken() []byte {
	return p.PageToken
}
func (p *ReadConsumerGroupExtentsRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *ReadConsumerGroupExtentsRequest) IsSetConsumerGroupUUID() bool {
	return p.ConsumerGroupUUID != nil
}

func (p *ReadConsumerGroupExtentsRequest) IsSetMaxResults() bool {
	return p.MaxResults != nil
}

func (p *ReadConsumerGroupExtentsRequest) IsSetOutputHostUUID() bool {
	return p.OutputHostUUID != nil
}

func (p *ReadConsumerGroupExtentsRequest) IsSetStatus() bool {
	return p.Status != nil
}

func (p *ReadConsumerGroupExtentsRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ReadConsumerGroupExtentsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadConsumerGroupExtentsRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *ReadConsumerGroupExtentsRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ConsumerGroupUUID = &v
	}
	return nil
}

func (p *ReadConsumerGroupExtentsRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MaxResults = &v
	}
	return nil
}

func (p *ReadConsumerGroupExtentsRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.OutputHostUUID = &v
	}
	return nil
}

func (p *ReadConsumerGroupExtentsRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := ConsumerGroupExtentStatus(v)
		p.Status = &temp
	}
	return nil
}

func (p *ReadConsumerGroupExtentsRequest) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.PageToken = v
	}
	return nil
}

func (p *ReadConsumerGroupExtentsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadConsumerGroupExtentsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadConsumerGroupExtentsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupExtentsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupUUID() {
		if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupUUID: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupExtentsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxResults() {
		if err := oprot.WriteFieldBegin("maxResults", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxResults: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.MaxResults)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.maxResults (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxResults: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupExtentsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputHostUUID() {
		if err := oprot.WriteFieldBegin("outputHostUUID", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:outputHostUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OutputHostUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.outputHostUUID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:outputHostUUID: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupExtentsRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:status: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupExtentsRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err := oprot.WriteFieldBegin("pageToken", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:pageToken: ", p), err)
		}
		if err := oprot.WriteBinary(p.PageToken); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pageToken (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:pageToken: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupExtentsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadConsumerGroupExtentsRequest(%+v)", *p)
}

// Attributes:
//  - Extents
//  - NextPageToken
type ReadConsumerGroupExtentsResult_ struct {
	Extents []*ConsumerGroupExtent `thrift:"extents,1" json:"extents,omitempty"`
	// unused fields # 2 to 9
	NextPageToken []byte `thrift:"nextPageToken,10" json:"nextPageToken,omitempty"`
}

func NewReadConsumerGroupExtentsResult_() *ReadConsumerGroupExtentsResult_ {
	return &ReadConsumerGroupExtentsResult_{}
}

var ReadConsumerGroupExtentsResult__Extents_DEFAULT []*ConsumerGroupExtent

func (p *ReadConsumerGroupExtentsResult_) GetExtents() []*ConsumerGroupExtent {
	return p.Extents
}

var ReadConsumerGroupExtentsResult__NextPageToken_DEFAULT []byte

func (p *ReadConsumerGroupExtentsResult_) GetNextPageToken() []byte {
	return p.NextPageToken
}
func (p *ReadConsumerGroupExtentsResult_) IsSetExtents() bool {
	return p.Extents != nil
}

func (p *ReadConsumerGroupExtentsResult_) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ReadConsumerGroupExtentsResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadConsumerGroupExtentsResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ConsumerGroupExtent, 0, size)
	p.Extents = tSlice
	for i := 0; i < size; i++ {
		_elem9 := &ConsumerGroupExtent{}
		if err := _elem9.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
		}
		p.Extents = append(p.Extents, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ReadConsumerGroupExtentsResult_) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.NextPageToken = v
	}
	return nil
}

func (p *ReadConsumerGroupExtentsResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadConsumerGroupExtentsResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadConsumerGroupExtentsResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtents() {
		if err := oprot.WriteFieldBegin("extents", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extents: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extents)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Extents {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extents: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupExtentsResult_) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err := oprot.WriteFieldBegin("nextPageToken", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:nextPageToken: ", p), err)
		}
		if err := oprot.WriteBinary(p.NextPageToken); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nextPageToken (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:nextPageToken: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupExtentsResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadConsumerGroupExtentsResult_(%+v)", *p)
}

// Attributes:
//  - ExtentUUID
//  - PageToken
//  - Limit
type ReadConsumerGroupExtentsByExtUUIDRequest struct {
	ExtentUUID *string `thrift:"extentUUID,1" json:"extentUUID,omitempty"`
	PageToken  []byte  `thrift:"pageToken,2" json:"pageToken,omitempty"`
	Limit      *int64  `thrift:"limit,3" json:"limit,omitempty"`
}

func NewReadConsumerGroupExtentsByExtUUIDRequest() *ReadConsumerGroupExtentsByExtUUIDRequest {
	return &ReadConsumerGroupExtentsByExtUUIDRequest{}
}

var ReadConsumerGroupExtentsByExtUUIDRequest_ExtentUUID_DEFAULT string

func (p *ReadConsumerGroupExtentsByExtUUIDRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return ReadConsumerGroupExtentsByExtUUIDRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var ReadConsumerGroupExtentsByExtUUIDRequest_PageToken_DEFAULT []byte

func (p *ReadConsumerGroupExtentsByExtUUIDRequest) GetPageToken() []byte {
	return p.PageToken
}

var ReadConsumerGroupExtentsByExtUUIDRequest_Limit_DEFAULT int64

func (p *ReadConsumerGroupExtentsByExtUUIDRequest) GetLimit() int64 {
	if !p.IsSetLimit() {
		return ReadConsumerGroupExtentsByExtUUIDRequest_Limit_DEFAULT
	}
	return *p.Limit
}
func (p *ReadConsumerGroupExtentsByExtUUIDRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDRequest) IsSetLimit() bool {
	return p.Limit != nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PageToken = v
	}
	return nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Limit = &v
	}
	return nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadConsumerGroupExtentsByExtUUIDRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupExtentsByExtUUIDRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err := oprot.WriteFieldBegin("pageToken", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pageToken: ", p), err)
		}
		if err := oprot.WriteBinary(p.PageToken); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pageToken (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pageToken: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupExtentsByExtUUIDRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err := oprot.WriteFieldBegin("limit", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limit: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Limit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.limit (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limit: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupExtentsByExtUUIDRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadConsumerGroupExtentsByExtUUIDRequest(%+v)", *p)
}

// Attributes:
//  - CgExtents
//  - NextPageToken
type ReadConsumerGroupExtentsByExtUUIDResult_ struct {
	CgExtents     []*ConsumerGroupExtent `thrift:"cgExtents,1" json:"cgExtents,omitempty"`
	NextPageToken []byte                 `thrift:"nextPageToken,2" json:"nextPageToken,omitempty"`
}

func NewReadConsumerGroupExtentsByExtUUIDResult_() *ReadConsumerGroupExtentsByExtUUIDResult_ {
	return &ReadConsumerGroupExtentsByExtUUIDResult_{}
}

var ReadConsumerGroupExtentsByExtUUIDResult__CgExtents_DEFAULT []*ConsumerGroupExtent

func (p *ReadConsumerGroupExtentsByExtUUIDResult_) GetCgExtents() []*ConsumerGroupExtent {
	return p.CgExtents
}

var ReadConsumerGroupExtentsByExtUUIDResult__NextPageToken_DEFAULT []byte

func (p *ReadConsumerGroupExtentsByExtUUIDResult_) GetNextPageToken() []byte {
	return p.NextPageToken
}
func (p *ReadConsumerGroupExtentsByExtUUIDResult_) IsSetCgExtents() bool {
	return p.CgExtents != nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDResult_) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ConsumerGroupExtent, 0, size)
	p.CgExtents = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &ConsumerGroupExtent{}
		if err := _elem10.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
		}
		p.CgExtents = append(p.CgExtents, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NextPageToken = v
	}
	return nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadConsumerGroupExtentsByExtUUIDResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCgExtents() {
		if err := oprot.WriteFieldBegin("cgExtents", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cgExtents: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CgExtents)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.CgExtents {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cgExtents: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupExtentsByExtUUIDResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err := oprot.WriteFieldBegin("nextPageToken", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nextPageToken: ", p), err)
		}
		if err := oprot.WriteBinary(p.NextPageToken); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nextPageToken (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nextPageToken: ", p), err)
		}
	}
	return err
}

func (p *ReadConsumerGroupExtentsByExtUUIDResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadConsumerGroupExtentsByExtUUIDResult_(%+v)", *p)
}

// Attributes:
//  - HostUUID
//  - HostAddr
//  - HostName
//  - TtlSeconds
type RegisterHostUUIDRequest struct {
	HostUUID   *string `thrift:"hostUUID,1" json:"hostUUID,omitempty"`
	HostAddr   *string `thrift:"hostAddr,2" json:"hostAddr,omitempty"`
	HostName   *string `thrift:"hostName,3" json:"hostName,omitempty"`
	TtlSeconds *int64  `thrift:"ttlSeconds,4" json:"ttlSeconds,omitempty"`
}

func NewRegisterHostUUIDRequest() *RegisterHostUUIDRequest {
	return &RegisterHostUUIDRequest{}
}

var RegisterHostUUIDRequest_HostUUID_DEFAULT string

func (p *RegisterHostUUIDRequest) GetHostUUID() string {
	if !p.IsSetHostUUID() {
		return RegisterHostUUIDRequest_HostUUID_DEFAULT
	}
	return *p.HostUUID
}

var RegisterHostUUIDRequest_HostAddr_DEFAULT string

func (p *RegisterHostUUIDRequest) GetHostAddr() string {
	if !p.IsSetHostAddr() {
		return RegisterHostUUIDRequest_HostAddr_DEFAULT
	}
	return *p.HostAddr
}

var RegisterHostUUIDRequest_HostName_DEFAULT string

func (p *RegisterHostUUIDRequest) GetHostName() string {
	if !p.IsSetHostName() {
		return RegisterHostUUIDRequest_HostName_DEFAULT
	}
	return *p.HostName
}

var RegisterHostUUIDRequest_TtlSeconds_DEFAULT int64

func (p *RegisterHostUUIDRequest) GetTtlSeconds() int64 {
	if !p.IsSetTtlSeconds() {
		return RegisterHostUUIDRequest_TtlSeconds_DEFAULT
	}
	return *p.TtlSeconds
}
func (p *RegisterHostUUIDRequest) IsSetHostUUID() bool {
	return p.HostUUID != nil
}

func (p *RegisterHostUUIDRequest) IsSetHostAddr() bool {
	return p.HostAddr != nil
}

func (p *RegisterHostUUIDRequest) IsSetHostName() bool {
	return p.HostName != nil
}

func (p *RegisterHostUUIDRequest) IsSetTtlSeconds() bool {
	return p.TtlSeconds != nil
}

func (p *RegisterHostUUIDRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RegisterHostUUIDRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HostUUID = &v
	}
	return nil
}

func (p *RegisterHostUUIDRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.HostAddr = &v
	}
	return nil
}

func (p *RegisterHostUUIDRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.HostName = &v
	}
	return nil
}

func (p *RegisterHostUUIDRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TtlSeconds = &v
	}
	return nil
}

func (p *RegisterHostUUIDRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RegisterHostUUIDRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RegisterHostUUIDRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostUUID() {
		if err := oprot.WriteFieldBegin("hostUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HostUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hostUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostUUID: ", p), err)
		}
	}
	return err
}

func (p *RegisterHostUUIDRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostAddr() {
		if err := oprot.WriteFieldBegin("hostAddr", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostAddr: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HostAddr)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hostAddr (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostAddr: ", p), err)
		}
	}
	return err
}

func (p *RegisterHostUUIDRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostName() {
		if err := oprot.WriteFieldBegin("hostName", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hostName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HostName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hostName (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hostName: ", p), err)
		}
	}
	return err
}

func (p *RegisterHostUUIDRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTtlSeconds() {
		if err := oprot.WriteFieldBegin("ttlSeconds", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ttlSeconds: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.TtlSeconds)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ttlSeconds (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ttlSeconds: ", p), err)
		}
	}
	return err
}

func (p *RegisterHostUUIDRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterHostUUIDRequest(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - ExtentUUID
//  - NewDestinationUUID_
//  - ConsumerGroupVisibilityUUID
type MoveExtentRequest struct {
	DestinationUUID             *string `thrift:"destinationUUID,1" json:"destinationUUID,omitempty"`
	ExtentUUID                  *string `thrift:"extentUUID,2" json:"extentUUID,omitempty"`
	NewDestinationUUID_         *string `thrift:"newDestinationUUID,3" json:"newDestinationUUID,omitempty"`
	ConsumerGroupVisibilityUUID *string `thrift:"consumerGroupVisibilityUUID,4" json:"consumerGroupVisibilityUUID,omitempty"`
}

func NewMoveExtentRequest() *MoveExtentRequest {
	return &MoveExtentRequest{}
}

var MoveExtentRequest_DestinationUUID_DEFAULT string

func (p *MoveExtentRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return MoveExtentRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var MoveExtentRequest_ExtentUUID_DEFAULT string

func (p *MoveExtentRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return MoveExtentRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var MoveExtentRequest_NewDestinationUUID__DEFAULT string

func (p *MoveExtentRequest) GetNewDestinationUUID_() string {
	if !p.IsSetNewDestinationUUID_() {
		return MoveExtentRequest_NewDestinationUUID__DEFAULT
	}
	return *p.NewDestinationUUID_
}

var MoveExtentRequest_ConsumerGroupVisibilityUUID_DEFAULT string

func (p *MoveExtentRequest) GetConsumerGroupVisibilityUUID() string {
	if !p.IsSetConsumerGroupVisibilityUUID() {
		return MoveExtentRequest_ConsumerGroupVisibilityUUID_DEFAULT
	}
	return *p.ConsumerGroupVisibilityUUID
}
func (p *MoveExtentRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *MoveExtentRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *MoveExtentRequest) IsSetNewDestinationUUID_() bool {
	return p.NewDestinationUUID_ != nil
}

func (p *MoveExtentRequest) IsSetConsumerGroupVisibilityUUID() bool {
	return p.ConsumerGroupVisibilityUUID != nil
}

func (p *MoveExtentRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MoveExtentRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *MoveExtentRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *MoveExtentRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NewDestinationUUID_ = &v
	}
	return nil
}

func (p *MoveExtentRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ConsumerGroupVisibilityUUID = &v
	}
	return nil
}

func (p *MoveExtentRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MoveExtentRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MoveExtentRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *MoveExtentRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *MoveExtentRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNewDestinationUUID_() {
		if err := oprot.WriteFieldBegin("newDestinationUUID", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:newDestinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.NewDestinationUUID_)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.newDestinationUUID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:newDestinationUUID: ", p), err)
		}
	}
	return err
}

func (p *MoveExtentRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupVisibilityUUID() {
		if err := oprot.WriteFieldBegin("consumerGroupVisibilityUUID", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:consumerGroupVisibilityUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupVisibilityUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupVisibilityUUID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:consumerGroupVisibilityUUID: ", p), err)
		}
	}
	return err
}

func (p *MoveExtentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MoveExtentRequest(%+v)", *p)
}

// Attributes:
//  - Hostname
//  - Properties
type CreateHostInfoRequest struct {
	Hostname   *string           `thrift:"hostname,1" json:"hostname,omitempty"`
	Properties map[string]string `thrift:"properties,2" json:"properties,omitempty"`
}

func NewCreateHostInfoRequest() *CreateHostInfoRequest {
	return &CreateHostInfoRequest{}
}

var CreateHostInfoRequest_Hostname_DEFAULT string

func (p *CreateHostInfoRequest) GetHostname() string {
	if !p.IsSetHostname() {
		return CreateHostInfoRequest_Hostname_DEFAULT
	}
	return *p.Hostname
}

var CreateHostInfoRequest_Properties_DEFAULT map[string]string

func (p *CreateHostInfoRequest) GetProperties() map[string]string {
	return p.Properties
}
func (p *CreateHostInfoRequest) IsSetHostname() bool {
	return p.Hostname != nil
}

func (p *CreateHostInfoRequest) IsSetProperties() bool {
	return p.Properties != nil
}

func (p *CreateHostInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CreateHostInfoRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Hostname = &v
	}
	return nil
}

func (p *CreateHostInfoRequest) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Properties = tMap
	for i := 0; i < size; i++ {
		var _key11 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key11 = v
		}
		var _val12 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val12 = v
		}
		p.Properties[_key11] = _val12
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *CreateHostInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateHostInfoRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CreateHostInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostname() {
		if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostname: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Hostname)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hostname (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostname: ", p), err)
		}
	}
	return err
}

func (p *CreateHostInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetProperties() {
		if err := oprot.WriteFieldBegin("properties", thrift.MAP, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:properties: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Properties {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:properties: ", p), err)
		}
	}
	return err
}

func (p *CreateHostInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateHostInfoRequest(%+v)", *p)
}

// Attributes:
//  - Hostname
//  - Properties
type UpdateHostInfoRequest struct {
	Hostname   *string           `thrift:"hostname,1" json:"hostname,omitempty"`
	Properties map[string]string `thrift:"properties,2" json:"properties,omitempty"`
}

func NewUpdateHostInfoRequest() *UpdateHostInfoRequest {
	return &UpdateHostInfoRequest{}
}

var UpdateHostInfoRequest_Hostname_DEFAULT string

func (p *UpdateHostInfoRequest) GetHostname() string {
	if !p.IsSetHostname() {
		return UpdateHostInfoRequest_Hostname_DEFAULT
	}
	return *p.Hostname
}

var UpdateHostInfoRequest_Properties_DEFAULT map[string]string

func (p *UpdateHostInfoRequest) GetProperties() map[string]string {
	return p.Properties
}
func (p *UpdateHostInfoRequest) IsSetHostname() bool {
	return p.Hostname != nil
}

func (p *UpdateHostInfoRequest) IsSetProperties() bool {
	return p.Properties != nil
}

func (p *UpdateHostInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateHostInfoRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Hostname = &v
	}
	return nil
}

func (p *UpdateHostInfoRequest) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Properties = tMap
	for i := 0; i < size; i++ {
		var _key13 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key13 = v
		}
		var _val14 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val14 = v
		}
		p.Properties[_key13] = _val14
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UpdateHostInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateHostInfoRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateHostInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostname() {
		if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostname: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Hostname)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hostname (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostname: ", p), err)
		}
	}
	return err
}

func (p *UpdateHostInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetProperties() {
		if err := oprot.WriteFieldBegin("properties", thrift.MAP, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:properties: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Properties {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:properties: ", p), err)
		}
	}
	return err
}

func (p *UpdateHostInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateHostInfoRequest(%+v)", *p)
}

// Attributes:
//  - Hostname
//  - PropertyKey
type DeleteHostInfoRequest struct {
	Hostname    *string `thrift:"hostname,1" json:"hostname,omitempty"`
	PropertyKey *string `thrift:"propertyKey,2" json:"propertyKey,omitempty"`
}

func NewDeleteHostInfoRequest() *DeleteHostInfoRequest {
	return &DeleteHostInfoRequest{}
}

var DeleteHostInfoRequest_Hostname_DEFAULT string

func (p *DeleteHostInfoRequest) GetHostname() string {
	if !p.IsSetHostname() {
		return DeleteHostInfoRequest_Hostname_DEFAULT
	}
	return *p.Hostname
}

var DeleteHostInfoRequest_PropertyKey_DEFAULT string

func (p *DeleteHostInfoRequest) GetPropertyKey() string {
	if !p.IsSetPropertyKey() {
		return DeleteHostInfoRequest_PropertyKey_DEFAULT
	}
	return *p.PropertyKey
}
func (p *DeleteHostInfoRequest) IsSetHostname() bool {
	return p.Hostname != nil
}

func (p *DeleteHostInfoRequest) IsSetPropertyKey() bool {
	return p.PropertyKey != nil
}

func (p *DeleteHostInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DeleteHostInfoRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Hostname = &v
	}
	return nil
}

func (p *DeleteHostInfoRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PropertyKey = &v
	}
	return nil
}

func (p *DeleteHostInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteHostInfoRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DeleteHostInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostname() {
		if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostname: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Hostname)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hostname (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostname: ", p), err)
		}
	}
	return err
}

func (p *DeleteHostInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPropertyKey() {
		if err := oprot.WriteFieldBegin("propertyKey", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:propertyKey: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PropertyKey)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.propertyKey (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:propertyKey: ", p), err)
		}
	}
	return err
}

func (p *DeleteHostInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteHostInfoRequest(%+v)", *p)
}

// Attributes:
//  - Hostname
type ReadHostInfoRequest struct {
	Hostname *string `thrift:"hostname,1" json:"hostname,omitempty"`
}

func NewReadHostInfoRequest() *ReadHostInfoRequest {
	return &ReadHostInfoRequest{}
}

var ReadHostInfoRequest_Hostname_DEFAULT string

func (p *ReadHostInfoRequest) GetHostname() string {
	if !p.IsSetHostname() {
		return ReadHostInfoRequest_Hostname_DEFAULT
	}
	return *p.Hostname
}
func (p *ReadHostInfoRequest) IsSetHostname() bool {
	return p.Hostname != nil
}

func (p *ReadHostInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadHostInfoRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Hostname = &v
	}
	return nil
}

func (p *ReadHostInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadHostInfoRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadHostInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostname() {
		if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostname: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Hostname)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hostname (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostname: ", p), err)
		}
	}
	return err
}

func (p *ReadHostInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadHostInfoRequest(%+v)", *p)
}

// Attributes:
//  - Hostname
//  - Properties
type ReadHostInfoResult_ struct {
	Hostname   *string           `thrift:"hostname,1" json:"hostname,omitempty"`
	Properties map[string]string `thrift:"properties,2" json:"properties,omitempty"`
}

func NewReadHostInfoResult_() *ReadHostInfoResult_ {
	return &ReadHostInfoResult_{}
}

var ReadHostInfoResult__Hostname_DEFAULT string

func (p *ReadHostInfoResult_) GetHostname() string {
	if !p.IsSetHostname() {
		return ReadHostInfoResult__Hostname_DEFAULT
	}
	return *p.Hostname
}

var ReadHostInfoResult__Properties_DEFAULT map[string]string

func (p *ReadHostInfoResult_) GetProperties() map[string]string {
	return p.Properties
}
func (p *ReadHostInfoResult_) IsSetHostname() bool {
	return p.Hostname != nil
}

func (p *ReadHostInfoResult_) IsSetProperties() bool {
	return p.Properties != nil
}

func (p *ReadHostInfoResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadHostInfoResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Hostname = &v
	}
	return nil
}

func (p *ReadHostInfoResult_) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Properties = tMap
	for i := 0; i < size; i++ {
		var _key15 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key15 = v
		}
		var _val16 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val16 = v
		}
		p.Properties[_key15] = _val16
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ReadHostInfoResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadHostInfoResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadHostInfoResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostname() {
		if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostname: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Hostname)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hostname (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostname: ", p), err)
		}
	}
	return err
}

func (p *ReadHostInfoResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetProperties() {
		if err := oprot.WriteFieldBegin("properties", thrift.MAP, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:properties: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Properties {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:properties: ", p), err)
		}
	}
	return err
}

func (p *ReadHostInfoResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadHostInfoResult_(%+v)", *p)
}

// Attributes:
//  - ServiceName
//  - ServiceVersion
//  - Sku
//  - Hostname
//  - ConfigKey
//  - ConfigValue
type ServiceConfigItem struct {
	ServiceName    *string `thrift:"serviceName,1" json:"serviceName,omitempty"`
	ServiceVersion *string `thrift:"serviceVersion,2" json:"serviceVersion,omitempty"`
	Sku            *string `thrift:"sku,3" json:"sku,omitempty"`
	Hostname       *string `thrift:"hostname,4" json:"hostname,omitempty"`
	ConfigKey      *string `thrift:"configKey,5" json:"configKey,omitempty"`
	ConfigValue    *string `thrift:"configValue,6" json:"configValue,omitempty"`
}

func NewServiceConfigItem() *ServiceConfigItem {
	return &ServiceConfigItem{}
}

var ServiceConfigItem_ServiceName_DEFAULT string

func (p *ServiceConfigItem) GetServiceName() string {
	if !p.IsSetServiceName() {
		return ServiceConfigItem_ServiceName_DEFAULT
	}
	return *p.ServiceName
}

var ServiceConfigItem_ServiceVersion_DEFAULT string

func (p *ServiceConfigItem) GetServiceVersion() string {
	if !p.IsSetServiceVersion() {
		return ServiceConfigItem_ServiceVersion_DEFAULT
	}
	return *p.ServiceVersion
}

var ServiceConfigItem_Sku_DEFAULT string

func (p *ServiceConfigItem) GetSku() string {
	if !p.IsSetSku() {
		return ServiceConfigItem_Sku_DEFAULT
	}
	return *p.Sku
}

var ServiceConfigItem_Hostname_DEFAULT string

func (p *ServiceConfigItem) GetHostname() string {
	if !p.IsSetHostname() {
		return ServiceConfigItem_Hostname_DEFAULT
	}
	return *p.Hostname
}

var ServiceConfigItem_ConfigKey_DEFAULT string

func (p *ServiceConfigItem) GetConfigKey() string {
	if !p.IsSetConfigKey() {
		return ServiceConfigItem_ConfigKey_DEFAULT
	}
	return *p.ConfigKey
}

var ServiceConfigItem_ConfigValue_DEFAULT string

func (p *ServiceConfigItem) GetConfigValue() string {
	if !p.IsSetConfigValue() {
		return ServiceConfigItem_ConfigValue_DEFAULT
	}
	return *p.ConfigValue
}
func (p *ServiceConfigItem) IsSetServiceName() bool {
	return p.ServiceName != nil
}

func (p *ServiceConfigItem) IsSetServiceVersion() bool {
	return p.ServiceVersion != nil
}

func (p *ServiceConfigItem) IsSetSku() bool {
	return p.Sku != nil
}

func (p *ServiceConfigItem) IsSetHostname() bool {
	return p.Hostname != nil
}

func (p *ServiceConfigItem) IsSetConfigKey() bool {
	return p.ConfigKey != nil
}

func (p *ServiceConfigItem) IsSetConfigValue() bool {
	return p.ConfigValue != nil
}

func (p *ServiceConfigItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServiceConfigItem) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ServiceName = &v
	}
	return nil
}

func (p *ServiceConfigItem) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ServiceVersion = &v
	}
	return nil
}

func (p *ServiceConfigItem) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Sku = &v
	}
	return nil
}

func (p *ServiceConfigItem) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Hostname = &v
	}
	return nil
}

func (p *ServiceConfigItem) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ConfigKey = &v
	}
	return nil
}

func (p *ServiceConfigItem) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ConfigValue = &v
	}
	return nil
}

func (p *ServiceConfigItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ServiceConfigItem"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceConfigItem) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceName() {
		if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serviceName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ServiceName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.serviceName (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serviceName: ", p), err)
		}
	}
	return err
}

func (p *ServiceConfigItem) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceVersion() {
		if err := oprot.WriteFieldBegin("serviceVersion", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serviceVersion: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ServiceVersion)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.serviceVersion (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serviceVersion: ", p), err)
		}
	}
	return err
}

func (p *ServiceConfigItem) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSku() {
		if err := oprot.WriteFieldBegin("sku", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sku: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Sku)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sku (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sku: ", p), err)
		}
	}
	return err
}

func (p *ServiceConfigItem) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostname() {
		if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hostname: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Hostname)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hostname (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hostname: ", p), err)
		}
	}
	return err
}

func (p *ServiceConfigItem) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfigKey() {
		if err := oprot.WriteFieldBegin("configKey", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:configKey: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConfigKey)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.configKey (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:configKey: ", p), err)
		}
	}
	return err
}

func (p *ServiceConfigItem) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfigValue() {
		if err := oprot.WriteFieldBegin("configValue", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:configValue: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConfigValue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.configValue (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:configValue: ", p), err)
		}
	}
	return err
}

func (p *ServiceConfigItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServiceConfigItem(%+v)", *p)
}

// Attributes:
//  - ConfigItem
type CreateServiceConfigRequest struct {
	ConfigItem *ServiceConfigItem `thrift:"configItem,1" json:"configItem,omitempty"`
}

func NewCreateServiceConfigRequest() *CreateServiceConfigRequest {
	return &CreateServiceConfigRequest{}
}

var CreateServiceConfigRequest_ConfigItem_DEFAULT *ServiceConfigItem

func (p *CreateServiceConfigRequest) GetConfigItem() *ServiceConfigItem {
	if !p.IsSetConfigItem() {
		return CreateServiceConfigRequest_ConfigItem_DEFAULT
	}
	return p.ConfigItem
}
func (p *CreateServiceConfigRequest) IsSetConfigItem() bool {
	return p.ConfigItem != nil
}

func (p *CreateServiceConfigRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CreateServiceConfigRequest) readField1(iprot thrift.TProtocol) error {
	p.ConfigItem = &ServiceConfigItem{}
	if err := p.ConfigItem.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConfigItem), err)
	}
	return nil
}

func (p *CreateServiceConfigRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateServiceConfigRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CreateServiceConfigRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfigItem() {
		if err := oprot.WriteFieldBegin("configItem", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:configItem: ", p), err)
		}
		if err := p.ConfigItem.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConfigItem), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:configItem: ", p), err)
		}
	}
	return err
}

func (p *CreateServiceConfigRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateServiceConfigRequest(%+v)", *p)
}

// Attributes:
//  - ConfigItem
type UpdateServiceConfigRequest struct {
	ConfigItem *ServiceConfigItem `thrift:"configItem,1" json:"configItem,omitempty"`
}

func NewUpdateServiceConfigRequest() *UpdateServiceConfigRequest {
	return &UpdateServiceConfigRequest{}
}

var UpdateServiceConfigRequest_ConfigItem_DEFAULT *ServiceConfigItem

func (p *UpdateServiceConfigRequest) GetConfigItem() *ServiceConfigItem {
	if !p.IsSetConfigItem() {
		return UpdateServiceConfigRequest_ConfigItem_DEFAULT
	}
	return p.ConfigItem
}
func (p *UpdateServiceConfigRequest) IsSetConfigItem() bool {
	return p.ConfigItem != nil
}

func (p *UpdateServiceConfigRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateServiceConfigRequest) readField1(iprot thrift.TProtocol) error {
	p.ConfigItem = &ServiceConfigItem{}
	if err := p.ConfigItem.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConfigItem), err)
	}
	return nil
}

func (p *UpdateServiceConfigRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateServiceConfigRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateServiceConfigRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfigItem() {
		if err := oprot.WriteFieldBegin("configItem", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:configItem: ", p), err)
		}
		if err := p.ConfigItem.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConfigItem), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:configItem: ", p), err)
		}
	}
	return err
}

func (p *UpdateServiceConfigRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateServiceConfigRequest(%+v)", *p)
}

// Attributes:
//  - ServiceName
//  - ServiceVersion
//  - Sku
//  - Hostname
//  - ConfigKey
type DeleteServiceConfigRequest struct {
	ServiceName    *string `thrift:"serviceName,1" json:"serviceName,omitempty"`
	ServiceVersion *string `thrift:"serviceVersion,2" json:"serviceVersion,omitempty"`
	Sku            *string `thrift:"sku,3" json:"sku,omitempty"`
	Hostname       *string `thrift:"hostname,4" json:"hostname,omitempty"`
	ConfigKey      *string `thrift:"configKey,5" json:"configKey,omitempty"`
}

func NewDeleteServiceConfigRequest() *DeleteServiceConfigRequest {
	return &DeleteServiceConfigRequest{}
}

var DeleteServiceConfigRequest_ServiceName_DEFAULT string

func (p *DeleteServiceConfigRequest) GetServiceName() string {
	if !p.IsSetServiceName() {
		return DeleteServiceConfigRequest_ServiceName_DEFAULT
	}
	return *p.ServiceName
}

var DeleteServiceConfigRequest_ServiceVersion_DEFAULT string

func (p *DeleteServiceConfigRequest) GetServiceVersion() string {
	if !p.IsSetServiceVersion() {
		return DeleteServiceConfigRequest_ServiceVersion_DEFAULT
	}
	return *p.ServiceVersion
}

var DeleteServiceConfigRequest_Sku_DEFAULT string

func (p *DeleteServiceConfigRequest) GetSku() string {
	if !p.IsSetSku() {
		return DeleteServiceConfigRequest_Sku_DEFAULT
	}
	return *p.Sku
}

var DeleteServiceConfigRequest_Hostname_DEFAULT string

func (p *DeleteServiceConfigRequest) GetHostname() string {
	if !p.IsSetHostname() {
		return DeleteServiceConfigRequest_Hostname_DEFAULT
	}
	return *p.Hostname
}

var DeleteServiceConfigRequest_ConfigKey_DEFAULT string

func (p *DeleteServiceConfigRequest) GetConfigKey() string {
	if !p.IsSetConfigKey() {
		return DeleteServiceConfigRequest_ConfigKey_DEFAULT
	}
	return *p.ConfigKey
}
func (p *DeleteServiceConfigRequest) IsSetServiceName() bool {
	return p.ServiceName != nil
}

func (p *DeleteServiceConfigRequest) IsSetServiceVersion() bool {
	return p.ServiceVersion != nil
}

func (p *DeleteServiceConfigRequest) IsSetSku() bool {
	return p.Sku != nil
}

func (p *DeleteServiceConfigRequest) IsSetHostname() bool {
	return p.Hostname != nil
}

func (p *DeleteServiceConfigRequest) IsSetConfigKey() bool {
	return p.ConfigKey != nil
}

func (p *DeleteServiceConfigRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DeleteServiceConfigRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ServiceName = &v
	}
	return nil
}

func (p *DeleteServiceConfigRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ServiceVersion = &v
	}
	return nil
}

func (p *DeleteServiceConfigRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Sku = &v
	}
	return nil
}

func (p *DeleteServiceConfigRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Hostname = &v
	}
	return nil
}

func (p *DeleteServiceConfigRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ConfigKey = &v
	}
	return nil
}

func (p *DeleteServiceConfigRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteServiceConfigRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DeleteServiceConfigRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceName() {
		if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serviceName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ServiceName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.serviceName (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serviceName: ", p), err)
		}
	}
	return err
}

func (p *DeleteServiceConfigRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceVersion() {
		if err := oprot.WriteFieldBegin("serviceVersion", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serviceVersion: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ServiceVersion)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.serviceVersion (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serviceVersion: ", p), err)
		}
	}
	return err
}

func (p *DeleteServiceConfigRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSku() {
		if err := oprot.WriteFieldBegin("sku", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sku: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Sku)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sku (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sku: ", p), err)
		}
	}
	return err
}

func (p *DeleteServiceConfigRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostname() {
		if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hostname: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Hostname)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hostname (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hostname: ", p), err)
		}
	}
	return err
}

func (p *DeleteServiceConfigRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfigKey() {
		if err := oprot.WriteFieldBegin("configKey", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:configKey: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConfigKey)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.configKey (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:configKey: ", p), err)
		}
	}
	return err
}

func (p *DeleteServiceConfigRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteServiceConfigRequest(%+v)", *p)
}

// Attributes:
//  - ServiceName
//  - ServiceVersion
//  - Sku
//  - Hostname
//  - ConfigKey
type ReadServiceConfigRequest struct {
	ServiceName    *string `thrift:"serviceName,1" json:"serviceName,omitempty"`
	ServiceVersion *string `thrift:"serviceVersion,2" json:"serviceVersion,omitempty"`
	Sku            *string `thrift:"sku,3" json:"sku,omitempty"`
	Hostname       *string `thrift:"hostname,4" json:"hostname,omitempty"`
	ConfigKey      *string `thrift:"configKey,5" json:"configKey,omitempty"`
}

func NewReadServiceConfigRequest() *ReadServiceConfigRequest {
	return &ReadServiceConfigRequest{}
}

var ReadServiceConfigRequest_ServiceName_DEFAULT string

func (p *ReadServiceConfigRequest) GetServiceName() string {
	if !p.IsSetServiceName() {
		return ReadServiceConfigRequest_ServiceName_DEFAULT
	}
	return *p.ServiceName
}

var ReadServiceConfigRequest_ServiceVersion_DEFAULT string

func (p *ReadServiceConfigRequest) GetServiceVersion() string {
	if !p.IsSetServiceVersion() {
		return ReadServiceConfigRequest_ServiceVersion_DEFAULT
	}
	return *p.ServiceVersion
}

var ReadServiceConfigRequest_Sku_DEFAULT string

func (p *ReadServiceConfigRequest) GetSku() string {
	if !p.IsSetSku() {
		return ReadServiceConfigRequest_Sku_DEFAULT
	}
	return *p.Sku
}

var ReadServiceConfigRequest_Hostname_DEFAULT string

func (p *ReadServiceConfigRequest) GetHostname() string {
	if !p.IsSetHostname() {
		return ReadServiceConfigRequest_Hostname_DEFAULT
	}
	return *p.Hostname
}

var ReadServiceConfigRequest_ConfigKey_DEFAULT string

func (p *ReadServiceConfigRequest) GetConfigKey() string {
	if !p.IsSetConfigKey() {
		return ReadServiceConfigRequest_ConfigKey_DEFAULT
	}
	return *p.ConfigKey
}
func (p *ReadServiceConfigRequest) IsSetServiceName() bool {
	return p.ServiceName != nil
}

func (p *ReadServiceConfigRequest) IsSetServiceVersion() bool {
	return p.ServiceVersion != nil
}

func (p *ReadServiceConfigRequest) IsSetSku() bool {
	return p.Sku != nil
}

func (p *ReadServiceConfigRequest) IsSetHostname() bool {
	return p.Hostname != nil
}

func (p *ReadServiceConfigRequest) IsSetConfigKey() bool {
	return p.ConfigKey != nil
}

func (p *ReadServiceConfigRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadServiceConfigRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ServiceName = &v
	}
	return nil
}

func (p *ReadServiceConfigRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ServiceVersion = &v
	}
	return nil
}

func (p *ReadServiceConfigRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Sku = &v
	}
	return nil
}

func (p *ReadServiceConfigRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Hostname = &v
	}
	return nil
}

func (p *ReadServiceConfigRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ConfigKey = &v
	}
	return nil
}

func (p *ReadServiceConfigRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadServiceConfigRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadServiceConfigRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceName() {
		if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serviceName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ServiceName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.serviceName (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serviceName: ", p), err)
		}
	}
	return err
}

func (p *ReadServiceConfigRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceVersion() {
		if err := oprot.WriteFieldBegin("serviceVersion", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serviceVersion: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ServiceVersion)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.serviceVersion (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serviceVersion: ", p), err)
		}
	}
	return err
}

func (p *ReadServiceConfigRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSku() {
		if err := oprot.WriteFieldBegin("sku", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sku: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Sku)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sku (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sku: ", p), err)
		}
	}
	return err
}

func (p *ReadServiceConfigRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostname() {
		if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hostname: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Hostname)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hostname (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hostname: ", p), err)
		}
	}
	return err
}

func (p *ReadServiceConfigRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfigKey() {
		if err := oprot.WriteFieldBegin("configKey", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:configKey: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConfigKey)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.configKey (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:configKey: ", p), err)
		}
	}
	return err
}

func (p *ReadServiceConfigRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadServiceConfigRequest(%+v)", *p)
}

// Attributes:
//  - ConfigItems
type ReadServiceConfigResult_ struct {
	ConfigItems []*ServiceConfigItem `thrift:"configItems,1" json:"configItems,omitempty"`
}

func NewReadServiceConfigResult_() *ReadServiceConfigResult_ {
	return &ReadServiceConfigResult_{}
}

var ReadServiceConfigResult__ConfigItems_DEFAULT []*ServiceConfigItem

func (p *ReadServiceConfigResult_) GetConfigItems() []*ServiceConfigItem {
	return p.ConfigItems
}
func (p *ReadServiceConfigResult_) IsSetConfigItems() bool {
	return p.ConfigItems != nil
}

func (p *ReadServiceConfigResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadServiceConfigResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ServiceConfigItem, 0, size)
	p.ConfigItems = tSlice
	for i := 0; i < size; i++ {
		_elem17 := &ServiceConfigItem{}
		if err := _elem17.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
		}
		p.ConfigItems = append(p.ConfigItems, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ReadServiceConfigResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadServiceConfigResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadServiceConfigResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfigItems() {
		if err := oprot.WriteFieldBegin("configItems", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:configItems: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ConfigItems)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ConfigItems {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:configItems: ", p), err)
		}
	}
	return err
}

func (p *ReadServiceConfigResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadServiceConfigResult_(%+v)", *p)
}
