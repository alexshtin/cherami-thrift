// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package metadata

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/cherami-thrift/.generated/go/shared"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = shared.GoUnusedProtection__

type MetadataService interface {
	MetadataExposable

	// *** Destination CRUD *********************
	//
	// Parameters:
	//  - CreateRequest
	CreateDestination(createRequest *shared.CreateDestinationRequest) (r *shared.DestinationDescription, err error)
	// Parameters:
	//  - CreateRequest
	CreateDestinationUUID(createRequest *shared.CreateDestinationUUIDRequest) (r *shared.DestinationDescription, err error)
	// Parameters:
	//  - UpdateRequest
	UpdateDestination(updateRequest *shared.UpdateDestinationRequest) (r *shared.DestinationDescription, err error)
	// Parameters:
	//  - UpdateRequest
	UpdateDestinationDLQCursors(updateRequest *UpdateDestinationDLQCursorsRequest) (r *shared.DestinationDescription, err error)
	// Parameters:
	//  - DeleteRequest
	DeleteDestination(deleteRequest *shared.DeleteDestinationRequest) (err error)
	// Parameters:
	//  - DeleteRequest
	DeleteDestinationUUID(deleteRequest *DeleteDestinationUUIDRequest) (err error)
	// *** ConsumerGroup CRUD *******************
	//
	// Parameters:
	//  - CreateRequest
	CreateConsumerGroup(createRequest *shared.CreateConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error)
	// Parameters:
	//  - UpdateRequest
	UpdateConsumerGroup(updateRequest *shared.UpdateConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error)
	// Parameters:
	//  - DeleteRequest
	DeleteConsumerGroup(deleteRequest *shared.DeleteConsumerGroupRequest) (err error)
	// *** Extent Management *******************
	//
	// Parameters:
	//  - Request
	CreateExtent(request *shared.CreateExtentRequest) (r *shared.CreateExtentResult_, err error)
	// Parameters:
	//  - Request
	UpdateExtentStats(request *UpdateExtentStatsRequest) (r *UpdateExtentStatsResult_, err error)
	// Parameters:
	//  - Request
	ReadStoreExtentReplicaStats(request *ReadStoreExtentReplicaStatsRequest) (r *ReadStoreExtentReplicaStatsResult_, err error)
	// Parameters:
	//  - Request
	SealExtent(request *SealExtentRequest) (err error)
	// Parameters:
	//  - Request
	UpdateExtentReplicaStats(request *UpdateExtentReplicaStatsRequest) (err error)
	// Parameters:
	//  - Request
	UpdateStoreExtentReplicaStats(request *UpdateStoreExtentReplicaStatsRequest) (err error)
	// Parameters:
	//  - Request
	MoveExtent(request *MoveExtentRequest) (err error)
	// *** Consumer Group Extent Management *******************
	//
	// Parameters:
	//  - Request
	SetAckOffset(request *SetAckOffsetRequest) (err error)
	// Parameters:
	//  - Request
	UpdateConsumerGroupExtentStatus(request *UpdateConsumerGroupExtentStatusRequest) (err error)
	// Parameters:
	//  - Request
	CreateConsumerGroupExtent(request *CreateConsumerGroupExtentRequest) (err error)
	// Parameters:
	//  - Request
	SetOutputHost(request *SetOutputHostRequest) (err error)
	// Parameters:
	//  - Request
	RegisterHostUUID(request *RegisterHostUUIDRequest) (err error)
	// ** Hardware Info and Config Management ***
	//
	// Parameters:
	//  - Request
	CreateHostInfo(request *CreateHostInfoRequest) (err error)
	// Parameters:
	//  - Request
	UpdateHostInfo(request *UpdateHostInfoRequest) (err error)
	// Parameters:
	//  - Request
	DeleteHostInfo(request *DeleteHostInfoRequest) (err error)
	// Parameters:
	//  - Request
	ReadHostInfo(request *ReadHostInfoRequest) (r *ReadHostInfoResult_, err error)
	// Parameters:
	//  - Request
	CreateServiceConfig(request *CreateServiceConfigRequest) (err error)
	// Parameters:
	//  - Request
	DeleteServiceConfig(request *DeleteServiceConfigRequest) (err error)
	// Parameters:
	//  - Request
	ReadServiceConfig(request *ReadServiceConfigRequest) (r *ReadServiceConfigResult_, err error)
}

type MetadataServiceClient struct {
	*MetadataExposableClient
}

func NewMetadataServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MetadataServiceClient {
	return &MetadataServiceClient{MetadataExposableClient: NewMetadataExposableClientFactory(t, f)}
}

func NewMetadataServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MetadataServiceClient {
	return &MetadataServiceClient{MetadataExposableClient: NewMetadataExposableClientProtocol(t, iprot, oprot)}
}

// *** Destination CRUD *********************
//
// Parameters:
//  - CreateRequest
func (p *MetadataServiceClient) CreateDestination(createRequest *shared.CreateDestinationRequest) (r *shared.DestinationDescription, err error) {
	if err = p.sendCreateDestination(createRequest); err != nil {
		return
	}
	return p.recvCreateDestination()
}

func (p *MetadataServiceClient) sendCreateDestination(createRequest *shared.CreateDestinationRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createDestination", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceCreateDestinationArgs{
		CreateRequest: createRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvCreateDestination() (value *shared.DestinationDescription, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createDestination" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createDestination failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createDestination failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error162 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error163 error
		error163, err = error162.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error163
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createDestination failed: invalid message type")
		return
	}
	result := MetadataServiceCreateDestinationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityExistsError != nil {
		err = result.EntityExistsError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - CreateRequest
func (p *MetadataServiceClient) CreateDestinationUUID(createRequest *shared.CreateDestinationUUIDRequest) (r *shared.DestinationDescription, err error) {
	if err = p.sendCreateDestinationUUID(createRequest); err != nil {
		return
	}
	return p.recvCreateDestinationUUID()
}

func (p *MetadataServiceClient) sendCreateDestinationUUID(createRequest *shared.CreateDestinationUUIDRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createDestinationUUID", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceCreateDestinationUUIDArgs{
		CreateRequest: createRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvCreateDestinationUUID() (value *shared.DestinationDescription, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createDestinationUUID" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createDestinationUUID failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createDestinationUUID failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error164 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error165 error
		error165, err = error164.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error165
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createDestinationUUID failed: invalid message type")
		return
	}
	result := MetadataServiceCreateDestinationUUIDResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityExistsError != nil {
		err = result.EntityExistsError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UpdateRequest
func (p *MetadataServiceClient) UpdateDestination(updateRequest *shared.UpdateDestinationRequest) (r *shared.DestinationDescription, err error) {
	if err = p.sendUpdateDestination(updateRequest); err != nil {
		return
	}
	return p.recvUpdateDestination()
}

func (p *MetadataServiceClient) sendUpdateDestination(updateRequest *shared.UpdateDestinationRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateDestination", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceUpdateDestinationArgs{
		UpdateRequest: updateRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvUpdateDestination() (value *shared.DestinationDescription, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateDestination" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateDestination failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateDestination failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error166 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error167 error
		error167, err = error166.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error167
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateDestination failed: invalid message type")
		return
	}
	result := MetadataServiceUpdateDestinationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UpdateRequest
func (p *MetadataServiceClient) UpdateDestinationDLQCursors(updateRequest *UpdateDestinationDLQCursorsRequest) (r *shared.DestinationDescription, err error) {
	if err = p.sendUpdateDestinationDLQCursors(updateRequest); err != nil {
		return
	}
	return p.recvUpdateDestinationDLQCursors()
}

func (p *MetadataServiceClient) sendUpdateDestinationDLQCursors(updateRequest *UpdateDestinationDLQCursorsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateDestinationDLQCursors", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceUpdateDestinationDLQCursorsArgs{
		UpdateRequest: updateRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvUpdateDestinationDLQCursors() (value *shared.DestinationDescription, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateDestinationDLQCursors" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateDestinationDLQCursors failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateDestinationDLQCursors failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error168 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error169 error
		error169, err = error168.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error169
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateDestinationDLQCursors failed: invalid message type")
		return
	}
	result := MetadataServiceUpdateDestinationDLQCursorsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DeleteRequest
func (p *MetadataServiceClient) DeleteDestination(deleteRequest *shared.DeleteDestinationRequest) (err error) {
	if err = p.sendDeleteDestination(deleteRequest); err != nil {
		return
	}
	return p.recvDeleteDestination()
}

func (p *MetadataServiceClient) sendDeleteDestination(deleteRequest *shared.DeleteDestinationRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteDestination", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceDeleteDestinationArgs{
		DeleteRequest: deleteRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvDeleteDestination() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deleteDestination" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteDestination failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteDestination failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error170 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error171 error
		error171, err = error170.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error171
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteDestination failed: invalid message type")
		return
	}
	result := MetadataServiceDeleteDestinationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	return
}

// Parameters:
//  - DeleteRequest
func (p *MetadataServiceClient) DeleteDestinationUUID(deleteRequest *DeleteDestinationUUIDRequest) (err error) {
	if err = p.sendDeleteDestinationUUID(deleteRequest); err != nil {
		return
	}
	return p.recvDeleteDestinationUUID()
}

func (p *MetadataServiceClient) sendDeleteDestinationUUID(deleteRequest *DeleteDestinationUUIDRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteDestinationUUID", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceDeleteDestinationUUIDArgs{
		DeleteRequest: deleteRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvDeleteDestinationUUID() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deleteDestinationUUID" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteDestinationUUID failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteDestinationUUID failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error172 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error173 error
		error173, err = error172.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error173
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteDestinationUUID failed: invalid message type")
		return
	}
	result := MetadataServiceDeleteDestinationUUIDResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	return
}

// *** ConsumerGroup CRUD *******************
//
// Parameters:
//  - CreateRequest
func (p *MetadataServiceClient) CreateConsumerGroup(createRequest *shared.CreateConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error) {
	if err = p.sendCreateConsumerGroup(createRequest); err != nil {
		return
	}
	return p.recvCreateConsumerGroup()
}

func (p *MetadataServiceClient) sendCreateConsumerGroup(createRequest *shared.CreateConsumerGroupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createConsumerGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceCreateConsumerGroupArgs{
		CreateRequest: createRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvCreateConsumerGroup() (value *shared.ConsumerGroupDescription, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createConsumerGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createConsumerGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createConsumerGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error174 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error175 error
		error175, err = error174.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error175
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createConsumerGroup failed: invalid message type")
		return
	}
	result := MetadataServiceCreateConsumerGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityExistsError != nil {
		err = result.EntityExistsError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.EntityNotExistsError != nil {
		err = result.EntityNotExistsError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UpdateRequest
func (p *MetadataServiceClient) UpdateConsumerGroup(updateRequest *shared.UpdateConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error) {
	if err = p.sendUpdateConsumerGroup(updateRequest); err != nil {
		return
	}
	return p.recvUpdateConsumerGroup()
}

func (p *MetadataServiceClient) sendUpdateConsumerGroup(updateRequest *shared.UpdateConsumerGroupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateConsumerGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceUpdateConsumerGroupArgs{
		UpdateRequest: updateRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvUpdateConsumerGroup() (value *shared.ConsumerGroupDescription, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateConsumerGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateConsumerGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateConsumerGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error176 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error177 error
		error177, err = error176.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error177
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateConsumerGroup failed: invalid message type")
		return
	}
	result := MetadataServiceUpdateConsumerGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DeleteRequest
func (p *MetadataServiceClient) DeleteConsumerGroup(deleteRequest *shared.DeleteConsumerGroupRequest) (err error) {
	if err = p.sendDeleteConsumerGroup(deleteRequest); err != nil {
		return
	}
	return p.recvDeleteConsumerGroup()
}

func (p *MetadataServiceClient) sendDeleteConsumerGroup(deleteRequest *shared.DeleteConsumerGroupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteConsumerGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceDeleteConsumerGroupArgs{
		DeleteRequest: deleteRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvDeleteConsumerGroup() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deleteConsumerGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteConsumerGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteConsumerGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error178 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error179 error
		error179, err = error178.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error179
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteConsumerGroup failed: invalid message type")
		return
	}
	result := MetadataServiceDeleteConsumerGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	return
}

// *** Extent Management *******************
//
// Parameters:
//  - Request
func (p *MetadataServiceClient) CreateExtent(request *shared.CreateExtentRequest) (r *shared.CreateExtentResult_, err error) {
	if err = p.sendCreateExtent(request); err != nil {
		return
	}
	return p.recvCreateExtent()
}

func (p *MetadataServiceClient) sendCreateExtent(request *shared.CreateExtentRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createExtent", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceCreateExtentArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvCreateExtent() (value *shared.CreateExtentResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createExtent" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createExtent failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createExtent failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error180 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error181 error
		error181, err = error180.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error181
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createExtent failed: invalid message type")
		return
	}
	result := MetadataServiceCreateExtentResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.EntityExistsError != nil {
		err = result.EntityExistsError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) UpdateExtentStats(request *UpdateExtentStatsRequest) (r *UpdateExtentStatsResult_, err error) {
	if err = p.sendUpdateExtentStats(request); err != nil {
		return
	}
	return p.recvUpdateExtentStats()
}

func (p *MetadataServiceClient) sendUpdateExtentStats(request *UpdateExtentStatsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateExtentStats", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceUpdateExtentStatsArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvUpdateExtentStats() (value *UpdateExtentStatsResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateExtentStats" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateExtentStats failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateExtentStats failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error182 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error183 error
		error183, err = error182.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error183
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateExtentStats failed: invalid message type")
		return
	}
	result := MetadataServiceUpdateExtentStatsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.EntityNotExistsError != nil {
		err = result.EntityNotExistsError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) ReadStoreExtentReplicaStats(request *ReadStoreExtentReplicaStatsRequest) (r *ReadStoreExtentReplicaStatsResult_, err error) {
	if err = p.sendReadStoreExtentReplicaStats(request); err != nil {
		return
	}
	return p.recvReadStoreExtentReplicaStats()
}

func (p *MetadataServiceClient) sendReadStoreExtentReplicaStats(request *ReadStoreExtentReplicaStatsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("readStoreExtentReplicaStats", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceReadStoreExtentReplicaStatsArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvReadStoreExtentReplicaStats() (value *ReadStoreExtentReplicaStatsResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "readStoreExtentReplicaStats" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readStoreExtentReplicaStats failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readStoreExtentReplicaStats failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error184 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error185 error
		error185, err = error184.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error185
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readStoreExtentReplicaStats failed: invalid message type")
		return
	}
	result := MetadataServiceReadStoreExtentReplicaStatsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) SealExtent(request *SealExtentRequest) (err error) {
	if err = p.sendSealExtent(request); err != nil {
		return
	}
	return p.recvSealExtent()
}

func (p *MetadataServiceClient) sendSealExtent(request *SealExtentRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sealExtent", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceSealExtentArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvSealExtent() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sealExtent" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "sealExtent failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sealExtent failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error186 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error187 error
		error187, err = error186.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error187
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sealExtent failed: invalid message type")
		return
	}
	result := MetadataServiceSealExtentResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.IllegalStateError != nil {
		err = result.IllegalStateError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) UpdateExtentReplicaStats(request *UpdateExtentReplicaStatsRequest) (err error) {
	if err = p.sendUpdateExtentReplicaStats(request); err != nil {
		return
	}
	return p.recvUpdateExtentReplicaStats()
}

func (p *MetadataServiceClient) sendUpdateExtentReplicaStats(request *UpdateExtentReplicaStatsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateExtentReplicaStats", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceUpdateExtentReplicaStatsArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvUpdateExtentReplicaStats() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateExtentReplicaStats" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateExtentReplicaStats failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateExtentReplicaStats failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error188 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error189 error
		error189, err = error188.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error189
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateExtentReplicaStats failed: invalid message type")
		return
	}
	result := MetadataServiceUpdateExtentReplicaStatsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) UpdateStoreExtentReplicaStats(request *UpdateStoreExtentReplicaStatsRequest) (err error) {
	if err = p.sendUpdateStoreExtentReplicaStats(request); err != nil {
		return
	}
	return p.recvUpdateStoreExtentReplicaStats()
}

func (p *MetadataServiceClient) sendUpdateStoreExtentReplicaStats(request *UpdateStoreExtentReplicaStatsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateStoreExtentReplicaStats", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceUpdateStoreExtentReplicaStatsArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvUpdateStoreExtentReplicaStats() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateStoreExtentReplicaStats" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateStoreExtentReplicaStats failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateStoreExtentReplicaStats failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error190 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error191 error
		error191, err = error190.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error191
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateStoreExtentReplicaStats failed: invalid message type")
		return
	}
	result := MetadataServiceUpdateStoreExtentReplicaStatsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) MoveExtent(request *MoveExtentRequest) (err error) {
	if err = p.sendMoveExtent(request); err != nil {
		return
	}
	return p.recvMoveExtent()
}

func (p *MetadataServiceClient) sendMoveExtent(request *MoveExtentRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("moveExtent", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceMoveExtentArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvMoveExtent() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "moveExtent" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "moveExtent failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "moveExtent failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error192 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error193 error
		error193, err = error192.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error193
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "moveExtent failed: invalid message type")
		return
	}
	result := MetadataServiceMoveExtentResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.IllegalStateError != nil {
		err = result.IllegalStateError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	return
}

// *** Consumer Group Extent Management *******************
//
// Parameters:
//  - Request
func (p *MetadataServiceClient) SetAckOffset(request *SetAckOffsetRequest) (err error) {
	if err = p.sendSetAckOffset(request); err != nil {
		return
	}
	return p.recvSetAckOffset()
}

func (p *MetadataServiceClient) sendSetAckOffset(request *SetAckOffsetRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setAckOffset", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceSetAckOffsetArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvSetAckOffset() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "setAckOffset" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setAckOffset failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setAckOffset failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error194 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error195 error
		error195, err = error194.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error195
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setAckOffset failed: invalid message type")
		return
	}
	result := MetadataServiceSetAckOffsetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) UpdateConsumerGroupExtentStatus(request *UpdateConsumerGroupExtentStatusRequest) (err error) {
	if err = p.sendUpdateConsumerGroupExtentStatus(request); err != nil {
		return
	}
	return p.recvUpdateConsumerGroupExtentStatus()
}

func (p *MetadataServiceClient) sendUpdateConsumerGroupExtentStatus(request *UpdateConsumerGroupExtentStatusRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateConsumerGroupExtentStatus", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceUpdateConsumerGroupExtentStatusArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvUpdateConsumerGroupExtentStatus() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateConsumerGroupExtentStatus" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateConsumerGroupExtentStatus failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateConsumerGroupExtentStatus failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error196 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error197 error
		error197, err = error196.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error197
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateConsumerGroupExtentStatus failed: invalid message type")
		return
	}
	result := MetadataServiceUpdateConsumerGroupExtentStatusResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	} else if result.NotExistsError != nil {
		err = result.NotExistsError
		return
	}
	return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) CreateConsumerGroupExtent(request *CreateConsumerGroupExtentRequest) (err error) {
	if err = p.sendCreateConsumerGroupExtent(request); err != nil {
		return
	}
	return p.recvCreateConsumerGroupExtent()
}

func (p *MetadataServiceClient) sendCreateConsumerGroupExtent(request *CreateConsumerGroupExtentRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createConsumerGroupExtent", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceCreateConsumerGroupExtentArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvCreateConsumerGroupExtent() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createConsumerGroupExtent" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createConsumerGroupExtent failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createConsumerGroupExtent failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error198 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error199 error
		error199, err = error198.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error199
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createConsumerGroupExtent failed: invalid message type")
		return
	}
	result := MetadataServiceCreateConsumerGroupExtentResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) SetOutputHost(request *SetOutputHostRequest) (err error) {
	if err = p.sendSetOutputHost(request); err != nil {
		return
	}
	return p.recvSetOutputHost()
}

func (p *MetadataServiceClient) sendSetOutputHost(request *SetOutputHostRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setOutputHost", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceSetOutputHostArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvSetOutputHost() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "setOutputHost" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setOutputHost failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setOutputHost failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error200 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error201 error
		error201, err = error200.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error201
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setOutputHost failed: invalid message type")
		return
	}
	result := MetadataServiceSetOutputHostResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) RegisterHostUUID(request *RegisterHostUUIDRequest) (err error) {
	if err = p.sendRegisterHostUUID(request); err != nil {
		return
	}
	return p.recvRegisterHostUUID()
}

func (p *MetadataServiceClient) sendRegisterHostUUID(request *RegisterHostUUIDRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("registerHostUUID", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceRegisterHostUUIDArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvRegisterHostUUID() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "registerHostUUID" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "registerHostUUID failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerHostUUID failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error202 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error203 error
		error203, err = error202.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error203
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "registerHostUUID failed: invalid message type")
		return
	}
	result := MetadataServiceRegisterHostUUIDResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error != nil {
		err = result.Error
		return
	}
	return
}

// ** Hardware Info and Config Management ***
//
// Parameters:
//  - Request
func (p *MetadataServiceClient) CreateHostInfo(request *CreateHostInfoRequest) (err error) {
	if err = p.sendCreateHostInfo(request); err != nil {
		return
	}
	return p.recvCreateHostInfo()
}

func (p *MetadataServiceClient) sendCreateHostInfo(request *CreateHostInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createHostInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceCreateHostInfoArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvCreateHostInfo() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createHostInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createHostInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createHostInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error204 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error205 error
		error205, err = error204.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error205
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createHostInfo failed: invalid message type")
		return
	}
	result := MetadataServiceCreateHostInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error != nil {
		err = result.Error
		return
	}
	return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) UpdateHostInfo(request *UpdateHostInfoRequest) (err error) {
	if err = p.sendUpdateHostInfo(request); err != nil {
		return
	}
	return p.recvUpdateHostInfo()
}

func (p *MetadataServiceClient) sendUpdateHostInfo(request *UpdateHostInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateHostInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceUpdateHostInfoArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvUpdateHostInfo() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateHostInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateHostInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateHostInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error206 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error207 error
		error207, err = error206.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error207
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateHostInfo failed: invalid message type")
		return
	}
	result := MetadataServiceUpdateHostInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error != nil {
		err = result.Error
		return
	}
	return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) DeleteHostInfo(request *DeleteHostInfoRequest) (err error) {
	if err = p.sendDeleteHostInfo(request); err != nil {
		return
	}
	return p.recvDeleteHostInfo()
}

func (p *MetadataServiceClient) sendDeleteHostInfo(request *DeleteHostInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteHostInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceDeleteHostInfoArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvDeleteHostInfo() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deleteHostInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteHostInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteHostInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error208 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error209 error
		error209, err = error208.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error209
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteHostInfo failed: invalid message type")
		return
	}
	result := MetadataServiceDeleteHostInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error != nil {
		err = result.Error
		return
	}
	return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) ReadHostInfo(request *ReadHostInfoRequest) (r *ReadHostInfoResult_, err error) {
	if err = p.sendReadHostInfo(request); err != nil {
		return
	}
	return p.recvReadHostInfo()
}

func (p *MetadataServiceClient) sendReadHostInfo(request *ReadHostInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("readHostInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceReadHostInfoArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvReadHostInfo() (value *ReadHostInfoResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "readHostInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readHostInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readHostInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error210 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error211 error
		error211, err = error210.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error211
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readHostInfo failed: invalid message type")
		return
	}
	result := MetadataServiceReadHostInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error != nil {
		err = result.Error
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) CreateServiceConfig(request *CreateServiceConfigRequest) (err error) {
	if err = p.sendCreateServiceConfig(request); err != nil {
		return
	}
	return p.recvCreateServiceConfig()
}

func (p *MetadataServiceClient) sendCreateServiceConfig(request *CreateServiceConfigRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createServiceConfig", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceCreateServiceConfigArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvCreateServiceConfig() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createServiceConfig" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createServiceConfig failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createServiceConfig failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error212 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error213 error
		error213, err = error212.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error213
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createServiceConfig failed: invalid message type")
		return
	}
	result := MetadataServiceCreateServiceConfigResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error != nil {
		err = result.Error
		return
	}
	return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) DeleteServiceConfig(request *DeleteServiceConfigRequest) (err error) {
	if err = p.sendDeleteServiceConfig(request); err != nil {
		return
	}
	return p.recvDeleteServiceConfig()
}

func (p *MetadataServiceClient) sendDeleteServiceConfig(request *DeleteServiceConfigRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteServiceConfig", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceDeleteServiceConfigArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvDeleteServiceConfig() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deleteServiceConfig" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteServiceConfig failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteServiceConfig failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error214 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error215 error
		error215, err = error214.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error215
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteServiceConfig failed: invalid message type")
		return
	}
	result := MetadataServiceDeleteServiceConfigResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error != nil {
		err = result.Error
		return
	}
	return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) ReadServiceConfig(request *ReadServiceConfigRequest) (r *ReadServiceConfigResult_, err error) {
	if err = p.sendReadServiceConfig(request); err != nil {
		return
	}
	return p.recvReadServiceConfig()
}

func (p *MetadataServiceClient) sendReadServiceConfig(request *ReadServiceConfigRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("readServiceConfig", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataServiceReadServiceConfigArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataServiceClient) recvReadServiceConfig() (value *ReadServiceConfigResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "readServiceConfig" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readServiceConfig failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readServiceConfig failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error216 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error217 error
		error217, err = error216.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error217
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readServiceConfig failed: invalid message type")
		return
	}
	result := MetadataServiceReadServiceConfigResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error != nil {
		err = result.Error
		return
	}
	value = result.GetSuccess()
	return
}

type MetadataServiceProcessor struct {
	*MetadataExposableProcessor
}

func NewMetadataServiceProcessor(handler MetadataService) *MetadataServiceProcessor {
	self218 := &MetadataServiceProcessor{NewMetadataExposableProcessor(handler)}
	self218.AddToProcessorMap("createDestination", &metadataServiceProcessorCreateDestination{handler: handler})
	self218.AddToProcessorMap("createDestinationUUID", &metadataServiceProcessorCreateDestinationUUID{handler: handler})
	self218.AddToProcessorMap("updateDestination", &metadataServiceProcessorUpdateDestination{handler: handler})
	self218.AddToProcessorMap("updateDestinationDLQCursors", &metadataServiceProcessorUpdateDestinationDLQCursors{handler: handler})
	self218.AddToProcessorMap("deleteDestination", &metadataServiceProcessorDeleteDestination{handler: handler})
	self218.AddToProcessorMap("deleteDestinationUUID", &metadataServiceProcessorDeleteDestinationUUID{handler: handler})
	self218.AddToProcessorMap("createConsumerGroup", &metadataServiceProcessorCreateConsumerGroup{handler: handler})
	self218.AddToProcessorMap("updateConsumerGroup", &metadataServiceProcessorUpdateConsumerGroup{handler: handler})
	self218.AddToProcessorMap("deleteConsumerGroup", &metadataServiceProcessorDeleteConsumerGroup{handler: handler})
	self218.AddToProcessorMap("createExtent", &metadataServiceProcessorCreateExtent{handler: handler})
	self218.AddToProcessorMap("updateExtentStats", &metadataServiceProcessorUpdateExtentStats{handler: handler})
	self218.AddToProcessorMap("readStoreExtentReplicaStats", &metadataServiceProcessorReadStoreExtentReplicaStats{handler: handler})
	self218.AddToProcessorMap("sealExtent", &metadataServiceProcessorSealExtent{handler: handler})
	self218.AddToProcessorMap("updateExtentReplicaStats", &metadataServiceProcessorUpdateExtentReplicaStats{handler: handler})
	self218.AddToProcessorMap("updateStoreExtentReplicaStats", &metadataServiceProcessorUpdateStoreExtentReplicaStats{handler: handler})
	self218.AddToProcessorMap("moveExtent", &metadataServiceProcessorMoveExtent{handler: handler})
	self218.AddToProcessorMap("setAckOffset", &metadataServiceProcessorSetAckOffset{handler: handler})
	self218.AddToProcessorMap("updateConsumerGroupExtentStatus", &metadataServiceProcessorUpdateConsumerGroupExtentStatus{handler: handler})
	self218.AddToProcessorMap("createConsumerGroupExtent", &metadataServiceProcessorCreateConsumerGroupExtent{handler: handler})
	self218.AddToProcessorMap("setOutputHost", &metadataServiceProcessorSetOutputHost{handler: handler})
	self218.AddToProcessorMap("registerHostUUID", &metadataServiceProcessorRegisterHostUUID{handler: handler})
	self218.AddToProcessorMap("createHostInfo", &metadataServiceProcessorCreateHostInfo{handler: handler})
	self218.AddToProcessorMap("updateHostInfo", &metadataServiceProcessorUpdateHostInfo{handler: handler})
	self218.AddToProcessorMap("deleteHostInfo", &metadataServiceProcessorDeleteHostInfo{handler: handler})
	self218.AddToProcessorMap("readHostInfo", &metadataServiceProcessorReadHostInfo{handler: handler})
	self218.AddToProcessorMap("createServiceConfig", &metadataServiceProcessorCreateServiceConfig{handler: handler})
	self218.AddToProcessorMap("deleteServiceConfig", &metadataServiceProcessorDeleteServiceConfig{handler: handler})
	self218.AddToProcessorMap("readServiceConfig", &metadataServiceProcessorReadServiceConfig{handler: handler})
	return self218
}

type metadataServiceProcessorCreateDestination struct {
	handler MetadataService
}

func (p *metadataServiceProcessorCreateDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceCreateDestinationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createDestination", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceCreateDestinationResult{}
	var retval *shared.DestinationDescription
	var err2 error
	if retval, err2 = p.handler.CreateDestination(args.CreateRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.EntityAlreadyExistsError:
			result.EntityExistsError = v
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createDestination: "+err2.Error())
			oprot.WriteMessageBegin("createDestination", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createDestination", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorCreateDestinationUUID struct {
	handler MetadataService
}

func (p *metadataServiceProcessorCreateDestinationUUID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceCreateDestinationUUIDArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createDestinationUUID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceCreateDestinationUUIDResult{}
	var retval *shared.DestinationDescription
	var err2 error
	if retval, err2 = p.handler.CreateDestinationUUID(args.CreateRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.EntityAlreadyExistsError:
			result.EntityExistsError = v
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createDestinationUUID: "+err2.Error())
			oprot.WriteMessageBegin("createDestinationUUID", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createDestinationUUID", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorUpdateDestination struct {
	handler MetadataService
}

func (p *metadataServiceProcessorUpdateDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceUpdateDestinationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateDestination", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceUpdateDestinationResult{}
	var retval *shared.DestinationDescription
	var err2 error
	if retval, err2 = p.handler.UpdateDestination(args.UpdateRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.EntityNotExistsError:
			result.EntityError = v
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateDestination: "+err2.Error())
			oprot.WriteMessageBegin("updateDestination", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updateDestination", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorUpdateDestinationDLQCursors struct {
	handler MetadataService
}

func (p *metadataServiceProcessorUpdateDestinationDLQCursors) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceUpdateDestinationDLQCursorsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateDestinationDLQCursors", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceUpdateDestinationDLQCursorsResult{}
	var retval *shared.DestinationDescription
	var err2 error
	if retval, err2 = p.handler.UpdateDestinationDLQCursors(args.UpdateRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.EntityNotExistsError:
			result.EntityError = v
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateDestinationDLQCursors: "+err2.Error())
			oprot.WriteMessageBegin("updateDestinationDLQCursors", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updateDestinationDLQCursors", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorDeleteDestination struct {
	handler MetadataService
}

func (p *metadataServiceProcessorDeleteDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceDeleteDestinationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteDestination", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceDeleteDestinationResult{}
	var err2 error
	if err2 = p.handler.DeleteDestination(args.DeleteRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.EntityNotExistsError:
			result.EntityError = v
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteDestination: "+err2.Error())
			oprot.WriteMessageBegin("deleteDestination", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteDestination", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorDeleteDestinationUUID struct {
	handler MetadataService
}

func (p *metadataServiceProcessorDeleteDestinationUUID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceDeleteDestinationUUIDArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteDestinationUUID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceDeleteDestinationUUIDResult{}
	var err2 error
	if err2 = p.handler.DeleteDestinationUUID(args.DeleteRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.EntityNotExistsError:
			result.EntityError = v
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteDestinationUUID: "+err2.Error())
			oprot.WriteMessageBegin("deleteDestinationUUID", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteDestinationUUID", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorCreateConsumerGroup struct {
	handler MetadataService
}

func (p *metadataServiceProcessorCreateConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceCreateConsumerGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createConsumerGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceCreateConsumerGroupResult{}
	var retval *shared.ConsumerGroupDescription
	var err2 error
	if retval, err2 = p.handler.CreateConsumerGroup(args.CreateRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.EntityAlreadyExistsError:
			result.EntityExistsError = v
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.EntityNotExistsError:
			result.EntityNotExistsError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createConsumerGroup: "+err2.Error())
			oprot.WriteMessageBegin("createConsumerGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createConsumerGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorUpdateConsumerGroup struct {
	handler MetadataService
}

func (p *metadataServiceProcessorUpdateConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceUpdateConsumerGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateConsumerGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceUpdateConsumerGroupResult{}
	var retval *shared.ConsumerGroupDescription
	var err2 error
	if retval, err2 = p.handler.UpdateConsumerGroup(args.UpdateRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.EntityNotExistsError:
			result.EntityError = v
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateConsumerGroup: "+err2.Error())
			oprot.WriteMessageBegin("updateConsumerGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updateConsumerGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorDeleteConsumerGroup struct {
	handler MetadataService
}

func (p *metadataServiceProcessorDeleteConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceDeleteConsumerGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteConsumerGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceDeleteConsumerGroupResult{}
	var err2 error
	if err2 = p.handler.DeleteConsumerGroup(args.DeleteRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.EntityNotExistsError:
			result.EntityError = v
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteConsumerGroup: "+err2.Error())
			oprot.WriteMessageBegin("deleteConsumerGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteConsumerGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorCreateExtent struct {
	handler MetadataService
}

func (p *metadataServiceProcessorCreateExtent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceCreateExtentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createExtent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceCreateExtentResult{}
	var retval *shared.CreateExtentResult_
	var err2 error
	if retval, err2 = p.handler.CreateExtent(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.EntityAlreadyExistsError:
			result.EntityExistsError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createExtent: "+err2.Error())
			oprot.WriteMessageBegin("createExtent", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createExtent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorUpdateExtentStats struct {
	handler MetadataService
}

func (p *metadataServiceProcessorUpdateExtentStats) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceUpdateExtentStatsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateExtentStats", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceUpdateExtentStatsResult{}
	var retval *UpdateExtentStatsResult_
	var err2 error
	if retval, err2 = p.handler.UpdateExtentStats(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.EntityNotExistsError:
			result.EntityNotExistsError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateExtentStats: "+err2.Error())
			oprot.WriteMessageBegin("updateExtentStats", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updateExtentStats", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorReadStoreExtentReplicaStats struct {
	handler MetadataService
}

func (p *metadataServiceProcessorReadStoreExtentReplicaStats) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceReadStoreExtentReplicaStatsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("readStoreExtentReplicaStats", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceReadStoreExtentReplicaStatsResult{}
	var retval *ReadStoreExtentReplicaStatsResult_
	var err2 error
	if retval, err2 = p.handler.ReadStoreExtentReplicaStats(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readStoreExtentReplicaStats: "+err2.Error())
			oprot.WriteMessageBegin("readStoreExtentReplicaStats", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("readStoreExtentReplicaStats", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorSealExtent struct {
	handler MetadataService
}

func (p *metadataServiceProcessorSealExtent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceSealExtentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sealExtent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceSealExtentResult{}
	var err2 error
	if err2 = p.handler.SealExtent(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *IllegalStateError:
			result.IllegalStateError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sealExtent: "+err2.Error())
			oprot.WriteMessageBegin("sealExtent", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("sealExtent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorUpdateExtentReplicaStats struct {
	handler MetadataService
}

func (p *metadataServiceProcessorUpdateExtentReplicaStats) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceUpdateExtentReplicaStatsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateExtentReplicaStats", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceUpdateExtentReplicaStatsResult{}
	var err2 error
	if err2 = p.handler.UpdateExtentReplicaStats(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateExtentReplicaStats: "+err2.Error())
			oprot.WriteMessageBegin("updateExtentReplicaStats", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateExtentReplicaStats", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorUpdateStoreExtentReplicaStats struct {
	handler MetadataService
}

func (p *metadataServiceProcessorUpdateStoreExtentReplicaStats) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceUpdateStoreExtentReplicaStatsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateStoreExtentReplicaStats", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceUpdateStoreExtentReplicaStatsResult{}
	var err2 error
	if err2 = p.handler.UpdateStoreExtentReplicaStats(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateStoreExtentReplicaStats: "+err2.Error())
			oprot.WriteMessageBegin("updateStoreExtentReplicaStats", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateStoreExtentReplicaStats", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorMoveExtent struct {
	handler MetadataService
}

func (p *metadataServiceProcessorMoveExtent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceMoveExtentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("moveExtent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceMoveExtentResult{}
	var err2 error
	if err2 = p.handler.MoveExtent(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *IllegalStateError:
			result.IllegalStateError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing moveExtent: "+err2.Error())
			oprot.WriteMessageBegin("moveExtent", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("moveExtent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorSetAckOffset struct {
	handler MetadataService
}

func (p *metadataServiceProcessorSetAckOffset) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceSetAckOffsetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setAckOffset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceSetAckOffsetResult{}
	var err2 error
	if err2 = p.handler.SetAckOffset(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setAckOffset: "+err2.Error())
			oprot.WriteMessageBegin("setAckOffset", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("setAckOffset", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorUpdateConsumerGroupExtentStatus struct {
	handler MetadataService
}

func (p *metadataServiceProcessorUpdateConsumerGroupExtentStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceUpdateConsumerGroupExtentStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateConsumerGroupExtentStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceUpdateConsumerGroupExtentStatusResult{}
	var err2 error
	if err2 = p.handler.UpdateConsumerGroupExtentStatus(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		case *shared.EntityNotExistsError:
			result.NotExistsError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateConsumerGroupExtentStatus: "+err2.Error())
			oprot.WriteMessageBegin("updateConsumerGroupExtentStatus", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateConsumerGroupExtentStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorCreateConsumerGroupExtent struct {
	handler MetadataService
}

func (p *metadataServiceProcessorCreateConsumerGroupExtent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceCreateConsumerGroupExtentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createConsumerGroupExtent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceCreateConsumerGroupExtentResult{}
	var err2 error
	if err2 = p.handler.CreateConsumerGroupExtent(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createConsumerGroupExtent: "+err2.Error())
			oprot.WriteMessageBegin("createConsumerGroupExtent", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("createConsumerGroupExtent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorSetOutputHost struct {
	handler MetadataService
}

func (p *metadataServiceProcessorSetOutputHost) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceSetOutputHostArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setOutputHost", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceSetOutputHostResult{}
	var err2 error
	if err2 = p.handler.SetOutputHost(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setOutputHost: "+err2.Error())
			oprot.WriteMessageBegin("setOutputHost", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("setOutputHost", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorRegisterHostUUID struct {
	handler MetadataService
}

func (p *metadataServiceProcessorRegisterHostUUID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceRegisterHostUUIDArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("registerHostUUID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceRegisterHostUUIDResult{}
	var err2 error
	if err2 = p.handler.RegisterHostUUID(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.InternalServiceError:
			result.Error = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerHostUUID: "+err2.Error())
			oprot.WriteMessageBegin("registerHostUUID", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("registerHostUUID", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorCreateHostInfo struct {
	handler MetadataService
}

func (p *metadataServiceProcessorCreateHostInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceCreateHostInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createHostInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceCreateHostInfoResult{}
	var err2 error
	if err2 = p.handler.CreateHostInfo(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.InternalServiceError:
			result.Error = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createHostInfo: "+err2.Error())
			oprot.WriteMessageBegin("createHostInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("createHostInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorUpdateHostInfo struct {
	handler MetadataService
}

func (p *metadataServiceProcessorUpdateHostInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceUpdateHostInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateHostInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceUpdateHostInfoResult{}
	var err2 error
	if err2 = p.handler.UpdateHostInfo(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.InternalServiceError:
			result.Error = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateHostInfo: "+err2.Error())
			oprot.WriteMessageBegin("updateHostInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateHostInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorDeleteHostInfo struct {
	handler MetadataService
}

func (p *metadataServiceProcessorDeleteHostInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceDeleteHostInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteHostInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceDeleteHostInfoResult{}
	var err2 error
	if err2 = p.handler.DeleteHostInfo(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.InternalServiceError:
			result.Error = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteHostInfo: "+err2.Error())
			oprot.WriteMessageBegin("deleteHostInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteHostInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorReadHostInfo struct {
	handler MetadataService
}

func (p *metadataServiceProcessorReadHostInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceReadHostInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("readHostInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceReadHostInfoResult{}
	var retval *ReadHostInfoResult_
	var err2 error
	if retval, err2 = p.handler.ReadHostInfo(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.InternalServiceError:
			result.Error = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readHostInfo: "+err2.Error())
			oprot.WriteMessageBegin("readHostInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("readHostInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorCreateServiceConfig struct {
	handler MetadataService
}

func (p *metadataServiceProcessorCreateServiceConfig) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceCreateServiceConfigArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createServiceConfig", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceCreateServiceConfigResult{}
	var err2 error
	if err2 = p.handler.CreateServiceConfig(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.InternalServiceError:
			result.Error = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createServiceConfig: "+err2.Error())
			oprot.WriteMessageBegin("createServiceConfig", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("createServiceConfig", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorDeleteServiceConfig struct {
	handler MetadataService
}

func (p *metadataServiceProcessorDeleteServiceConfig) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceDeleteServiceConfigArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteServiceConfig", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceDeleteServiceConfigResult{}
	var err2 error
	if err2 = p.handler.DeleteServiceConfig(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.InternalServiceError:
			result.Error = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteServiceConfig: "+err2.Error())
			oprot.WriteMessageBegin("deleteServiceConfig", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteServiceConfig", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataServiceProcessorReadServiceConfig struct {
	handler MetadataService
}

func (p *metadataServiceProcessorReadServiceConfig) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataServiceReadServiceConfigArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("readServiceConfig", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataServiceReadServiceConfigResult{}
	var retval *ReadServiceConfigResult_
	var err2 error
	if retval, err2 = p.handler.ReadServiceConfig(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.InternalServiceError:
			result.Error = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readServiceConfig: "+err2.Error())
			oprot.WriteMessageBegin("readServiceConfig", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("readServiceConfig", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - CreateRequest
type MetadataServiceCreateDestinationArgs struct {
	CreateRequest *shared.CreateDestinationRequest `thrift:"createRequest,1" json:"createRequest"`
}

func NewMetadataServiceCreateDestinationArgs() *MetadataServiceCreateDestinationArgs {
	return &MetadataServiceCreateDestinationArgs{}
}

var MetadataServiceCreateDestinationArgs_CreateRequest_DEFAULT *shared.CreateDestinationRequest

func (p *MetadataServiceCreateDestinationArgs) GetCreateRequest() *shared.CreateDestinationRequest {
	if !p.IsSetCreateRequest() {
		return MetadataServiceCreateDestinationArgs_CreateRequest_DEFAULT
	}
	return p.CreateRequest
}
func (p *MetadataServiceCreateDestinationArgs) IsSetCreateRequest() bool {
	return p.CreateRequest != nil
}

func (p *MetadataServiceCreateDestinationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceCreateDestinationArgs) readField1(iprot thrift.TProtocol) error {
	p.CreateRequest = &shared.CreateDestinationRequest{}
	if err := p.CreateRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateRequest), err)
	}
	return nil
}

func (p *MetadataServiceCreateDestinationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createDestination_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceCreateDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:createRequest: ", p), err)
	}
	if err := p.CreateRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:createRequest: ", p), err)
	}
	return err
}

func (p *MetadataServiceCreateDestinationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceCreateDestinationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityExistsError
//  - RequestError
//  - InternalServiceError
type MetadataServiceCreateDestinationResult struct {
	Success              *shared.DestinationDescription   `thrift:"success,0" json:"success,omitempty"`
	EntityExistsError    *shared.EntityAlreadyExistsError `thrift:"entityExistsError,1" json:"entityExistsError,omitempty"`
	RequestError         *shared.BadRequestError          `thrift:"requestError,2" json:"requestError,omitempty"`
	InternalServiceError *shared.InternalServiceError     `thrift:"internalServiceError,3" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceCreateDestinationResult() *MetadataServiceCreateDestinationResult {
	return &MetadataServiceCreateDestinationResult{}
}

var MetadataServiceCreateDestinationResult_Success_DEFAULT *shared.DestinationDescription

func (p *MetadataServiceCreateDestinationResult) GetSuccess() *shared.DestinationDescription {
	if !p.IsSetSuccess() {
		return MetadataServiceCreateDestinationResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataServiceCreateDestinationResult_EntityExistsError_DEFAULT *shared.EntityAlreadyExistsError

func (p *MetadataServiceCreateDestinationResult) GetEntityExistsError() *shared.EntityAlreadyExistsError {
	if !p.IsSetEntityExistsError() {
		return MetadataServiceCreateDestinationResult_EntityExistsError_DEFAULT
	}
	return p.EntityExistsError
}

var MetadataServiceCreateDestinationResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataServiceCreateDestinationResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataServiceCreateDestinationResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataServiceCreateDestinationResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceCreateDestinationResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataServiceCreateDestinationResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataServiceCreateDestinationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataServiceCreateDestinationResult) IsSetEntityExistsError() bool {
	return p.EntityExistsError != nil
}

func (p *MetadataServiceCreateDestinationResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataServiceCreateDestinationResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataServiceCreateDestinationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceCreateDestinationResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &shared.DestinationDescription{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataServiceCreateDestinationResult) readField1(iprot thrift.TProtocol) error {
	p.EntityExistsError = &shared.EntityAlreadyExistsError{}
	if err := p.EntityExistsError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
	}
	return nil
}

func (p *MetadataServiceCreateDestinationResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataServiceCreateDestinationResult) readField3(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataServiceCreateDestinationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createDestination_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceCreateDestinationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceCreateDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityExistsError() {
		if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityExistsError: ", p), err)
		}
		if err := p.EntityExistsError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityExistsError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceCreateDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceCreateDestinationResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceCreateDestinationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceCreateDestinationResult(%+v)", *p)
}

// Attributes:
//  - CreateRequest
type MetadataServiceCreateDestinationUUIDArgs struct {
	CreateRequest *shared.CreateDestinationUUIDRequest `thrift:"createRequest,1" json:"createRequest"`
}

func NewMetadataServiceCreateDestinationUUIDArgs() *MetadataServiceCreateDestinationUUIDArgs {
	return &MetadataServiceCreateDestinationUUIDArgs{}
}

var MetadataServiceCreateDestinationUUIDArgs_CreateRequest_DEFAULT *shared.CreateDestinationUUIDRequest

func (p *MetadataServiceCreateDestinationUUIDArgs) GetCreateRequest() *shared.CreateDestinationUUIDRequest {
	if !p.IsSetCreateRequest() {
		return MetadataServiceCreateDestinationUUIDArgs_CreateRequest_DEFAULT
	}
	return p.CreateRequest
}
func (p *MetadataServiceCreateDestinationUUIDArgs) IsSetCreateRequest() bool {
	return p.CreateRequest != nil
}

func (p *MetadataServiceCreateDestinationUUIDArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceCreateDestinationUUIDArgs) readField1(iprot thrift.TProtocol) error {
	p.CreateRequest = &shared.CreateDestinationUUIDRequest{}
	if err := p.CreateRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateRequest), err)
	}
	return nil
}

func (p *MetadataServiceCreateDestinationUUIDArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createDestinationUUID_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceCreateDestinationUUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:createRequest: ", p), err)
	}
	if err := p.CreateRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:createRequest: ", p), err)
	}
	return err
}

func (p *MetadataServiceCreateDestinationUUIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceCreateDestinationUUIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityExistsError
//  - RequestError
//  - InternalServiceError
type MetadataServiceCreateDestinationUUIDResult struct {
	Success              *shared.DestinationDescription   `thrift:"success,0" json:"success,omitempty"`
	EntityExistsError    *shared.EntityAlreadyExistsError `thrift:"entityExistsError,1" json:"entityExistsError,omitempty"`
	RequestError         *shared.BadRequestError          `thrift:"requestError,2" json:"requestError,omitempty"`
	InternalServiceError *shared.InternalServiceError     `thrift:"internalServiceError,3" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceCreateDestinationUUIDResult() *MetadataServiceCreateDestinationUUIDResult {
	return &MetadataServiceCreateDestinationUUIDResult{}
}

var MetadataServiceCreateDestinationUUIDResult_Success_DEFAULT *shared.DestinationDescription

func (p *MetadataServiceCreateDestinationUUIDResult) GetSuccess() *shared.DestinationDescription {
	if !p.IsSetSuccess() {
		return MetadataServiceCreateDestinationUUIDResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataServiceCreateDestinationUUIDResult_EntityExistsError_DEFAULT *shared.EntityAlreadyExistsError

func (p *MetadataServiceCreateDestinationUUIDResult) GetEntityExistsError() *shared.EntityAlreadyExistsError {
	if !p.IsSetEntityExistsError() {
		return MetadataServiceCreateDestinationUUIDResult_EntityExistsError_DEFAULT
	}
	return p.EntityExistsError
}

var MetadataServiceCreateDestinationUUIDResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataServiceCreateDestinationUUIDResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataServiceCreateDestinationUUIDResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataServiceCreateDestinationUUIDResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceCreateDestinationUUIDResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataServiceCreateDestinationUUIDResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataServiceCreateDestinationUUIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataServiceCreateDestinationUUIDResult) IsSetEntityExistsError() bool {
	return p.EntityExistsError != nil
}

func (p *MetadataServiceCreateDestinationUUIDResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataServiceCreateDestinationUUIDResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataServiceCreateDestinationUUIDResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceCreateDestinationUUIDResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &shared.DestinationDescription{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataServiceCreateDestinationUUIDResult) readField1(iprot thrift.TProtocol) error {
	p.EntityExistsError = &shared.EntityAlreadyExistsError{}
	if err := p.EntityExistsError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
	}
	return nil
}

func (p *MetadataServiceCreateDestinationUUIDResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataServiceCreateDestinationUUIDResult) readField3(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataServiceCreateDestinationUUIDResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createDestinationUUID_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceCreateDestinationUUIDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceCreateDestinationUUIDResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityExistsError() {
		if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityExistsError: ", p), err)
		}
		if err := p.EntityExistsError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityExistsError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceCreateDestinationUUIDResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceCreateDestinationUUIDResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceCreateDestinationUUIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceCreateDestinationUUIDResult(%+v)", *p)
}

// Attributes:
//  - UpdateRequest
type MetadataServiceUpdateDestinationArgs struct {
	UpdateRequest *shared.UpdateDestinationRequest `thrift:"updateRequest,1" json:"updateRequest"`
}

func NewMetadataServiceUpdateDestinationArgs() *MetadataServiceUpdateDestinationArgs {
	return &MetadataServiceUpdateDestinationArgs{}
}

var MetadataServiceUpdateDestinationArgs_UpdateRequest_DEFAULT *shared.UpdateDestinationRequest

func (p *MetadataServiceUpdateDestinationArgs) GetUpdateRequest() *shared.UpdateDestinationRequest {
	if !p.IsSetUpdateRequest() {
		return MetadataServiceUpdateDestinationArgs_UpdateRequest_DEFAULT
	}
	return p.UpdateRequest
}
func (p *MetadataServiceUpdateDestinationArgs) IsSetUpdateRequest() bool {
	return p.UpdateRequest != nil
}

func (p *MetadataServiceUpdateDestinationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceUpdateDestinationArgs) readField1(iprot thrift.TProtocol) error {
	p.UpdateRequest = &shared.UpdateDestinationRequest{}
	if err := p.UpdateRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdateRequest), err)
	}
	return nil
}

func (p *MetadataServiceUpdateDestinationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateDestination_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceUpdateDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateRequest: ", p), err)
	}
	if err := p.UpdateRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdateRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateRequest: ", p), err)
	}
	return err
}

func (p *MetadataServiceUpdateDestinationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceUpdateDestinationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
//  - InternalServiceError
type MetadataServiceUpdateDestinationResult struct {
	Success              *shared.DestinationDescription `thrift:"success,0" json:"success,omitempty"`
	EntityError          *shared.EntityNotExistsError   `thrift:"entityError,1" json:"entityError,omitempty"`
	RequestError         *shared.BadRequestError        `thrift:"requestError,2" json:"requestError,omitempty"`
	InternalServiceError *shared.InternalServiceError   `thrift:"internalServiceError,3" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceUpdateDestinationResult() *MetadataServiceUpdateDestinationResult {
	return &MetadataServiceUpdateDestinationResult{}
}

var MetadataServiceUpdateDestinationResult_Success_DEFAULT *shared.DestinationDescription

func (p *MetadataServiceUpdateDestinationResult) GetSuccess() *shared.DestinationDescription {
	if !p.IsSetSuccess() {
		return MetadataServiceUpdateDestinationResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataServiceUpdateDestinationResult_EntityError_DEFAULT *shared.EntityNotExistsError

func (p *MetadataServiceUpdateDestinationResult) GetEntityError() *shared.EntityNotExistsError {
	if !p.IsSetEntityError() {
		return MetadataServiceUpdateDestinationResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var MetadataServiceUpdateDestinationResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataServiceUpdateDestinationResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataServiceUpdateDestinationResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataServiceUpdateDestinationResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceUpdateDestinationResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataServiceUpdateDestinationResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataServiceUpdateDestinationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataServiceUpdateDestinationResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *MetadataServiceUpdateDestinationResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataServiceUpdateDestinationResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataServiceUpdateDestinationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceUpdateDestinationResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &shared.DestinationDescription{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataServiceUpdateDestinationResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &shared.EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *MetadataServiceUpdateDestinationResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataServiceUpdateDestinationResult) readField3(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataServiceUpdateDestinationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateDestination_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceUpdateDestinationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateDestinationResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateDestinationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceUpdateDestinationResult(%+v)", *p)
}

// Attributes:
//  - UpdateRequest
type MetadataServiceUpdateDestinationDLQCursorsArgs struct {
	UpdateRequest *UpdateDestinationDLQCursorsRequest `thrift:"updateRequest,1" json:"updateRequest"`
}

func NewMetadataServiceUpdateDestinationDLQCursorsArgs() *MetadataServiceUpdateDestinationDLQCursorsArgs {
	return &MetadataServiceUpdateDestinationDLQCursorsArgs{}
}

var MetadataServiceUpdateDestinationDLQCursorsArgs_UpdateRequest_DEFAULT *UpdateDestinationDLQCursorsRequest

func (p *MetadataServiceUpdateDestinationDLQCursorsArgs) GetUpdateRequest() *UpdateDestinationDLQCursorsRequest {
	if !p.IsSetUpdateRequest() {
		return MetadataServiceUpdateDestinationDLQCursorsArgs_UpdateRequest_DEFAULT
	}
	return p.UpdateRequest
}
func (p *MetadataServiceUpdateDestinationDLQCursorsArgs) IsSetUpdateRequest() bool {
	return p.UpdateRequest != nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsArgs) readField1(iprot thrift.TProtocol) error {
	p.UpdateRequest = &UpdateDestinationDLQCursorsRequest{}
	if err := p.UpdateRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdateRequest), err)
	}
	return nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateDestinationDLQCursors_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateRequest: ", p), err)
	}
	if err := p.UpdateRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdateRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateRequest: ", p), err)
	}
	return err
}

func (p *MetadataServiceUpdateDestinationDLQCursorsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceUpdateDestinationDLQCursorsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
//  - InternalServiceError
type MetadataServiceUpdateDestinationDLQCursorsResult struct {
	Success              *shared.DestinationDescription `thrift:"success,0" json:"success,omitempty"`
	EntityError          *shared.EntityNotExistsError   `thrift:"entityError,1" json:"entityError,omitempty"`
	RequestError         *shared.BadRequestError        `thrift:"requestError,2" json:"requestError,omitempty"`
	InternalServiceError *shared.InternalServiceError   `thrift:"internalServiceError,3" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceUpdateDestinationDLQCursorsResult() *MetadataServiceUpdateDestinationDLQCursorsResult {
	return &MetadataServiceUpdateDestinationDLQCursorsResult{}
}

var MetadataServiceUpdateDestinationDLQCursorsResult_Success_DEFAULT *shared.DestinationDescription

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) GetSuccess() *shared.DestinationDescription {
	if !p.IsSetSuccess() {
		return MetadataServiceUpdateDestinationDLQCursorsResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataServiceUpdateDestinationDLQCursorsResult_EntityError_DEFAULT *shared.EntityNotExistsError

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) GetEntityError() *shared.EntityNotExistsError {
	if !p.IsSetEntityError() {
		return MetadataServiceUpdateDestinationDLQCursorsResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var MetadataServiceUpdateDestinationDLQCursorsResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataServiceUpdateDestinationDLQCursorsResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataServiceUpdateDestinationDLQCursorsResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataServiceUpdateDestinationDLQCursorsResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataServiceUpdateDestinationDLQCursorsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &shared.DestinationDescription{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &shared.EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) readField3(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateDestinationDLQCursors_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceUpdateDestinationDLQCursorsResult(%+v)", *p)
}

// Attributes:
//  - DeleteRequest
type MetadataServiceDeleteDestinationArgs struct {
	DeleteRequest *shared.DeleteDestinationRequest `thrift:"deleteRequest,1" json:"deleteRequest"`
}

func NewMetadataServiceDeleteDestinationArgs() *MetadataServiceDeleteDestinationArgs {
	return &MetadataServiceDeleteDestinationArgs{}
}

var MetadataServiceDeleteDestinationArgs_DeleteRequest_DEFAULT *shared.DeleteDestinationRequest

func (p *MetadataServiceDeleteDestinationArgs) GetDeleteRequest() *shared.DeleteDestinationRequest {
	if !p.IsSetDeleteRequest() {
		return MetadataServiceDeleteDestinationArgs_DeleteRequest_DEFAULT
	}
	return p.DeleteRequest
}
func (p *MetadataServiceDeleteDestinationArgs) IsSetDeleteRequest() bool {
	return p.DeleteRequest != nil
}

func (p *MetadataServiceDeleteDestinationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceDeleteDestinationArgs) readField1(iprot thrift.TProtocol) error {
	p.DeleteRequest = &shared.DeleteDestinationRequest{}
	if err := p.DeleteRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeleteRequest), err)
	}
	return nil
}

func (p *MetadataServiceDeleteDestinationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteDestination_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceDeleteDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deleteRequest: ", p), err)
	}
	if err := p.DeleteRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeleteRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deleteRequest: ", p), err)
	}
	return err
}

func (p *MetadataServiceDeleteDestinationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceDeleteDestinationArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
//  - InternalServiceError
type MetadataServiceDeleteDestinationResult struct {
	EntityError          *shared.EntityNotExistsError `thrift:"entityError,1" json:"entityError,omitempty"`
	RequestError         *shared.BadRequestError      `thrift:"requestError,2" json:"requestError,omitempty"`
	InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceDeleteDestinationResult() *MetadataServiceDeleteDestinationResult {
	return &MetadataServiceDeleteDestinationResult{}
}

var MetadataServiceDeleteDestinationResult_EntityError_DEFAULT *shared.EntityNotExistsError

func (p *MetadataServiceDeleteDestinationResult) GetEntityError() *shared.EntityNotExistsError {
	if !p.IsSetEntityError() {
		return MetadataServiceDeleteDestinationResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var MetadataServiceDeleteDestinationResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataServiceDeleteDestinationResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataServiceDeleteDestinationResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataServiceDeleteDestinationResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceDeleteDestinationResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataServiceDeleteDestinationResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataServiceDeleteDestinationResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *MetadataServiceDeleteDestinationResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataServiceDeleteDestinationResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataServiceDeleteDestinationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceDeleteDestinationResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &shared.EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *MetadataServiceDeleteDestinationResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataServiceDeleteDestinationResult) readField3(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataServiceDeleteDestinationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteDestination_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceDeleteDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceDeleteDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceDeleteDestinationResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceDeleteDestinationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceDeleteDestinationResult(%+v)", *p)
}

// Attributes:
//  - DeleteRequest
type MetadataServiceDeleteDestinationUUIDArgs struct {
	DeleteRequest *DeleteDestinationUUIDRequest `thrift:"deleteRequest,1" json:"deleteRequest"`
}

func NewMetadataServiceDeleteDestinationUUIDArgs() *MetadataServiceDeleteDestinationUUIDArgs {
	return &MetadataServiceDeleteDestinationUUIDArgs{}
}

var MetadataServiceDeleteDestinationUUIDArgs_DeleteRequest_DEFAULT *DeleteDestinationUUIDRequest

func (p *MetadataServiceDeleteDestinationUUIDArgs) GetDeleteRequest() *DeleteDestinationUUIDRequest {
	if !p.IsSetDeleteRequest() {
		return MetadataServiceDeleteDestinationUUIDArgs_DeleteRequest_DEFAULT
	}
	return p.DeleteRequest
}
func (p *MetadataServiceDeleteDestinationUUIDArgs) IsSetDeleteRequest() bool {
	return p.DeleteRequest != nil
}

func (p *MetadataServiceDeleteDestinationUUIDArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceDeleteDestinationUUIDArgs) readField1(iprot thrift.TProtocol) error {
	p.DeleteRequest = &DeleteDestinationUUIDRequest{}
	if err := p.DeleteRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeleteRequest), err)
	}
	return nil
}

func (p *MetadataServiceDeleteDestinationUUIDArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteDestinationUUID_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceDeleteDestinationUUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deleteRequest: ", p), err)
	}
	if err := p.DeleteRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeleteRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deleteRequest: ", p), err)
	}
	return err
}

func (p *MetadataServiceDeleteDestinationUUIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceDeleteDestinationUUIDArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
//  - InternalServiceError
type MetadataServiceDeleteDestinationUUIDResult struct {
	EntityError          *shared.EntityNotExistsError `thrift:"entityError,1" json:"entityError,omitempty"`
	RequestError         *shared.BadRequestError      `thrift:"requestError,2" json:"requestError,omitempty"`
	InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceDeleteDestinationUUIDResult() *MetadataServiceDeleteDestinationUUIDResult {
	return &MetadataServiceDeleteDestinationUUIDResult{}
}

var MetadataServiceDeleteDestinationUUIDResult_EntityError_DEFAULT *shared.EntityNotExistsError

func (p *MetadataServiceDeleteDestinationUUIDResult) GetEntityError() *shared.EntityNotExistsError {
	if !p.IsSetEntityError() {
		return MetadataServiceDeleteDestinationUUIDResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var MetadataServiceDeleteDestinationUUIDResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataServiceDeleteDestinationUUIDResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataServiceDeleteDestinationUUIDResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataServiceDeleteDestinationUUIDResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceDeleteDestinationUUIDResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataServiceDeleteDestinationUUIDResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataServiceDeleteDestinationUUIDResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *MetadataServiceDeleteDestinationUUIDResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataServiceDeleteDestinationUUIDResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataServiceDeleteDestinationUUIDResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceDeleteDestinationUUIDResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &shared.EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *MetadataServiceDeleteDestinationUUIDResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataServiceDeleteDestinationUUIDResult) readField3(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataServiceDeleteDestinationUUIDResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteDestinationUUID_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceDeleteDestinationUUIDResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceDeleteDestinationUUIDResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceDeleteDestinationUUIDResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceDeleteDestinationUUIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceDeleteDestinationUUIDResult(%+v)", *p)
}

// Attributes:
//  - CreateRequest
type MetadataServiceCreateConsumerGroupArgs struct {
	CreateRequest *shared.CreateConsumerGroupRequest `thrift:"createRequest,1" json:"createRequest"`
}

func NewMetadataServiceCreateConsumerGroupArgs() *MetadataServiceCreateConsumerGroupArgs {
	return &MetadataServiceCreateConsumerGroupArgs{}
}

var MetadataServiceCreateConsumerGroupArgs_CreateRequest_DEFAULT *shared.CreateConsumerGroupRequest

func (p *MetadataServiceCreateConsumerGroupArgs) GetCreateRequest() *shared.CreateConsumerGroupRequest {
	if !p.IsSetCreateRequest() {
		return MetadataServiceCreateConsumerGroupArgs_CreateRequest_DEFAULT
	}
	return p.CreateRequest
}
func (p *MetadataServiceCreateConsumerGroupArgs) IsSetCreateRequest() bool {
	return p.CreateRequest != nil
}

func (p *MetadataServiceCreateConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceCreateConsumerGroupArgs) readField1(iprot thrift.TProtocol) error {
	p.CreateRequest = &shared.CreateConsumerGroupRequest{}
	if err := p.CreateRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateRequest), err)
	}
	return nil
}

func (p *MetadataServiceCreateConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createConsumerGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceCreateConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:createRequest: ", p), err)
	}
	if err := p.CreateRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:createRequest: ", p), err)
	}
	return err
}

func (p *MetadataServiceCreateConsumerGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceCreateConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityExistsError
//  - RequestError
//  - EntityNotExistsError
//  - InternalServiceError
type MetadataServiceCreateConsumerGroupResult struct {
	Success              *shared.ConsumerGroupDescription `thrift:"success,0" json:"success,omitempty"`
	EntityExistsError    *shared.EntityAlreadyExistsError `thrift:"entityExistsError,1" json:"entityExistsError,omitempty"`
	RequestError         *shared.BadRequestError          `thrift:"requestError,2" json:"requestError,omitempty"`
	EntityNotExistsError *shared.EntityNotExistsError     `thrift:"entityNotExistsError,3" json:"entityNotExistsError,omitempty"`
	InternalServiceError *shared.InternalServiceError     `thrift:"internalServiceError,4" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceCreateConsumerGroupResult() *MetadataServiceCreateConsumerGroupResult {
	return &MetadataServiceCreateConsumerGroupResult{}
}

var MetadataServiceCreateConsumerGroupResult_Success_DEFAULT *shared.ConsumerGroupDescription

func (p *MetadataServiceCreateConsumerGroupResult) GetSuccess() *shared.ConsumerGroupDescription {
	if !p.IsSetSuccess() {
		return MetadataServiceCreateConsumerGroupResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataServiceCreateConsumerGroupResult_EntityExistsError_DEFAULT *shared.EntityAlreadyExistsError

func (p *MetadataServiceCreateConsumerGroupResult) GetEntityExistsError() *shared.EntityAlreadyExistsError {
	if !p.IsSetEntityExistsError() {
		return MetadataServiceCreateConsumerGroupResult_EntityExistsError_DEFAULT
	}
	return p.EntityExistsError
}

var MetadataServiceCreateConsumerGroupResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataServiceCreateConsumerGroupResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataServiceCreateConsumerGroupResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataServiceCreateConsumerGroupResult_EntityNotExistsError_DEFAULT *shared.EntityNotExistsError

func (p *MetadataServiceCreateConsumerGroupResult) GetEntityNotExistsError() *shared.EntityNotExistsError {
	if !p.IsSetEntityNotExistsError() {
		return MetadataServiceCreateConsumerGroupResult_EntityNotExistsError_DEFAULT
	}
	return p.EntityNotExistsError
}

var MetadataServiceCreateConsumerGroupResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceCreateConsumerGroupResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataServiceCreateConsumerGroupResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataServiceCreateConsumerGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataServiceCreateConsumerGroupResult) IsSetEntityExistsError() bool {
	return p.EntityExistsError != nil
}

func (p *MetadataServiceCreateConsumerGroupResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataServiceCreateConsumerGroupResult) IsSetEntityNotExistsError() bool {
	return p.EntityNotExistsError != nil
}

func (p *MetadataServiceCreateConsumerGroupResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataServiceCreateConsumerGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceCreateConsumerGroupResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &shared.ConsumerGroupDescription{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataServiceCreateConsumerGroupResult) readField1(iprot thrift.TProtocol) error {
	p.EntityExistsError = &shared.EntityAlreadyExistsError{}
	if err := p.EntityExistsError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
	}
	return nil
}

func (p *MetadataServiceCreateConsumerGroupResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataServiceCreateConsumerGroupResult) readField3(iprot thrift.TProtocol) error {
	p.EntityNotExistsError = &shared.EntityNotExistsError{}
	if err := p.EntityNotExistsError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistsError), err)
	}
	return nil
}

func (p *MetadataServiceCreateConsumerGroupResult) readField4(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataServiceCreateConsumerGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createConsumerGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceCreateConsumerGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceCreateConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityExistsError() {
		if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityExistsError: ", p), err)
		}
		if err := p.EntityExistsError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityExistsError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceCreateConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceCreateConsumerGroupResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityNotExistsError() {
		if err := oprot.WriteFieldBegin("entityNotExistsError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistsError: ", p), err)
		}
		if err := p.EntityNotExistsError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistsError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistsError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceCreateConsumerGroupResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceCreateConsumerGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceCreateConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - UpdateRequest
type MetadataServiceUpdateConsumerGroupArgs struct {
	UpdateRequest *shared.UpdateConsumerGroupRequest `thrift:"updateRequest,1" json:"updateRequest"`
}

func NewMetadataServiceUpdateConsumerGroupArgs() *MetadataServiceUpdateConsumerGroupArgs {
	return &MetadataServiceUpdateConsumerGroupArgs{}
}

var MetadataServiceUpdateConsumerGroupArgs_UpdateRequest_DEFAULT *shared.UpdateConsumerGroupRequest

func (p *MetadataServiceUpdateConsumerGroupArgs) GetUpdateRequest() *shared.UpdateConsumerGroupRequest {
	if !p.IsSetUpdateRequest() {
		return MetadataServiceUpdateConsumerGroupArgs_UpdateRequest_DEFAULT
	}
	return p.UpdateRequest
}
func (p *MetadataServiceUpdateConsumerGroupArgs) IsSetUpdateRequest() bool {
	return p.UpdateRequest != nil
}

func (p *MetadataServiceUpdateConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceUpdateConsumerGroupArgs) readField1(iprot thrift.TProtocol) error {
	p.UpdateRequest = &shared.UpdateConsumerGroupRequest{}
	if err := p.UpdateRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdateRequest), err)
	}
	return nil
}

func (p *MetadataServiceUpdateConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateConsumerGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceUpdateConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateRequest: ", p), err)
	}
	if err := p.UpdateRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdateRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateRequest: ", p), err)
	}
	return err
}

func (p *MetadataServiceUpdateConsumerGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceUpdateConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
//  - InternalServiceError
type MetadataServiceUpdateConsumerGroupResult struct {
	Success              *shared.ConsumerGroupDescription `thrift:"success,0" json:"success,omitempty"`
	EntityError          *shared.EntityNotExistsError     `thrift:"entityError,1" json:"entityError,omitempty"`
	RequestError         *shared.BadRequestError          `thrift:"requestError,2" json:"requestError,omitempty"`
	InternalServiceError *shared.InternalServiceError     `thrift:"internalServiceError,3" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceUpdateConsumerGroupResult() *MetadataServiceUpdateConsumerGroupResult {
	return &MetadataServiceUpdateConsumerGroupResult{}
}

var MetadataServiceUpdateConsumerGroupResult_Success_DEFAULT *shared.ConsumerGroupDescription

func (p *MetadataServiceUpdateConsumerGroupResult) GetSuccess() *shared.ConsumerGroupDescription {
	if !p.IsSetSuccess() {
		return MetadataServiceUpdateConsumerGroupResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataServiceUpdateConsumerGroupResult_EntityError_DEFAULT *shared.EntityNotExistsError

func (p *MetadataServiceUpdateConsumerGroupResult) GetEntityError() *shared.EntityNotExistsError {
	if !p.IsSetEntityError() {
		return MetadataServiceUpdateConsumerGroupResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var MetadataServiceUpdateConsumerGroupResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataServiceUpdateConsumerGroupResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataServiceUpdateConsumerGroupResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataServiceUpdateConsumerGroupResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceUpdateConsumerGroupResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataServiceUpdateConsumerGroupResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataServiceUpdateConsumerGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataServiceUpdateConsumerGroupResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *MetadataServiceUpdateConsumerGroupResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataServiceUpdateConsumerGroupResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataServiceUpdateConsumerGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceUpdateConsumerGroupResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &shared.ConsumerGroupDescription{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataServiceUpdateConsumerGroupResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &shared.EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *MetadataServiceUpdateConsumerGroupResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataServiceUpdateConsumerGroupResult) readField3(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataServiceUpdateConsumerGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateConsumerGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceUpdateConsumerGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateConsumerGroupResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateConsumerGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceUpdateConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - DeleteRequest
type MetadataServiceDeleteConsumerGroupArgs struct {
	DeleteRequest *shared.DeleteConsumerGroupRequest `thrift:"deleteRequest,1" json:"deleteRequest"`
}

func NewMetadataServiceDeleteConsumerGroupArgs() *MetadataServiceDeleteConsumerGroupArgs {
	return &MetadataServiceDeleteConsumerGroupArgs{}
}

var MetadataServiceDeleteConsumerGroupArgs_DeleteRequest_DEFAULT *shared.DeleteConsumerGroupRequest

func (p *MetadataServiceDeleteConsumerGroupArgs) GetDeleteRequest() *shared.DeleteConsumerGroupRequest {
	if !p.IsSetDeleteRequest() {
		return MetadataServiceDeleteConsumerGroupArgs_DeleteRequest_DEFAULT
	}
	return p.DeleteRequest
}
func (p *MetadataServiceDeleteConsumerGroupArgs) IsSetDeleteRequest() bool {
	return p.DeleteRequest != nil
}

func (p *MetadataServiceDeleteConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceDeleteConsumerGroupArgs) readField1(iprot thrift.TProtocol) error {
	p.DeleteRequest = &shared.DeleteConsumerGroupRequest{}
	if err := p.DeleteRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeleteRequest), err)
	}
	return nil
}

func (p *MetadataServiceDeleteConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteConsumerGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceDeleteConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deleteRequest: ", p), err)
	}
	if err := p.DeleteRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeleteRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deleteRequest: ", p), err)
	}
	return err
}

func (p *MetadataServiceDeleteConsumerGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceDeleteConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
//  - InternalServiceError
type MetadataServiceDeleteConsumerGroupResult struct {
	EntityError          *shared.EntityNotExistsError `thrift:"entityError,1" json:"entityError,omitempty"`
	RequestError         *shared.BadRequestError      `thrift:"requestError,2" json:"requestError,omitempty"`
	InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceDeleteConsumerGroupResult() *MetadataServiceDeleteConsumerGroupResult {
	return &MetadataServiceDeleteConsumerGroupResult{}
}

var MetadataServiceDeleteConsumerGroupResult_EntityError_DEFAULT *shared.EntityNotExistsError

func (p *MetadataServiceDeleteConsumerGroupResult) GetEntityError() *shared.EntityNotExistsError {
	if !p.IsSetEntityError() {
		return MetadataServiceDeleteConsumerGroupResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var MetadataServiceDeleteConsumerGroupResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataServiceDeleteConsumerGroupResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataServiceDeleteConsumerGroupResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataServiceDeleteConsumerGroupResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceDeleteConsumerGroupResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataServiceDeleteConsumerGroupResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataServiceDeleteConsumerGroupResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *MetadataServiceDeleteConsumerGroupResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataServiceDeleteConsumerGroupResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataServiceDeleteConsumerGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceDeleteConsumerGroupResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &shared.EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *MetadataServiceDeleteConsumerGroupResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataServiceDeleteConsumerGroupResult) readField3(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataServiceDeleteConsumerGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteConsumerGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceDeleteConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceDeleteConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceDeleteConsumerGroupResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceDeleteConsumerGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceDeleteConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceCreateExtentArgs struct {
	Request *shared.CreateExtentRequest `thrift:"request,1" json:"request"`
}

func NewMetadataServiceCreateExtentArgs() *MetadataServiceCreateExtentArgs {
	return &MetadataServiceCreateExtentArgs{}
}

var MetadataServiceCreateExtentArgs_Request_DEFAULT *shared.CreateExtentRequest

func (p *MetadataServiceCreateExtentArgs) GetRequest() *shared.CreateExtentRequest {
	if !p.IsSetRequest() {
		return MetadataServiceCreateExtentArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataServiceCreateExtentArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataServiceCreateExtentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceCreateExtentArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &shared.CreateExtentRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataServiceCreateExtentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createExtent_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceCreateExtentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataServiceCreateExtentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceCreateExtentArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - EntityExistsError
//  - InternalServiceError
type MetadataServiceCreateExtentResult struct {
	Success              *shared.CreateExtentResult_      `thrift:"success,0" json:"success,omitempty"`
	RequestError         *shared.BadRequestError          `thrift:"requestError,1" json:"requestError,omitempty"`
	EntityExistsError    *shared.EntityAlreadyExistsError `thrift:"entityExistsError,2" json:"entityExistsError,omitempty"`
	InternalServiceError *shared.InternalServiceError     `thrift:"internalServiceError,3" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceCreateExtentResult() *MetadataServiceCreateExtentResult {
	return &MetadataServiceCreateExtentResult{}
}

var MetadataServiceCreateExtentResult_Success_DEFAULT *shared.CreateExtentResult_

func (p *MetadataServiceCreateExtentResult) GetSuccess() *shared.CreateExtentResult_ {
	if !p.IsSetSuccess() {
		return MetadataServiceCreateExtentResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataServiceCreateExtentResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataServiceCreateExtentResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataServiceCreateExtentResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataServiceCreateExtentResult_EntityExistsError_DEFAULT *shared.EntityAlreadyExistsError

func (p *MetadataServiceCreateExtentResult) GetEntityExistsError() *shared.EntityAlreadyExistsError {
	if !p.IsSetEntityExistsError() {
		return MetadataServiceCreateExtentResult_EntityExistsError_DEFAULT
	}
	return p.EntityExistsError
}

var MetadataServiceCreateExtentResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceCreateExtentResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataServiceCreateExtentResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataServiceCreateExtentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataServiceCreateExtentResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataServiceCreateExtentResult) IsSetEntityExistsError() bool {
	return p.EntityExistsError != nil
}

func (p *MetadataServiceCreateExtentResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataServiceCreateExtentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceCreateExtentResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &shared.CreateExtentResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataServiceCreateExtentResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataServiceCreateExtentResult) readField2(iprot thrift.TProtocol) error {
	p.EntityExistsError = &shared.EntityAlreadyExistsError{}
	if err := p.EntityExistsError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
	}
	return nil
}

func (p *MetadataServiceCreateExtentResult) readField3(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataServiceCreateExtentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createExtent_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceCreateExtentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceCreateExtentResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceCreateExtentResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityExistsError() {
		if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entityExistsError: ", p), err)
		}
		if err := p.EntityExistsError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entityExistsError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceCreateExtentResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceCreateExtentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceCreateExtentResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceUpdateExtentStatsArgs struct {
	Request *UpdateExtentStatsRequest `thrift:"request,1" json:"request"`
}

func NewMetadataServiceUpdateExtentStatsArgs() *MetadataServiceUpdateExtentStatsArgs {
	return &MetadataServiceUpdateExtentStatsArgs{}
}

var MetadataServiceUpdateExtentStatsArgs_Request_DEFAULT *UpdateExtentStatsRequest

func (p *MetadataServiceUpdateExtentStatsArgs) GetRequest() *UpdateExtentStatsRequest {
	if !p.IsSetRequest() {
		return MetadataServiceUpdateExtentStatsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataServiceUpdateExtentStatsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataServiceUpdateExtentStatsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceUpdateExtentStatsArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &UpdateExtentStatsRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataServiceUpdateExtentStatsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateExtentStats_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceUpdateExtentStatsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataServiceUpdateExtentStatsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceUpdateExtentStatsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - EntityNotExistsError
//  - InternalServiceError
type MetadataServiceUpdateExtentStatsResult struct {
	Success              *UpdateExtentStatsResult_    `thrift:"success,0" json:"success,omitempty"`
	RequestError         *shared.BadRequestError      `thrift:"requestError,1" json:"requestError,omitempty"`
	EntityNotExistsError *shared.EntityNotExistsError `thrift:"entityNotExistsError,2" json:"entityNotExistsError,omitempty"`
	InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceUpdateExtentStatsResult() *MetadataServiceUpdateExtentStatsResult {
	return &MetadataServiceUpdateExtentStatsResult{}
}

var MetadataServiceUpdateExtentStatsResult_Success_DEFAULT *UpdateExtentStatsResult_

func (p *MetadataServiceUpdateExtentStatsResult) GetSuccess() *UpdateExtentStatsResult_ {
	if !p.IsSetSuccess() {
		return MetadataServiceUpdateExtentStatsResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataServiceUpdateExtentStatsResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataServiceUpdateExtentStatsResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataServiceUpdateExtentStatsResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataServiceUpdateExtentStatsResult_EntityNotExistsError_DEFAULT *shared.EntityNotExistsError

func (p *MetadataServiceUpdateExtentStatsResult) GetEntityNotExistsError() *shared.EntityNotExistsError {
	if !p.IsSetEntityNotExistsError() {
		return MetadataServiceUpdateExtentStatsResult_EntityNotExistsError_DEFAULT
	}
	return p.EntityNotExistsError
}

var MetadataServiceUpdateExtentStatsResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceUpdateExtentStatsResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataServiceUpdateExtentStatsResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataServiceUpdateExtentStatsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataServiceUpdateExtentStatsResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataServiceUpdateExtentStatsResult) IsSetEntityNotExistsError() bool {
	return p.EntityNotExistsError != nil
}

func (p *MetadataServiceUpdateExtentStatsResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataServiceUpdateExtentStatsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceUpdateExtentStatsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &UpdateExtentStatsResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataServiceUpdateExtentStatsResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataServiceUpdateExtentStatsResult) readField2(iprot thrift.TProtocol) error {
	p.EntityNotExistsError = &shared.EntityNotExistsError{}
	if err := p.EntityNotExistsError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistsError), err)
	}
	return nil
}

func (p *MetadataServiceUpdateExtentStatsResult) readField3(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataServiceUpdateExtentStatsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateExtentStats_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceUpdateExtentStatsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateExtentStatsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateExtentStatsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityNotExistsError() {
		if err := oprot.WriteFieldBegin("entityNotExistsError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entityNotExistsError: ", p), err)
		}
		if err := p.EntityNotExistsError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistsError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entityNotExistsError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateExtentStatsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateExtentStatsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceUpdateExtentStatsResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceReadStoreExtentReplicaStatsArgs struct {
	Request *ReadStoreExtentReplicaStatsRequest `thrift:"request,1" json:"request"`
}

func NewMetadataServiceReadStoreExtentReplicaStatsArgs() *MetadataServiceReadStoreExtentReplicaStatsArgs {
	return &MetadataServiceReadStoreExtentReplicaStatsArgs{}
}

var MetadataServiceReadStoreExtentReplicaStatsArgs_Request_DEFAULT *ReadStoreExtentReplicaStatsRequest

func (p *MetadataServiceReadStoreExtentReplicaStatsArgs) GetRequest() *ReadStoreExtentReplicaStatsRequest {
	if !p.IsSetRequest() {
		return MetadataServiceReadStoreExtentReplicaStatsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataServiceReadStoreExtentReplicaStatsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &ReadStoreExtentReplicaStatsRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readStoreExtentReplicaStats_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataServiceReadStoreExtentReplicaStatsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceReadStoreExtentReplicaStatsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalServiceError
type MetadataServiceReadStoreExtentReplicaStatsResult struct {
	Success              *ReadStoreExtentReplicaStatsResult_ `thrift:"success,0" json:"success,omitempty"`
	RequestError         *shared.BadRequestError             `thrift:"requestError,1" json:"requestError,omitempty"`
	InternalServiceError *shared.InternalServiceError        `thrift:"internalServiceError,2" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceReadStoreExtentReplicaStatsResult() *MetadataServiceReadStoreExtentReplicaStatsResult {
	return &MetadataServiceReadStoreExtentReplicaStatsResult{}
}

var MetadataServiceReadStoreExtentReplicaStatsResult_Success_DEFAULT *ReadStoreExtentReplicaStatsResult_

func (p *MetadataServiceReadStoreExtentReplicaStatsResult) GetSuccess() *ReadStoreExtentReplicaStatsResult_ {
	if !p.IsSetSuccess() {
		return MetadataServiceReadStoreExtentReplicaStatsResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataServiceReadStoreExtentReplicaStatsResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataServiceReadStoreExtentReplicaStatsResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataServiceReadStoreExtentReplicaStatsResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataServiceReadStoreExtentReplicaStatsResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceReadStoreExtentReplicaStatsResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataServiceReadStoreExtentReplicaStatsResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataServiceReadStoreExtentReplicaStatsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ReadStoreExtentReplicaStatsResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsResult) readField2(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readStoreExtentReplicaStats_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceReadStoreExtentReplicaStatsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceReadStoreExtentReplicaStatsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceReadStoreExtentReplicaStatsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceReadStoreExtentReplicaStatsResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceSealExtentArgs struct {
	Request *SealExtentRequest `thrift:"request,1" json:"request"`
}

func NewMetadataServiceSealExtentArgs() *MetadataServiceSealExtentArgs {
	return &MetadataServiceSealExtentArgs{}
}

var MetadataServiceSealExtentArgs_Request_DEFAULT *SealExtentRequest

func (p *MetadataServiceSealExtentArgs) GetRequest() *SealExtentRequest {
	if !p.IsSetRequest() {
		return MetadataServiceSealExtentArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataServiceSealExtentArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataServiceSealExtentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceSealExtentArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &SealExtentRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataServiceSealExtentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sealExtent_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceSealExtentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataServiceSealExtentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceSealExtentArgs(%+v)", *p)
}

// Attributes:
//  - RequestError
//  - IllegalStateError
//  - InternalServiceError
type MetadataServiceSealExtentResult struct {
	RequestError         *shared.BadRequestError      `thrift:"requestError,1" json:"requestError,omitempty"`
	IllegalStateError    *IllegalStateError           `thrift:"illegalStateError,2" json:"illegalStateError,omitempty"`
	InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceSealExtentResult() *MetadataServiceSealExtentResult {
	return &MetadataServiceSealExtentResult{}
}

var MetadataServiceSealExtentResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataServiceSealExtentResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataServiceSealExtentResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataServiceSealExtentResult_IllegalStateError_DEFAULT *IllegalStateError

func (p *MetadataServiceSealExtentResult) GetIllegalStateError() *IllegalStateError {
	if !p.IsSetIllegalStateError() {
		return MetadataServiceSealExtentResult_IllegalStateError_DEFAULT
	}
	return p.IllegalStateError
}

var MetadataServiceSealExtentResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceSealExtentResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataServiceSealExtentResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataServiceSealExtentResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataServiceSealExtentResult) IsSetIllegalStateError() bool {
	return p.IllegalStateError != nil
}

func (p *MetadataServiceSealExtentResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataServiceSealExtentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceSealExtentResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataServiceSealExtentResult) readField2(iprot thrift.TProtocol) error {
	p.IllegalStateError = &IllegalStateError{}
	if err := p.IllegalStateError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IllegalStateError), err)
	}
	return nil
}

func (p *MetadataServiceSealExtentResult) readField3(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataServiceSealExtentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sealExtent_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceSealExtentResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceSealExtentResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIllegalStateError() {
		if err := oprot.WriteFieldBegin("illegalStateError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:illegalStateError: ", p), err)
		}
		if err := p.IllegalStateError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IllegalStateError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:illegalStateError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceSealExtentResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceSealExtentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceSealExtentResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceUpdateExtentReplicaStatsArgs struct {
	Request *UpdateExtentReplicaStatsRequest `thrift:"request,1" json:"request"`
}

func NewMetadataServiceUpdateExtentReplicaStatsArgs() *MetadataServiceUpdateExtentReplicaStatsArgs {
	return &MetadataServiceUpdateExtentReplicaStatsArgs{}
}

var MetadataServiceUpdateExtentReplicaStatsArgs_Request_DEFAULT *UpdateExtentReplicaStatsRequest

func (p *MetadataServiceUpdateExtentReplicaStatsArgs) GetRequest() *UpdateExtentReplicaStatsRequest {
	if !p.IsSetRequest() {
		return MetadataServiceUpdateExtentReplicaStatsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataServiceUpdateExtentReplicaStatsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataServiceUpdateExtentReplicaStatsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceUpdateExtentReplicaStatsArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &UpdateExtentReplicaStatsRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataServiceUpdateExtentReplicaStatsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateExtentReplicaStats_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceUpdateExtentReplicaStatsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataServiceUpdateExtentReplicaStatsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceUpdateExtentReplicaStatsArgs(%+v)", *p)
}

// Attributes:
//  - RequestError
//  - InternalServiceError
type MetadataServiceUpdateExtentReplicaStatsResult struct {
	RequestError         *shared.BadRequestError      `thrift:"requestError,1" json:"requestError,omitempty"`
	InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceUpdateExtentReplicaStatsResult() *MetadataServiceUpdateExtentReplicaStatsResult {
	return &MetadataServiceUpdateExtentReplicaStatsResult{}
}

var MetadataServiceUpdateExtentReplicaStatsResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataServiceUpdateExtentReplicaStatsResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataServiceUpdateExtentReplicaStatsResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataServiceUpdateExtentReplicaStatsResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceUpdateExtentReplicaStatsResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataServiceUpdateExtentReplicaStatsResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataServiceUpdateExtentReplicaStatsResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataServiceUpdateExtentReplicaStatsResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataServiceUpdateExtentReplicaStatsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceUpdateExtentReplicaStatsResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataServiceUpdateExtentReplicaStatsResult) readField2(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataServiceUpdateExtentReplicaStatsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateExtentReplicaStats_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceUpdateExtentReplicaStatsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateExtentReplicaStatsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateExtentReplicaStatsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceUpdateExtentReplicaStatsResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceUpdateStoreExtentReplicaStatsArgs struct {
	Request *UpdateStoreExtentReplicaStatsRequest `thrift:"request,1" json:"request"`
}

func NewMetadataServiceUpdateStoreExtentReplicaStatsArgs() *MetadataServiceUpdateStoreExtentReplicaStatsArgs {
	return &MetadataServiceUpdateStoreExtentReplicaStatsArgs{}
}

var MetadataServiceUpdateStoreExtentReplicaStatsArgs_Request_DEFAULT *UpdateStoreExtentReplicaStatsRequest

func (p *MetadataServiceUpdateStoreExtentReplicaStatsArgs) GetRequest() *UpdateStoreExtentReplicaStatsRequest {
	if !p.IsSetRequest() {
		return MetadataServiceUpdateStoreExtentReplicaStatsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataServiceUpdateStoreExtentReplicaStatsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &UpdateStoreExtentReplicaStatsRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateStoreExtentReplicaStats_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceUpdateStoreExtentReplicaStatsArgs(%+v)", *p)
}

// Attributes:
//  - RequestError
//  - InternalServiceError
type MetadataServiceUpdateStoreExtentReplicaStatsResult struct {
	RequestError         *shared.BadRequestError      `thrift:"requestError,1" json:"requestError,omitempty"`
	InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceUpdateStoreExtentReplicaStatsResult() *MetadataServiceUpdateStoreExtentReplicaStatsResult {
	return &MetadataServiceUpdateStoreExtentReplicaStatsResult{}
}

var MetadataServiceUpdateStoreExtentReplicaStatsResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataServiceUpdateStoreExtentReplicaStatsResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataServiceUpdateStoreExtentReplicaStatsResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataServiceUpdateStoreExtentReplicaStatsResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceUpdateStoreExtentReplicaStatsResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataServiceUpdateStoreExtentReplicaStatsResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataServiceUpdateStoreExtentReplicaStatsResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsResult) readField2(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateStoreExtentReplicaStats_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceUpdateStoreExtentReplicaStatsResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceMoveExtentArgs struct {
	Request *MoveExtentRequest `thrift:"request,1" json:"request"`
}

func NewMetadataServiceMoveExtentArgs() *MetadataServiceMoveExtentArgs {
	return &MetadataServiceMoveExtentArgs{}
}

var MetadataServiceMoveExtentArgs_Request_DEFAULT *MoveExtentRequest

func (p *MetadataServiceMoveExtentArgs) GetRequest() *MoveExtentRequest {
	if !p.IsSetRequest() {
		return MetadataServiceMoveExtentArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataServiceMoveExtentArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataServiceMoveExtentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceMoveExtentArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &MoveExtentRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataServiceMoveExtentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("moveExtent_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceMoveExtentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataServiceMoveExtentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceMoveExtentArgs(%+v)", *p)
}

// Attributes:
//  - RequestError
//  - IllegalStateError
//  - InternalServiceError
type MetadataServiceMoveExtentResult struct {
	RequestError         *shared.BadRequestError      `thrift:"requestError,1" json:"requestError,omitempty"`
	IllegalStateError    *IllegalStateError           `thrift:"illegalStateError,2" json:"illegalStateError,omitempty"`
	InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceMoveExtentResult() *MetadataServiceMoveExtentResult {
	return &MetadataServiceMoveExtentResult{}
}

var MetadataServiceMoveExtentResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataServiceMoveExtentResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataServiceMoveExtentResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataServiceMoveExtentResult_IllegalStateError_DEFAULT *IllegalStateError

func (p *MetadataServiceMoveExtentResult) GetIllegalStateError() *IllegalStateError {
	if !p.IsSetIllegalStateError() {
		return MetadataServiceMoveExtentResult_IllegalStateError_DEFAULT
	}
	return p.IllegalStateError
}

var MetadataServiceMoveExtentResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceMoveExtentResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataServiceMoveExtentResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataServiceMoveExtentResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataServiceMoveExtentResult) IsSetIllegalStateError() bool {
	return p.IllegalStateError != nil
}

func (p *MetadataServiceMoveExtentResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataServiceMoveExtentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceMoveExtentResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataServiceMoveExtentResult) readField2(iprot thrift.TProtocol) error {
	p.IllegalStateError = &IllegalStateError{}
	if err := p.IllegalStateError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IllegalStateError), err)
	}
	return nil
}

func (p *MetadataServiceMoveExtentResult) readField3(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataServiceMoveExtentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("moveExtent_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceMoveExtentResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceMoveExtentResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIllegalStateError() {
		if err := oprot.WriteFieldBegin("illegalStateError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:illegalStateError: ", p), err)
		}
		if err := p.IllegalStateError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IllegalStateError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:illegalStateError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceMoveExtentResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceMoveExtentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceMoveExtentResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceSetAckOffsetArgs struct {
	Request *SetAckOffsetRequest `thrift:"request,1" json:"request"`
}

func NewMetadataServiceSetAckOffsetArgs() *MetadataServiceSetAckOffsetArgs {
	return &MetadataServiceSetAckOffsetArgs{}
}

var MetadataServiceSetAckOffsetArgs_Request_DEFAULT *SetAckOffsetRequest

func (p *MetadataServiceSetAckOffsetArgs) GetRequest() *SetAckOffsetRequest {
	if !p.IsSetRequest() {
		return MetadataServiceSetAckOffsetArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataServiceSetAckOffsetArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataServiceSetAckOffsetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceSetAckOffsetArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &SetAckOffsetRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataServiceSetAckOffsetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setAckOffset_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceSetAckOffsetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataServiceSetAckOffsetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceSetAckOffsetArgs(%+v)", *p)
}

// Attributes:
//  - InternalServiceError
type MetadataServiceSetAckOffsetResult struct {
	InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,1" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceSetAckOffsetResult() *MetadataServiceSetAckOffsetResult {
	return &MetadataServiceSetAckOffsetResult{}
}

var MetadataServiceSetAckOffsetResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceSetAckOffsetResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataServiceSetAckOffsetResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataServiceSetAckOffsetResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataServiceSetAckOffsetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceSetAckOffsetResult) readField1(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataServiceSetAckOffsetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setAckOffset_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceSetAckOffsetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceSetAckOffsetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceSetAckOffsetResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceUpdateConsumerGroupExtentStatusArgs struct {
	Request *UpdateConsumerGroupExtentStatusRequest `thrift:"request,1" json:"request"`
}

func NewMetadataServiceUpdateConsumerGroupExtentStatusArgs() *MetadataServiceUpdateConsumerGroupExtentStatusArgs {
	return &MetadataServiceUpdateConsumerGroupExtentStatusArgs{}
}

var MetadataServiceUpdateConsumerGroupExtentStatusArgs_Request_DEFAULT *UpdateConsumerGroupExtentStatusRequest

func (p *MetadataServiceUpdateConsumerGroupExtentStatusArgs) GetRequest() *UpdateConsumerGroupExtentStatusRequest {
	if !p.IsSetRequest() {
		return MetadataServiceUpdateConsumerGroupExtentStatusArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataServiceUpdateConsumerGroupExtentStatusArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &UpdateConsumerGroupExtentStatusRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateConsumerGroupExtentStatus_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceUpdateConsumerGroupExtentStatusArgs(%+v)", *p)
}

// Attributes:
//  - RequestError
//  - InternalServiceError
//  - NotExistsError
type MetadataServiceUpdateConsumerGroupExtentStatusResult struct {
	RequestError         *shared.BadRequestError      `thrift:"requestError,1" json:"requestError,omitempty"`
	InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" json:"internalServiceError,omitempty"`
	NotExistsError       *shared.EntityNotExistsError `thrift:"notExistsError,3" json:"notExistsError,omitempty"`
}

func NewMetadataServiceUpdateConsumerGroupExtentStatusResult() *MetadataServiceUpdateConsumerGroupExtentStatusResult {
	return &MetadataServiceUpdateConsumerGroupExtentStatusResult{}
}

var MetadataServiceUpdateConsumerGroupExtentStatusResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataServiceUpdateConsumerGroupExtentStatusResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataServiceUpdateConsumerGroupExtentStatusResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataServiceUpdateConsumerGroupExtentStatusResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}

var MetadataServiceUpdateConsumerGroupExtentStatusResult_NotExistsError_DEFAULT *shared.EntityNotExistsError

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) GetNotExistsError() *shared.EntityNotExistsError {
	if !p.IsSetNotExistsError() {
		return MetadataServiceUpdateConsumerGroupExtentStatusResult_NotExistsError_DEFAULT
	}
	return p.NotExistsError
}
func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) IsSetNotExistsError() bool {
	return p.NotExistsError != nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) readField2(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) readField3(iprot thrift.TProtocol) error {
	p.NotExistsError = &shared.EntityNotExistsError{}
	if err := p.NotExistsError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotExistsError), err)
	}
	return nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateConsumerGroupExtentStatus_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotExistsError() {
		if err := oprot.WriteFieldBegin("notExistsError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notExistsError: ", p), err)
		}
		if err := p.NotExistsError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotExistsError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notExistsError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceUpdateConsumerGroupExtentStatusResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceCreateConsumerGroupExtentArgs struct {
	Request *CreateConsumerGroupExtentRequest `thrift:"request,1" json:"request"`
}

func NewMetadataServiceCreateConsumerGroupExtentArgs() *MetadataServiceCreateConsumerGroupExtentArgs {
	return &MetadataServiceCreateConsumerGroupExtentArgs{}
}

var MetadataServiceCreateConsumerGroupExtentArgs_Request_DEFAULT *CreateConsumerGroupExtentRequest

func (p *MetadataServiceCreateConsumerGroupExtentArgs) GetRequest() *CreateConsumerGroupExtentRequest {
	if !p.IsSetRequest() {
		return MetadataServiceCreateConsumerGroupExtentArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataServiceCreateConsumerGroupExtentArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataServiceCreateConsumerGroupExtentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceCreateConsumerGroupExtentArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &CreateConsumerGroupExtentRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataServiceCreateConsumerGroupExtentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createConsumerGroupExtent_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceCreateConsumerGroupExtentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataServiceCreateConsumerGroupExtentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceCreateConsumerGroupExtentArgs(%+v)", *p)
}

// Attributes:
//  - InternalServiceError
type MetadataServiceCreateConsumerGroupExtentResult struct {
	InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,1" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceCreateConsumerGroupExtentResult() *MetadataServiceCreateConsumerGroupExtentResult {
	return &MetadataServiceCreateConsumerGroupExtentResult{}
}

var MetadataServiceCreateConsumerGroupExtentResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceCreateConsumerGroupExtentResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataServiceCreateConsumerGroupExtentResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataServiceCreateConsumerGroupExtentResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataServiceCreateConsumerGroupExtentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceCreateConsumerGroupExtentResult) readField1(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataServiceCreateConsumerGroupExtentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createConsumerGroupExtent_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceCreateConsumerGroupExtentResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceCreateConsumerGroupExtentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceCreateConsumerGroupExtentResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceSetOutputHostArgs struct {
	Request *SetOutputHostRequest `thrift:"request,1" json:"request"`
}

func NewMetadataServiceSetOutputHostArgs() *MetadataServiceSetOutputHostArgs {
	return &MetadataServiceSetOutputHostArgs{}
}

var MetadataServiceSetOutputHostArgs_Request_DEFAULT *SetOutputHostRequest

func (p *MetadataServiceSetOutputHostArgs) GetRequest() *SetOutputHostRequest {
	if !p.IsSetRequest() {
		return MetadataServiceSetOutputHostArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataServiceSetOutputHostArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataServiceSetOutputHostArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceSetOutputHostArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &SetOutputHostRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataServiceSetOutputHostArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setOutputHost_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceSetOutputHostArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataServiceSetOutputHostArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceSetOutputHostArgs(%+v)", *p)
}

// Attributes:
//  - InternalServiceError
type MetadataServiceSetOutputHostResult struct {
	InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,1" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceSetOutputHostResult() *MetadataServiceSetOutputHostResult {
	return &MetadataServiceSetOutputHostResult{}
}

var MetadataServiceSetOutputHostResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceSetOutputHostResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataServiceSetOutputHostResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataServiceSetOutputHostResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataServiceSetOutputHostResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceSetOutputHostResult) readField1(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataServiceSetOutputHostResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setOutputHost_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceSetOutputHostResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceSetOutputHostResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceSetOutputHostResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceRegisterHostUUIDArgs struct {
	Request *RegisterHostUUIDRequest `thrift:"request,1" json:"request"`
}

func NewMetadataServiceRegisterHostUUIDArgs() *MetadataServiceRegisterHostUUIDArgs {
	return &MetadataServiceRegisterHostUUIDArgs{}
}

var MetadataServiceRegisterHostUUIDArgs_Request_DEFAULT *RegisterHostUUIDRequest

func (p *MetadataServiceRegisterHostUUIDArgs) GetRequest() *RegisterHostUUIDRequest {
	if !p.IsSetRequest() {
		return MetadataServiceRegisterHostUUIDArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataServiceRegisterHostUUIDArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataServiceRegisterHostUUIDArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceRegisterHostUUIDArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &RegisterHostUUIDRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataServiceRegisterHostUUIDArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerHostUUID_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceRegisterHostUUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataServiceRegisterHostUUIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceRegisterHostUUIDArgs(%+v)", *p)
}

// Attributes:
//  - Error
type MetadataServiceRegisterHostUUIDResult struct {
	Error *shared.InternalServiceError `thrift:"error,1" json:"error,omitempty"`
}

func NewMetadataServiceRegisterHostUUIDResult() *MetadataServiceRegisterHostUUIDResult {
	return &MetadataServiceRegisterHostUUIDResult{}
}

var MetadataServiceRegisterHostUUIDResult_Error_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceRegisterHostUUIDResult) GetError() *shared.InternalServiceError {
	if !p.IsSetError() {
		return MetadataServiceRegisterHostUUIDResult_Error_DEFAULT
	}
	return p.Error
}
func (p *MetadataServiceRegisterHostUUIDResult) IsSetError() bool {
	return p.Error != nil
}

func (p *MetadataServiceRegisterHostUUIDResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceRegisterHostUUIDResult) readField1(iprot thrift.TProtocol) error {
	p.Error = &shared.InternalServiceError{}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *MetadataServiceRegisterHostUUIDResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerHostUUID_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceRegisterHostUUIDResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceRegisterHostUUIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceRegisterHostUUIDResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceCreateHostInfoArgs struct {
	Request *CreateHostInfoRequest `thrift:"request,1" json:"request"`
}

func NewMetadataServiceCreateHostInfoArgs() *MetadataServiceCreateHostInfoArgs {
	return &MetadataServiceCreateHostInfoArgs{}
}

var MetadataServiceCreateHostInfoArgs_Request_DEFAULT *CreateHostInfoRequest

func (p *MetadataServiceCreateHostInfoArgs) GetRequest() *CreateHostInfoRequest {
	if !p.IsSetRequest() {
		return MetadataServiceCreateHostInfoArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataServiceCreateHostInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataServiceCreateHostInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceCreateHostInfoArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &CreateHostInfoRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataServiceCreateHostInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createHostInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceCreateHostInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataServiceCreateHostInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceCreateHostInfoArgs(%+v)", *p)
}

// Attributes:
//  - Error
type MetadataServiceCreateHostInfoResult struct {
	Error *shared.InternalServiceError `thrift:"error,1" json:"error,omitempty"`
}

func NewMetadataServiceCreateHostInfoResult() *MetadataServiceCreateHostInfoResult {
	return &MetadataServiceCreateHostInfoResult{}
}

var MetadataServiceCreateHostInfoResult_Error_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceCreateHostInfoResult) GetError() *shared.InternalServiceError {
	if !p.IsSetError() {
		return MetadataServiceCreateHostInfoResult_Error_DEFAULT
	}
	return p.Error
}
func (p *MetadataServiceCreateHostInfoResult) IsSetError() bool {
	return p.Error != nil
}

func (p *MetadataServiceCreateHostInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceCreateHostInfoResult) readField1(iprot thrift.TProtocol) error {
	p.Error = &shared.InternalServiceError{}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *MetadataServiceCreateHostInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createHostInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceCreateHostInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceCreateHostInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceCreateHostInfoResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceUpdateHostInfoArgs struct {
	Request *UpdateHostInfoRequest `thrift:"request,1" json:"request"`
}

func NewMetadataServiceUpdateHostInfoArgs() *MetadataServiceUpdateHostInfoArgs {
	return &MetadataServiceUpdateHostInfoArgs{}
}

var MetadataServiceUpdateHostInfoArgs_Request_DEFAULT *UpdateHostInfoRequest

func (p *MetadataServiceUpdateHostInfoArgs) GetRequest() *UpdateHostInfoRequest {
	if !p.IsSetRequest() {
		return MetadataServiceUpdateHostInfoArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataServiceUpdateHostInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataServiceUpdateHostInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceUpdateHostInfoArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &UpdateHostInfoRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataServiceUpdateHostInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateHostInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceUpdateHostInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataServiceUpdateHostInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceUpdateHostInfoArgs(%+v)", *p)
}

// Attributes:
//  - Error
type MetadataServiceUpdateHostInfoResult struct {
	Error *shared.InternalServiceError `thrift:"error,1" json:"error,omitempty"`
}

func NewMetadataServiceUpdateHostInfoResult() *MetadataServiceUpdateHostInfoResult {
	return &MetadataServiceUpdateHostInfoResult{}
}

var MetadataServiceUpdateHostInfoResult_Error_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceUpdateHostInfoResult) GetError() *shared.InternalServiceError {
	if !p.IsSetError() {
		return MetadataServiceUpdateHostInfoResult_Error_DEFAULT
	}
	return p.Error
}
func (p *MetadataServiceUpdateHostInfoResult) IsSetError() bool {
	return p.Error != nil
}

func (p *MetadataServiceUpdateHostInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceUpdateHostInfoResult) readField1(iprot thrift.TProtocol) error {
	p.Error = &shared.InternalServiceError{}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *MetadataServiceUpdateHostInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateHostInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceUpdateHostInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceUpdateHostInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceUpdateHostInfoResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceDeleteHostInfoArgs struct {
	Request *DeleteHostInfoRequest `thrift:"request,1" json:"request"`
}

func NewMetadataServiceDeleteHostInfoArgs() *MetadataServiceDeleteHostInfoArgs {
	return &MetadataServiceDeleteHostInfoArgs{}
}

var MetadataServiceDeleteHostInfoArgs_Request_DEFAULT *DeleteHostInfoRequest

func (p *MetadataServiceDeleteHostInfoArgs) GetRequest() *DeleteHostInfoRequest {
	if !p.IsSetRequest() {
		return MetadataServiceDeleteHostInfoArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataServiceDeleteHostInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataServiceDeleteHostInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceDeleteHostInfoArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &DeleteHostInfoRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataServiceDeleteHostInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteHostInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceDeleteHostInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataServiceDeleteHostInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceDeleteHostInfoArgs(%+v)", *p)
}

// Attributes:
//  - Error
type MetadataServiceDeleteHostInfoResult struct {
	Error *shared.InternalServiceError `thrift:"error,1" json:"error,omitempty"`
}

func NewMetadataServiceDeleteHostInfoResult() *MetadataServiceDeleteHostInfoResult {
	return &MetadataServiceDeleteHostInfoResult{}
}

var MetadataServiceDeleteHostInfoResult_Error_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceDeleteHostInfoResult) GetError() *shared.InternalServiceError {
	if !p.IsSetError() {
		return MetadataServiceDeleteHostInfoResult_Error_DEFAULT
	}
	return p.Error
}
func (p *MetadataServiceDeleteHostInfoResult) IsSetError() bool {
	return p.Error != nil
}

func (p *MetadataServiceDeleteHostInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceDeleteHostInfoResult) readField1(iprot thrift.TProtocol) error {
	p.Error = &shared.InternalServiceError{}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *MetadataServiceDeleteHostInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteHostInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceDeleteHostInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceDeleteHostInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceDeleteHostInfoResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceReadHostInfoArgs struct {
	Request *ReadHostInfoRequest `thrift:"request,1" json:"request"`
}

func NewMetadataServiceReadHostInfoArgs() *MetadataServiceReadHostInfoArgs {
	return &MetadataServiceReadHostInfoArgs{}
}

var MetadataServiceReadHostInfoArgs_Request_DEFAULT *ReadHostInfoRequest

func (p *MetadataServiceReadHostInfoArgs) GetRequest() *ReadHostInfoRequest {
	if !p.IsSetRequest() {
		return MetadataServiceReadHostInfoArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataServiceReadHostInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataServiceReadHostInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceReadHostInfoArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &ReadHostInfoRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataServiceReadHostInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readHostInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceReadHostInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataServiceReadHostInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceReadHostInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type MetadataServiceReadHostInfoResult struct {
	Success *ReadHostInfoResult_         `thrift:"success,0" json:"success,omitempty"`
	Error   *shared.InternalServiceError `thrift:"error,1" json:"error,omitempty"`
}

func NewMetadataServiceReadHostInfoResult() *MetadataServiceReadHostInfoResult {
	return &MetadataServiceReadHostInfoResult{}
}

var MetadataServiceReadHostInfoResult_Success_DEFAULT *ReadHostInfoResult_

func (p *MetadataServiceReadHostInfoResult) GetSuccess() *ReadHostInfoResult_ {
	if !p.IsSetSuccess() {
		return MetadataServiceReadHostInfoResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataServiceReadHostInfoResult_Error_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceReadHostInfoResult) GetError() *shared.InternalServiceError {
	if !p.IsSetError() {
		return MetadataServiceReadHostInfoResult_Error_DEFAULT
	}
	return p.Error
}
func (p *MetadataServiceReadHostInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataServiceReadHostInfoResult) IsSetError() bool {
	return p.Error != nil
}

func (p *MetadataServiceReadHostInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceReadHostInfoResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ReadHostInfoResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataServiceReadHostInfoResult) readField1(iprot thrift.TProtocol) error {
	p.Error = &shared.InternalServiceError{}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *MetadataServiceReadHostInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readHostInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceReadHostInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceReadHostInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceReadHostInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceReadHostInfoResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceCreateServiceConfigArgs struct {
	Request *CreateServiceConfigRequest `thrift:"request,1" json:"request"`
}

func NewMetadataServiceCreateServiceConfigArgs() *MetadataServiceCreateServiceConfigArgs {
	return &MetadataServiceCreateServiceConfigArgs{}
}

var MetadataServiceCreateServiceConfigArgs_Request_DEFAULT *CreateServiceConfigRequest

func (p *MetadataServiceCreateServiceConfigArgs) GetRequest() *CreateServiceConfigRequest {
	if !p.IsSetRequest() {
		return MetadataServiceCreateServiceConfigArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataServiceCreateServiceConfigArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataServiceCreateServiceConfigArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceCreateServiceConfigArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &CreateServiceConfigRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataServiceCreateServiceConfigArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createServiceConfig_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceCreateServiceConfigArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataServiceCreateServiceConfigArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceCreateServiceConfigArgs(%+v)", *p)
}

// Attributes:
//  - Error
type MetadataServiceCreateServiceConfigResult struct {
	Error *shared.InternalServiceError `thrift:"error,1" json:"error,omitempty"`
}

func NewMetadataServiceCreateServiceConfigResult() *MetadataServiceCreateServiceConfigResult {
	return &MetadataServiceCreateServiceConfigResult{}
}

var MetadataServiceCreateServiceConfigResult_Error_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceCreateServiceConfigResult) GetError() *shared.InternalServiceError {
	if !p.IsSetError() {
		return MetadataServiceCreateServiceConfigResult_Error_DEFAULT
	}
	return p.Error
}
func (p *MetadataServiceCreateServiceConfigResult) IsSetError() bool {
	return p.Error != nil
}

func (p *MetadataServiceCreateServiceConfigResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceCreateServiceConfigResult) readField1(iprot thrift.TProtocol) error {
	p.Error = &shared.InternalServiceError{}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *MetadataServiceCreateServiceConfigResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createServiceConfig_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceCreateServiceConfigResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceCreateServiceConfigResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceCreateServiceConfigResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceDeleteServiceConfigArgs struct {
	Request *DeleteServiceConfigRequest `thrift:"request,1" json:"request"`
}

func NewMetadataServiceDeleteServiceConfigArgs() *MetadataServiceDeleteServiceConfigArgs {
	return &MetadataServiceDeleteServiceConfigArgs{}
}

var MetadataServiceDeleteServiceConfigArgs_Request_DEFAULT *DeleteServiceConfigRequest

func (p *MetadataServiceDeleteServiceConfigArgs) GetRequest() *DeleteServiceConfigRequest {
	if !p.IsSetRequest() {
		return MetadataServiceDeleteServiceConfigArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataServiceDeleteServiceConfigArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataServiceDeleteServiceConfigArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceDeleteServiceConfigArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &DeleteServiceConfigRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataServiceDeleteServiceConfigArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteServiceConfig_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceDeleteServiceConfigArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataServiceDeleteServiceConfigArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceDeleteServiceConfigArgs(%+v)", *p)
}

// Attributes:
//  - Error
type MetadataServiceDeleteServiceConfigResult struct {
	Error *shared.InternalServiceError `thrift:"error,1" json:"error,omitempty"`
}

func NewMetadataServiceDeleteServiceConfigResult() *MetadataServiceDeleteServiceConfigResult {
	return &MetadataServiceDeleteServiceConfigResult{}
}

var MetadataServiceDeleteServiceConfigResult_Error_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceDeleteServiceConfigResult) GetError() *shared.InternalServiceError {
	if !p.IsSetError() {
		return MetadataServiceDeleteServiceConfigResult_Error_DEFAULT
	}
	return p.Error
}
func (p *MetadataServiceDeleteServiceConfigResult) IsSetError() bool {
	return p.Error != nil
}

func (p *MetadataServiceDeleteServiceConfigResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceDeleteServiceConfigResult) readField1(iprot thrift.TProtocol) error {
	p.Error = &shared.InternalServiceError{}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *MetadataServiceDeleteServiceConfigResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteServiceConfig_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceDeleteServiceConfigResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceDeleteServiceConfigResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceDeleteServiceConfigResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceReadServiceConfigArgs struct {
	Request *ReadServiceConfigRequest `thrift:"request,1" json:"request"`
}

func NewMetadataServiceReadServiceConfigArgs() *MetadataServiceReadServiceConfigArgs {
	return &MetadataServiceReadServiceConfigArgs{}
}

var MetadataServiceReadServiceConfigArgs_Request_DEFAULT *ReadServiceConfigRequest

func (p *MetadataServiceReadServiceConfigArgs) GetRequest() *ReadServiceConfigRequest {
	if !p.IsSetRequest() {
		return MetadataServiceReadServiceConfigArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataServiceReadServiceConfigArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataServiceReadServiceConfigArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceReadServiceConfigArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &ReadServiceConfigRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataServiceReadServiceConfigArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readServiceConfig_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceReadServiceConfigArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataServiceReadServiceConfigArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceReadServiceConfigArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type MetadataServiceReadServiceConfigResult struct {
	Success *ReadServiceConfigResult_    `thrift:"success,0" json:"success,omitempty"`
	Error   *shared.InternalServiceError `thrift:"error,1" json:"error,omitempty"`
}

func NewMetadataServiceReadServiceConfigResult() *MetadataServiceReadServiceConfigResult {
	return &MetadataServiceReadServiceConfigResult{}
}

var MetadataServiceReadServiceConfigResult_Success_DEFAULT *ReadServiceConfigResult_

func (p *MetadataServiceReadServiceConfigResult) GetSuccess() *ReadServiceConfigResult_ {
	if !p.IsSetSuccess() {
		return MetadataServiceReadServiceConfigResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataServiceReadServiceConfigResult_Error_DEFAULT *shared.InternalServiceError

func (p *MetadataServiceReadServiceConfigResult) GetError() *shared.InternalServiceError {
	if !p.IsSetError() {
		return MetadataServiceReadServiceConfigResult_Error_DEFAULT
	}
	return p.Error
}
func (p *MetadataServiceReadServiceConfigResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataServiceReadServiceConfigResult) IsSetError() bool {
	return p.Error != nil
}

func (p *MetadataServiceReadServiceConfigResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataServiceReadServiceConfigResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ReadServiceConfigResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataServiceReadServiceConfigResult) readField1(iprot thrift.TProtocol) error {
	p.Error = &shared.InternalServiceError{}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *MetadataServiceReadServiceConfigResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readServiceConfig_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataServiceReadServiceConfigResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceReadServiceConfigResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
		}
	}
	return err
}

func (p *MetadataServiceReadServiceConfigResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataServiceReadServiceConfigResult(%+v)", *p)
}
