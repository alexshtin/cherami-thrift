// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package metadata

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/cherami-thrift/.generated/go/shared"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = shared.GoUnusedProtection__

type MetadataExposable interface {
	// Parameters:
	//  - GetRequest
	ReadDestination(getRequest *ReadDestinationRequest) (r *shared.DestinationDescription, err error)
	// Parameters:
	//  - ListRequest
	ListDestinations(listRequest *shared.ListDestinationsRequest) (r *shared.ListDestinationsResult_, err error)
	// Parameters:
	//  - ListRequest
	ListDestinationsByUUID(listRequest *shared.ListDestinationsByUUIDRequest) (r *shared.ListDestinationsResult_, err error)
	// Parameters:
	//  - Request
	ListExtentsStats(request *shared.ListExtentsStatsRequest) (r *shared.ListExtentsStatsResult_, err error)
	// Parameters:
	//  - Request
	ListInputHostExtentsStats(request *ListInputHostExtentsStatsRequest) (r *ListInputHostExtentsStatsResult_, err error)
	// Parameters:
	//  - Request
	ListStoreExtentsStats(request *ListStoreExtentsStatsRequest) (r *ListStoreExtentsStatsResult_, err error)
	// Parameters:
	//  - Request
	ReadExtentStats(request *ReadExtentStatsRequest) (r *ReadExtentStatsResult_, err error)
	// Parameters:
	//  - Request
	ReadConsumerGroupExtent(request *ReadConsumerGroupExtentRequest) (r *ReadConsumerGroupExtentResult_, err error)
	// Parameters:
	//  - Request
	ReadConsumerGroupExtents(request *ReadConsumerGroupExtentsRequest) (r *ReadConsumerGroupExtentsResult_, err error)
	// Parameters:
	//  - HostAddr
	HostAddrToUUID(hostAddr string) (r string, err error)
	// Parameters:
	//  - HostUUID
	UUIDToHostAddr(hostUUID string) (r string, err error)
	// Parameters:
	//  - Request
	ListHosts(request *ListHostsRequest) (r *ListHostsResult_, err error)
	// Parameters:
	//  - ListRequest
	ListAllConsumerGroups(listRequest *ListConsumerGroupRequest) (r *ListConsumerGroupResult_, err error)
	// Parameters:
	//  - ListRequest
	ListEntityOps(listRequest *ListEntityOpsRequest) (r *ListEntityOpsResult_, err error)
	// Parameters:
	//  - ListRequest
	ListConsumerGroups(listRequest *ListConsumerGroupRequest) (r *ListConsumerGroupResult_, err error)
	// Parameters:
	//  - Request
	ReadConsumerGroupExtentsByExtUUID(request *ReadConsumerGroupExtentsByExtUUIDRequest) (r *ReadConsumerGroupExtentsByExtUUIDResult_, err error)
	// Parameters:
	//  - GetRequest
	ReadConsumerGroup(getRequest *ReadConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error)
	// Parameters:
	//  - Request
	ReadConsumerGroupByUUID(request *ReadConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error)
	// Parameters:
	//  - Request
	UpdateServiceConfig(request *UpdateServiceConfigRequest) (err error)
}

type MetadataExposableClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewMetadataExposableClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MetadataExposableClient {
	return &MetadataExposableClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewMetadataExposableClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MetadataExposableClient {
	return &MetadataExposableClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - GetRequest
func (p *MetadataExposableClient) ReadDestination(getRequest *ReadDestinationRequest) (r *shared.DestinationDescription, err error) {
	if err = p.sendReadDestination(getRequest); err != nil {
		return
	}
	return p.recvReadDestination()
}

func (p *MetadataExposableClient) sendReadDestination(getRequest *ReadDestinationRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("readDestination", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataExposableReadDestinationArgs{
		GetRequest: getRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataExposableClient) recvReadDestination() (value *shared.DestinationDescription, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "readDestination" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readDestination failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readDestination failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readDestination failed: invalid message type")
		return
	}
	result := MetadataExposableReadDestinationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ListRequest
func (p *MetadataExposableClient) ListDestinations(listRequest *shared.ListDestinationsRequest) (r *shared.ListDestinationsResult_, err error) {
	if err = p.sendListDestinations(listRequest); err != nil {
		return
	}
	return p.recvListDestinations()
}

func (p *MetadataExposableClient) sendListDestinations(listRequest *shared.ListDestinationsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listDestinations", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataExposableListDestinationsArgs{
		ListRequest: listRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataExposableClient) recvListDestinations() (value *shared.ListDestinationsResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "listDestinations" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listDestinations failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listDestinations failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error21 error
		error21, err = error20.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error21
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listDestinations failed: invalid message type")
		return
	}
	result := MetadataExposableListDestinationsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ListRequest
func (p *MetadataExposableClient) ListDestinationsByUUID(listRequest *shared.ListDestinationsByUUIDRequest) (r *shared.ListDestinationsResult_, err error) {
	if err = p.sendListDestinationsByUUID(listRequest); err != nil {
		return
	}
	return p.recvListDestinationsByUUID()
}

func (p *MetadataExposableClient) sendListDestinationsByUUID(listRequest *shared.ListDestinationsByUUIDRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listDestinationsByUUID", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataExposableListDestinationsByUUIDArgs{
		ListRequest: listRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataExposableClient) recvListDestinationsByUUID() (value *shared.ListDestinationsResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "listDestinationsByUUID" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listDestinationsByUUID failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listDestinationsByUUID failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listDestinationsByUUID failed: invalid message type")
		return
	}
	result := MetadataExposableListDestinationsByUUIDResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *MetadataExposableClient) ListExtentsStats(request *shared.ListExtentsStatsRequest) (r *shared.ListExtentsStatsResult_, err error) {
	if err = p.sendListExtentsStats(request); err != nil {
		return
	}
	return p.recvListExtentsStats()
}

func (p *MetadataExposableClient) sendListExtentsStats(request *shared.ListExtentsStatsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listExtentsStats", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataExposableListExtentsStatsArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataExposableClient) recvListExtentsStats() (value *shared.ListExtentsStatsResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "listExtentsStats" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listExtentsStats failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listExtentsStats failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error25 error
		error25, err = error24.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error25
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listExtentsStats failed: invalid message type")
		return
	}
	result := MetadataExposableListExtentsStatsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *MetadataExposableClient) ListInputHostExtentsStats(request *ListInputHostExtentsStatsRequest) (r *ListInputHostExtentsStatsResult_, err error) {
	if err = p.sendListInputHostExtentsStats(request); err != nil {
		return
	}
	return p.recvListInputHostExtentsStats()
}

func (p *MetadataExposableClient) sendListInputHostExtentsStats(request *ListInputHostExtentsStatsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listInputHostExtentsStats", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataExposableListInputHostExtentsStatsArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataExposableClient) recvListInputHostExtentsStats() (value *ListInputHostExtentsStatsResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "listInputHostExtentsStats" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listInputHostExtentsStats failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listInputHostExtentsStats failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error27 error
		error27, err = error26.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error27
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listInputHostExtentsStats failed: invalid message type")
		return
	}
	result := MetadataExposableListInputHostExtentsStatsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalError != nil {
		err = result.InternalError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *MetadataExposableClient) ListStoreExtentsStats(request *ListStoreExtentsStatsRequest) (r *ListStoreExtentsStatsResult_, err error) {
	if err = p.sendListStoreExtentsStats(request); err != nil {
		return
	}
	return p.recvListStoreExtentsStats()
}

func (p *MetadataExposableClient) sendListStoreExtentsStats(request *ListStoreExtentsStatsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listStoreExtentsStats", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataExposableListStoreExtentsStatsArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataExposableClient) recvListStoreExtentsStats() (value *ListStoreExtentsStatsResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "listStoreExtentsStats" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listStoreExtentsStats failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listStoreExtentsStats failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error29 error
		error29, err = error28.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error29
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listStoreExtentsStats failed: invalid message type")
		return
	}
	result := MetadataExposableListStoreExtentsStatsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalError != nil {
		err = result.InternalError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *MetadataExposableClient) ReadExtentStats(request *ReadExtentStatsRequest) (r *ReadExtentStatsResult_, err error) {
	if err = p.sendReadExtentStats(request); err != nil {
		return
	}
	return p.recvReadExtentStats()
}

func (p *MetadataExposableClient) sendReadExtentStats(request *ReadExtentStatsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("readExtentStats", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataExposableReadExtentStatsArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataExposableClient) recvReadExtentStats() (value *ReadExtentStatsResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "readExtentStats" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readExtentStats failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readExtentStats failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error31 error
		error31, err = error30.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error31
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readExtentStats failed: invalid message type")
		return
	}
	result := MetadataExposableReadExtentStatsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalError != nil {
		err = result.InternalError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *MetadataExposableClient) ReadConsumerGroupExtent(request *ReadConsumerGroupExtentRequest) (r *ReadConsumerGroupExtentResult_, err error) {
	if err = p.sendReadConsumerGroupExtent(request); err != nil {
		return
	}
	return p.recvReadConsumerGroupExtent()
}

func (p *MetadataExposableClient) sendReadConsumerGroupExtent(request *ReadConsumerGroupExtentRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("readConsumerGroupExtent", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataExposableReadConsumerGroupExtentArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataExposableClient) recvReadConsumerGroupExtent() (value *ReadConsumerGroupExtentResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "readConsumerGroupExtent" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readConsumerGroupExtent failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readConsumerGroupExtent failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error33 error
		error33, err = error32.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error33
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readConsumerGroupExtent failed: invalid message type")
		return
	}
	result := MetadataExposableReadConsumerGroupExtentResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalError != nil {
		err = result.InternalError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *MetadataExposableClient) ReadConsumerGroupExtents(request *ReadConsumerGroupExtentsRequest) (r *ReadConsumerGroupExtentsResult_, err error) {
	if err = p.sendReadConsumerGroupExtents(request); err != nil {
		return
	}
	return p.recvReadConsumerGroupExtents()
}

func (p *MetadataExposableClient) sendReadConsumerGroupExtents(request *ReadConsumerGroupExtentsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("readConsumerGroupExtents", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataExposableReadConsumerGroupExtentsArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataExposableClient) recvReadConsumerGroupExtents() (value *ReadConsumerGroupExtentsResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "readConsumerGroupExtents" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readConsumerGroupExtents failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readConsumerGroupExtents failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error35 error
		error35, err = error34.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error35
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readConsumerGroupExtents failed: invalid message type")
		return
	}
	result := MetadataExposableReadConsumerGroupExtentsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalError != nil {
		err = result.InternalError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - HostAddr
func (p *MetadataExposableClient) HostAddrToUUID(hostAddr string) (r string, err error) {
	if err = p.sendHostAddrToUUID(hostAddr); err != nil {
		return
	}
	return p.recvHostAddrToUUID()
}

func (p *MetadataExposableClient) sendHostAddrToUUID(hostAddr string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("hostAddrToUUID", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataExposableHostAddrToUUIDArgs{
		HostAddr: hostAddr,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataExposableClient) recvHostAddrToUUID() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "hostAddrToUUID" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "hostAddrToUUID failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "hostAddrToUUID failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error37 error
		error37, err = error36.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error37
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "hostAddrToUUID failed: invalid message type")
		return
	}
	result := MetadataExposableHostAddrToUUIDResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.NotExistsError != nil {
		err = result.NotExistsError
		return
	} else if result.InternalError != nil {
		err = result.InternalError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - HostUUID
func (p *MetadataExposableClient) UUIDToHostAddr(hostUUID string) (r string, err error) {
	if err = p.sendUUIDToHostAddr(hostUUID); err != nil {
		return
	}
	return p.recvUUIDToHostAddr()
}

func (p *MetadataExposableClient) sendUUIDToHostAddr(hostUUID string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("uUIDToHostAddr", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataExposableUUIDToHostAddrArgs{
		HostUUID: hostUUID,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataExposableClient) recvUUIDToHostAddr() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "uUIDToHostAddr" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "uUIDToHostAddr failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "uUIDToHostAddr failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error39 error
		error39, err = error38.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error39
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "uUIDToHostAddr failed: invalid message type")
		return
	}
	result := MetadataExposableUUIDToHostAddrResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.NotExistsError != nil {
		err = result.NotExistsError
		return
	} else if result.InternalError != nil {
		err = result.InternalError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *MetadataExposableClient) ListHosts(request *ListHostsRequest) (r *ListHostsResult_, err error) {
	if err = p.sendListHosts(request); err != nil {
		return
	}
	return p.recvListHosts()
}

func (p *MetadataExposableClient) sendListHosts(request *ListHostsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listHosts", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataExposableListHostsArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataExposableClient) recvListHosts() (value *ListHostsResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "listHosts" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listHosts failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listHosts failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error41 error
		error41, err = error40.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error41
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listHosts failed: invalid message type")
		return
	}
	result := MetadataExposableListHostsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalError != nil {
		err = result.InternalError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ListRequest
func (p *MetadataExposableClient) ListAllConsumerGroups(listRequest *ListConsumerGroupRequest) (r *ListConsumerGroupResult_, err error) {
	if err = p.sendListAllConsumerGroups(listRequest); err != nil {
		return
	}
	return p.recvListAllConsumerGroups()
}

func (p *MetadataExposableClient) sendListAllConsumerGroups(listRequest *ListConsumerGroupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listAllConsumerGroups", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataExposableListAllConsumerGroupsArgs{
		ListRequest: listRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataExposableClient) recvListAllConsumerGroups() (value *ListConsumerGroupResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "listAllConsumerGroups" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listAllConsumerGroups failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listAllConsumerGroups failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error43 error
		error43, err = error42.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error43
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listAllConsumerGroups failed: invalid message type")
		return
	}
	result := MetadataExposableListAllConsumerGroupsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalError != nil {
		err = result.InternalError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ListRequest
func (p *MetadataExposableClient) ListEntityOps(listRequest *ListEntityOpsRequest) (r *ListEntityOpsResult_, err error) {
	if err = p.sendListEntityOps(listRequest); err != nil {
		return
	}
	return p.recvListEntityOps()
}

func (p *MetadataExposableClient) sendListEntityOps(listRequest *ListEntityOpsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ListEntityOps", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataExposableListEntityOpsArgs{
		ListRequest: listRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataExposableClient) recvListEntityOps() (value *ListEntityOpsResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "ListEntityOps" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ListEntityOps failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ListEntityOps failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error44 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error45 error
		error45, err = error44.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error45
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ListEntityOps failed: invalid message type")
		return
	}
	result := MetadataExposableListEntityOpsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalError != nil {
		err = result.InternalError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ListRequest
func (p *MetadataExposableClient) ListConsumerGroups(listRequest *ListConsumerGroupRequest) (r *ListConsumerGroupResult_, err error) {
	if err = p.sendListConsumerGroups(listRequest); err != nil {
		return
	}
	return p.recvListConsumerGroups()
}

func (p *MetadataExposableClient) sendListConsumerGroups(listRequest *ListConsumerGroupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listConsumerGroups", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataExposableListConsumerGroupsArgs{
		ListRequest: listRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataExposableClient) recvListConsumerGroups() (value *ListConsumerGroupResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "listConsumerGroups" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listConsumerGroups failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listConsumerGroups failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error46 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error47 error
		error47, err = error46.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error47
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listConsumerGroups failed: invalid message type")
		return
	}
	result := MetadataExposableListConsumerGroupsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalError != nil {
		err = result.InternalError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *MetadataExposableClient) ReadConsumerGroupExtentsByExtUUID(request *ReadConsumerGroupExtentsByExtUUIDRequest) (r *ReadConsumerGroupExtentsByExtUUIDResult_, err error) {
	if err = p.sendReadConsumerGroupExtentsByExtUUID(request); err != nil {
		return
	}
	return p.recvReadConsumerGroupExtentsByExtUUID()
}

func (p *MetadataExposableClient) sendReadConsumerGroupExtentsByExtUUID(request *ReadConsumerGroupExtentsByExtUUIDRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("readConsumerGroupExtentsByExtUUID", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataExposableClient) recvReadConsumerGroupExtentsByExtUUID() (value *ReadConsumerGroupExtentsByExtUUIDResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "readConsumerGroupExtentsByExtUUID" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readConsumerGroupExtentsByExtUUID failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readConsumerGroupExtentsByExtUUID failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error48 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error49 error
		error49, err = error48.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error49
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readConsumerGroupExtentsByExtUUID failed: invalid message type")
		return
	}
	result := MetadataExposableReadConsumerGroupExtentsByExtUUIDResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalError != nil {
		err = result.InternalError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GetRequest
func (p *MetadataExposableClient) ReadConsumerGroup(getRequest *ReadConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error) {
	if err = p.sendReadConsumerGroup(getRequest); err != nil {
		return
	}
	return p.recvReadConsumerGroup()
}

func (p *MetadataExposableClient) sendReadConsumerGroup(getRequest *ReadConsumerGroupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("readConsumerGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataExposableReadConsumerGroupArgs{
		GetRequest: getRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataExposableClient) recvReadConsumerGroup() (value *shared.ConsumerGroupDescription, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "readConsumerGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readConsumerGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readConsumerGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error50 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error51 error
		error51, err = error50.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error51
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readConsumerGroup failed: invalid message type")
		return
	}
	result := MetadataExposableReadConsumerGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *MetadataExposableClient) ReadConsumerGroupByUUID(request *ReadConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error) {
	if err = p.sendReadConsumerGroupByUUID(request); err != nil {
		return
	}
	return p.recvReadConsumerGroupByUUID()
}

func (p *MetadataExposableClient) sendReadConsumerGroupByUUID(request *ReadConsumerGroupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("readConsumerGroupByUUID", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataExposableReadConsumerGroupByUUIDArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataExposableClient) recvReadConsumerGroupByUUID() (value *shared.ConsumerGroupDescription, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "readConsumerGroupByUUID" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readConsumerGroupByUUID failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readConsumerGroupByUUID failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error52 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error53 error
		error53, err = error52.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error53
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readConsumerGroupByUUID failed: invalid message type")
		return
	}
	result := MetadataExposableReadConsumerGroupByUUIDResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.EntityError != nil {
		err = result.EntityError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *MetadataExposableClient) UpdateServiceConfig(request *UpdateServiceConfigRequest) (err error) {
	if err = p.sendUpdateServiceConfig(request); err != nil {
		return
	}
	return p.recvUpdateServiceConfig()
}

func (p *MetadataExposableClient) sendUpdateServiceConfig(request *UpdateServiceConfigRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateServiceConfig", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MetadataExposableUpdateServiceConfigArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetadataExposableClient) recvUpdateServiceConfig() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateServiceConfig" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateServiceConfig failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateServiceConfig failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error54 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error55 error
		error55, err = error54.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error55
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateServiceConfig failed: invalid message type")
		return
	}
	result := MetadataExposableUpdateServiceConfigResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error != nil {
		err = result.Error
		return
	}
	return
}

type MetadataExposableProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MetadataExposable
}

func (p *MetadataExposableProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MetadataExposableProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MetadataExposableProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMetadataExposableProcessor(handler MetadataExposable) *MetadataExposableProcessor {

	self56 := &MetadataExposableProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self56.processorMap["readDestination"] = &metadataExposableProcessorReadDestination{handler: handler}
	self56.processorMap["listDestinations"] = &metadataExposableProcessorListDestinations{handler: handler}
	self56.processorMap["listDestinationsByUUID"] = &metadataExposableProcessorListDestinationsByUUID{handler: handler}
	self56.processorMap["listExtentsStats"] = &metadataExposableProcessorListExtentsStats{handler: handler}
	self56.processorMap["listInputHostExtentsStats"] = &metadataExposableProcessorListInputHostExtentsStats{handler: handler}
	self56.processorMap["listStoreExtentsStats"] = &metadataExposableProcessorListStoreExtentsStats{handler: handler}
	self56.processorMap["readExtentStats"] = &metadataExposableProcessorReadExtentStats{handler: handler}
	self56.processorMap["readConsumerGroupExtent"] = &metadataExposableProcessorReadConsumerGroupExtent{handler: handler}
	self56.processorMap["readConsumerGroupExtents"] = &metadataExposableProcessorReadConsumerGroupExtents{handler: handler}
	self56.processorMap["hostAddrToUUID"] = &metadataExposableProcessorHostAddrToUUID{handler: handler}
	self56.processorMap["uUIDToHostAddr"] = &metadataExposableProcessorUUIDToHostAddr{handler: handler}
	self56.processorMap["listHosts"] = &metadataExposableProcessorListHosts{handler: handler}
	self56.processorMap["listAllConsumerGroups"] = &metadataExposableProcessorListAllConsumerGroups{handler: handler}
	self56.processorMap["ListEntityOps"] = &metadataExposableProcessorListEntityOps{handler: handler}
	self56.processorMap["listConsumerGroups"] = &metadataExposableProcessorListConsumerGroups{handler: handler}
	self56.processorMap["readConsumerGroupExtentsByExtUUID"] = &metadataExposableProcessorReadConsumerGroupExtentsByExtUUID{handler: handler}
	self56.processorMap["readConsumerGroup"] = &metadataExposableProcessorReadConsumerGroup{handler: handler}
	self56.processorMap["readConsumerGroupByUUID"] = &metadataExposableProcessorReadConsumerGroupByUUID{handler: handler}
	self56.processorMap["updateServiceConfig"] = &metadataExposableProcessorUpdateServiceConfig{handler: handler}
	return self56
}

func (p *MetadataExposableProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x57 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x57.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x57

}

type metadataExposableProcessorReadDestination struct {
	handler MetadataExposable
}

func (p *metadataExposableProcessorReadDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataExposableReadDestinationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("readDestination", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataExposableReadDestinationResult{}
	var retval *shared.DestinationDescription
	var err2 error
	if retval, err2 = p.handler.ReadDestination(args.GetRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.EntityNotExistsError:
			result.EntityError = v
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readDestination: "+err2.Error())
			oprot.WriteMessageBegin("readDestination", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("readDestination", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataExposableProcessorListDestinations struct {
	handler MetadataExposable
}

func (p *metadataExposableProcessorListDestinations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataExposableListDestinationsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listDestinations", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataExposableListDestinationsResult{}
	var retval *shared.ListDestinationsResult_
	var err2 error
	if retval, err2 = p.handler.ListDestinations(args.ListRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listDestinations: "+err2.Error())
			oprot.WriteMessageBegin("listDestinations", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listDestinations", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataExposableProcessorListDestinationsByUUID struct {
	handler MetadataExposable
}

func (p *metadataExposableProcessorListDestinationsByUUID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataExposableListDestinationsByUUIDArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listDestinationsByUUID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataExposableListDestinationsByUUIDResult{}
	var retval *shared.ListDestinationsResult_
	var err2 error
	if retval, err2 = p.handler.ListDestinationsByUUID(args.ListRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listDestinationsByUUID: "+err2.Error())
			oprot.WriteMessageBegin("listDestinationsByUUID", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listDestinationsByUUID", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataExposableProcessorListExtentsStats struct {
	handler MetadataExposable
}

func (p *metadataExposableProcessorListExtentsStats) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataExposableListExtentsStatsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listExtentsStats", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataExposableListExtentsStatsResult{}
	var retval *shared.ListExtentsStatsResult_
	var err2 error
	if retval, err2 = p.handler.ListExtentsStats(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listExtentsStats: "+err2.Error())
			oprot.WriteMessageBegin("listExtentsStats", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listExtentsStats", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataExposableProcessorListInputHostExtentsStats struct {
	handler MetadataExposable
}

func (p *metadataExposableProcessorListInputHostExtentsStats) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataExposableListInputHostExtentsStatsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listInputHostExtentsStats", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataExposableListInputHostExtentsStatsResult{}
	var retval *ListInputHostExtentsStatsResult_
	var err2 error
	if retval, err2 = p.handler.ListInputHostExtentsStats(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listInputHostExtentsStats: "+err2.Error())
			oprot.WriteMessageBegin("listInputHostExtentsStats", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listInputHostExtentsStats", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataExposableProcessorListStoreExtentsStats struct {
	handler MetadataExposable
}

func (p *metadataExposableProcessorListStoreExtentsStats) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataExposableListStoreExtentsStatsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listStoreExtentsStats", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataExposableListStoreExtentsStatsResult{}
	var retval *ListStoreExtentsStatsResult_
	var err2 error
	if retval, err2 = p.handler.ListStoreExtentsStats(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listStoreExtentsStats: "+err2.Error())
			oprot.WriteMessageBegin("listStoreExtentsStats", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listStoreExtentsStats", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataExposableProcessorReadExtentStats struct {
	handler MetadataExposable
}

func (p *metadataExposableProcessorReadExtentStats) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataExposableReadExtentStatsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("readExtentStats", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataExposableReadExtentStatsResult{}
	var retval *ReadExtentStatsResult_
	var err2 error
	if retval, err2 = p.handler.ReadExtentStats(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readExtentStats: "+err2.Error())
			oprot.WriteMessageBegin("readExtentStats", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("readExtentStats", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataExposableProcessorReadConsumerGroupExtent struct {
	handler MetadataExposable
}

func (p *metadataExposableProcessorReadConsumerGroupExtent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataExposableReadConsumerGroupExtentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("readConsumerGroupExtent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataExposableReadConsumerGroupExtentResult{}
	var retval *ReadConsumerGroupExtentResult_
	var err2 error
	if retval, err2 = p.handler.ReadConsumerGroupExtent(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readConsumerGroupExtent: "+err2.Error())
			oprot.WriteMessageBegin("readConsumerGroupExtent", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("readConsumerGroupExtent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataExposableProcessorReadConsumerGroupExtents struct {
	handler MetadataExposable
}

func (p *metadataExposableProcessorReadConsumerGroupExtents) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataExposableReadConsumerGroupExtentsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("readConsumerGroupExtents", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataExposableReadConsumerGroupExtentsResult{}
	var retval *ReadConsumerGroupExtentsResult_
	var err2 error
	if retval, err2 = p.handler.ReadConsumerGroupExtents(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readConsumerGroupExtents: "+err2.Error())
			oprot.WriteMessageBegin("readConsumerGroupExtents", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("readConsumerGroupExtents", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataExposableProcessorHostAddrToUUID struct {
	handler MetadataExposable
}

func (p *metadataExposableProcessorHostAddrToUUID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataExposableHostAddrToUUIDArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("hostAddrToUUID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataExposableHostAddrToUUIDResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.HostAddrToUUID(args.HostAddr); err2 != nil {
		switch v := err2.(type) {
		case *shared.EntityNotExistsError:
			result.NotExistsError = v
		case *shared.InternalServiceError:
			result.InternalError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing hostAddrToUUID: "+err2.Error())
			oprot.WriteMessageBegin("hostAddrToUUID", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("hostAddrToUUID", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataExposableProcessorUUIDToHostAddr struct {
	handler MetadataExposable
}

func (p *metadataExposableProcessorUUIDToHostAddr) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataExposableUUIDToHostAddrArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("uUIDToHostAddr", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataExposableUUIDToHostAddrResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.UUIDToHostAddr(args.HostUUID); err2 != nil {
		switch v := err2.(type) {
		case *shared.EntityNotExistsError:
			result.NotExistsError = v
		case *shared.InternalServiceError:
			result.InternalError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing uUIDToHostAddr: "+err2.Error())
			oprot.WriteMessageBegin("uUIDToHostAddr", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("uUIDToHostAddr", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataExposableProcessorListHosts struct {
	handler MetadataExposable
}

func (p *metadataExposableProcessorListHosts) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataExposableListHostsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listHosts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataExposableListHostsResult{}
	var retval *ListHostsResult_
	var err2 error
	if retval, err2 = p.handler.ListHosts(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listHosts: "+err2.Error())
			oprot.WriteMessageBegin("listHosts", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listHosts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataExposableProcessorListAllConsumerGroups struct {
	handler MetadataExposable
}

func (p *metadataExposableProcessorListAllConsumerGroups) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataExposableListAllConsumerGroupsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listAllConsumerGroups", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataExposableListAllConsumerGroupsResult{}
	var retval *ListConsumerGroupResult_
	var err2 error
	if retval, err2 = p.handler.ListAllConsumerGroups(args.ListRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listAllConsumerGroups: "+err2.Error())
			oprot.WriteMessageBegin("listAllConsumerGroups", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listAllConsumerGroups", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataExposableProcessorListEntityOps struct {
	handler MetadataExposable
}

func (p *metadataExposableProcessorListEntityOps) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataExposableListEntityOpsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListEntityOps", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataExposableListEntityOpsResult{}
	var retval *ListEntityOpsResult_
	var err2 error
	if retval, err2 = p.handler.ListEntityOps(args.ListRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListEntityOps: "+err2.Error())
			oprot.WriteMessageBegin("ListEntityOps", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListEntityOps", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataExposableProcessorListConsumerGroups struct {
	handler MetadataExposable
}

func (p *metadataExposableProcessorListConsumerGroups) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataExposableListConsumerGroupsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listConsumerGroups", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataExposableListConsumerGroupsResult{}
	var retval *ListConsumerGroupResult_
	var err2 error
	if retval, err2 = p.handler.ListConsumerGroups(args.ListRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listConsumerGroups: "+err2.Error())
			oprot.WriteMessageBegin("listConsumerGroups", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listConsumerGroups", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataExposableProcessorReadConsumerGroupExtentsByExtUUID struct {
	handler MetadataExposable
}

func (p *metadataExposableProcessorReadConsumerGroupExtentsByExtUUID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("readConsumerGroupExtentsByExtUUID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataExposableReadConsumerGroupExtentsByExtUUIDResult{}
	var retval *ReadConsumerGroupExtentsByExtUUIDResult_
	var err2 error
	if retval, err2 = p.handler.ReadConsumerGroupExtentsByExtUUID(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readConsumerGroupExtentsByExtUUID: "+err2.Error())
			oprot.WriteMessageBegin("readConsumerGroupExtentsByExtUUID", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("readConsumerGroupExtentsByExtUUID", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataExposableProcessorReadConsumerGroup struct {
	handler MetadataExposable
}

func (p *metadataExposableProcessorReadConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataExposableReadConsumerGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("readConsumerGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataExposableReadConsumerGroupResult{}
	var retval *shared.ConsumerGroupDescription
	var err2 error
	if retval, err2 = p.handler.ReadConsumerGroup(args.GetRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.EntityNotExistsError:
			result.EntityError = v
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readConsumerGroup: "+err2.Error())
			oprot.WriteMessageBegin("readConsumerGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("readConsumerGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataExposableProcessorReadConsumerGroupByUUID struct {
	handler MetadataExposable
}

func (p *metadataExposableProcessorReadConsumerGroupByUUID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataExposableReadConsumerGroupByUUIDArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("readConsumerGroupByUUID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataExposableReadConsumerGroupByUUIDResult{}
	var retval *shared.ConsumerGroupDescription
	var err2 error
	if retval, err2 = p.handler.ReadConsumerGroupByUUID(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.RequestError = v
		case *shared.EntityNotExistsError:
			result.EntityError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readConsumerGroupByUUID: "+err2.Error())
			oprot.WriteMessageBegin("readConsumerGroupByUUID", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("readConsumerGroupByUUID", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metadataExposableProcessorUpdateServiceConfig struct {
	handler MetadataExposable
}

func (p *metadataExposableProcessorUpdateServiceConfig) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetadataExposableUpdateServiceConfigArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateServiceConfig", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetadataExposableUpdateServiceConfigResult{}
	var err2 error
	if err2 = p.handler.UpdateServiceConfig(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *shared.InternalServiceError:
			result.Error = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateServiceConfig: "+err2.Error())
			oprot.WriteMessageBegin("updateServiceConfig", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateServiceConfig", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - GetRequest
type MetadataExposableReadDestinationArgs struct {
	GetRequest *ReadDestinationRequest `thrift:"getRequest,1" json:"getRequest"`
}

func NewMetadataExposableReadDestinationArgs() *MetadataExposableReadDestinationArgs {
	return &MetadataExposableReadDestinationArgs{}
}

var MetadataExposableReadDestinationArgs_GetRequest_DEFAULT *ReadDestinationRequest

func (p *MetadataExposableReadDestinationArgs) GetGetRequest() *ReadDestinationRequest {
	if !p.IsSetGetRequest() {
		return MetadataExposableReadDestinationArgs_GetRequest_DEFAULT
	}
	return p.GetRequest
}
func (p *MetadataExposableReadDestinationArgs) IsSetGetRequest() bool {
	return p.GetRequest != nil
}

func (p *MetadataExposableReadDestinationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableReadDestinationArgs) readField1(iprot thrift.TProtocol) error {
	p.GetRequest = &ReadDestinationRequest{}
	if err := p.GetRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetRequest), err)
	}
	return nil
}

func (p *MetadataExposableReadDestinationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readDestination_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableReadDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("getRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getRequest: ", p), err)
	}
	if err := p.GetRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getRequest: ", p), err)
	}
	return err
}

func (p *MetadataExposableReadDestinationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableReadDestinationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
//  - InternalServiceError
type MetadataExposableReadDestinationResult struct {
	Success              *shared.DestinationDescription `thrift:"success,0" json:"success,omitempty"`
	EntityError          *shared.EntityNotExistsError   `thrift:"entityError,1" json:"entityError,omitempty"`
	RequestError         *shared.BadRequestError        `thrift:"requestError,2" json:"requestError,omitempty"`
	InternalServiceError *shared.InternalServiceError   `thrift:"internalServiceError,3" json:"internalServiceError,omitempty"`
}

func NewMetadataExposableReadDestinationResult() *MetadataExposableReadDestinationResult {
	return &MetadataExposableReadDestinationResult{}
}

var MetadataExposableReadDestinationResult_Success_DEFAULT *shared.DestinationDescription

func (p *MetadataExposableReadDestinationResult) GetSuccess() *shared.DestinationDescription {
	if !p.IsSetSuccess() {
		return MetadataExposableReadDestinationResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataExposableReadDestinationResult_EntityError_DEFAULT *shared.EntityNotExistsError

func (p *MetadataExposableReadDestinationResult) GetEntityError() *shared.EntityNotExistsError {
	if !p.IsSetEntityError() {
		return MetadataExposableReadDestinationResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var MetadataExposableReadDestinationResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataExposableReadDestinationResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataExposableReadDestinationResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataExposableReadDestinationResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataExposableReadDestinationResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataExposableReadDestinationResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataExposableReadDestinationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataExposableReadDestinationResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *MetadataExposableReadDestinationResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataExposableReadDestinationResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataExposableReadDestinationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableReadDestinationResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &shared.DestinationDescription{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataExposableReadDestinationResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &shared.EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *MetadataExposableReadDestinationResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataExposableReadDestinationResult) readField3(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataExposableReadDestinationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readDestination_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableReadDestinationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadDestinationResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadDestinationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableReadDestinationResult(%+v)", *p)
}

// Attributes:
//  - ListRequest
type MetadataExposableListDestinationsArgs struct {
	ListRequest *shared.ListDestinationsRequest `thrift:"listRequest,1" json:"listRequest"`
}

func NewMetadataExposableListDestinationsArgs() *MetadataExposableListDestinationsArgs {
	return &MetadataExposableListDestinationsArgs{}
}

var MetadataExposableListDestinationsArgs_ListRequest_DEFAULT *shared.ListDestinationsRequest

func (p *MetadataExposableListDestinationsArgs) GetListRequest() *shared.ListDestinationsRequest {
	if !p.IsSetListRequest() {
		return MetadataExposableListDestinationsArgs_ListRequest_DEFAULT
	}
	return p.ListRequest
}
func (p *MetadataExposableListDestinationsArgs) IsSetListRequest() bool {
	return p.ListRequest != nil
}

func (p *MetadataExposableListDestinationsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableListDestinationsArgs) readField1(iprot thrift.TProtocol) error {
	p.ListRequest = &shared.ListDestinationsRequest{}
	if err := p.ListRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ListRequest), err)
	}
	return nil
}

func (p *MetadataExposableListDestinationsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listDestinations_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableListDestinationsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("listRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listRequest: ", p), err)
	}
	if err := p.ListRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ListRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listRequest: ", p), err)
	}
	return err
}

func (p *MetadataExposableListDestinationsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableListDestinationsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalServiceError
type MetadataExposableListDestinationsResult struct {
	Success              *shared.ListDestinationsResult_ `thrift:"success,0" json:"success,omitempty"`
	RequestError         *shared.BadRequestError         `thrift:"requestError,1" json:"requestError,omitempty"`
	InternalServiceError *shared.InternalServiceError    `thrift:"internalServiceError,2" json:"internalServiceError,omitempty"`
}

func NewMetadataExposableListDestinationsResult() *MetadataExposableListDestinationsResult {
	return &MetadataExposableListDestinationsResult{}
}

var MetadataExposableListDestinationsResult_Success_DEFAULT *shared.ListDestinationsResult_

func (p *MetadataExposableListDestinationsResult) GetSuccess() *shared.ListDestinationsResult_ {
	if !p.IsSetSuccess() {
		return MetadataExposableListDestinationsResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataExposableListDestinationsResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataExposableListDestinationsResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataExposableListDestinationsResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataExposableListDestinationsResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataExposableListDestinationsResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataExposableListDestinationsResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataExposableListDestinationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataExposableListDestinationsResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataExposableListDestinationsResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataExposableListDestinationsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableListDestinationsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &shared.ListDestinationsResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataExposableListDestinationsResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataExposableListDestinationsResult) readField2(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataExposableListDestinationsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listDestinations_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableListDestinationsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListDestinationsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListDestinationsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListDestinationsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableListDestinationsResult(%+v)", *p)
}

// Attributes:
//  - ListRequest
type MetadataExposableListDestinationsByUUIDArgs struct {
	ListRequest *shared.ListDestinationsByUUIDRequest `thrift:"listRequest,1" json:"listRequest"`
}

func NewMetadataExposableListDestinationsByUUIDArgs() *MetadataExposableListDestinationsByUUIDArgs {
	return &MetadataExposableListDestinationsByUUIDArgs{}
}

var MetadataExposableListDestinationsByUUIDArgs_ListRequest_DEFAULT *shared.ListDestinationsByUUIDRequest

func (p *MetadataExposableListDestinationsByUUIDArgs) GetListRequest() *shared.ListDestinationsByUUIDRequest {
	if !p.IsSetListRequest() {
		return MetadataExposableListDestinationsByUUIDArgs_ListRequest_DEFAULT
	}
	return p.ListRequest
}
func (p *MetadataExposableListDestinationsByUUIDArgs) IsSetListRequest() bool {
	return p.ListRequest != nil
}

func (p *MetadataExposableListDestinationsByUUIDArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableListDestinationsByUUIDArgs) readField1(iprot thrift.TProtocol) error {
	p.ListRequest = &shared.ListDestinationsByUUIDRequest{}
	if err := p.ListRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ListRequest), err)
	}
	return nil
}

func (p *MetadataExposableListDestinationsByUUIDArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listDestinationsByUUID_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableListDestinationsByUUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("listRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listRequest: ", p), err)
	}
	if err := p.ListRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ListRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listRequest: ", p), err)
	}
	return err
}

func (p *MetadataExposableListDestinationsByUUIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableListDestinationsByUUIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalServiceError
type MetadataExposableListDestinationsByUUIDResult struct {
	Success              *shared.ListDestinationsResult_ `thrift:"success,0" json:"success,omitempty"`
	RequestError         *shared.BadRequestError         `thrift:"requestError,1" json:"requestError,omitempty"`
	InternalServiceError *shared.InternalServiceError    `thrift:"internalServiceError,2" json:"internalServiceError,omitempty"`
}

func NewMetadataExposableListDestinationsByUUIDResult() *MetadataExposableListDestinationsByUUIDResult {
	return &MetadataExposableListDestinationsByUUIDResult{}
}

var MetadataExposableListDestinationsByUUIDResult_Success_DEFAULT *shared.ListDestinationsResult_

func (p *MetadataExposableListDestinationsByUUIDResult) GetSuccess() *shared.ListDestinationsResult_ {
	if !p.IsSetSuccess() {
		return MetadataExposableListDestinationsByUUIDResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataExposableListDestinationsByUUIDResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataExposableListDestinationsByUUIDResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataExposableListDestinationsByUUIDResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataExposableListDestinationsByUUIDResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataExposableListDestinationsByUUIDResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataExposableListDestinationsByUUIDResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataExposableListDestinationsByUUIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataExposableListDestinationsByUUIDResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataExposableListDestinationsByUUIDResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataExposableListDestinationsByUUIDResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableListDestinationsByUUIDResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &shared.ListDestinationsResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataExposableListDestinationsByUUIDResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataExposableListDestinationsByUUIDResult) readField2(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataExposableListDestinationsByUUIDResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listDestinationsByUUID_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableListDestinationsByUUIDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListDestinationsByUUIDResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListDestinationsByUUIDResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListDestinationsByUUIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableListDestinationsByUUIDResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataExposableListExtentsStatsArgs struct {
	Request *shared.ListExtentsStatsRequest `thrift:"request,1" json:"request"`
}

func NewMetadataExposableListExtentsStatsArgs() *MetadataExposableListExtentsStatsArgs {
	return &MetadataExposableListExtentsStatsArgs{}
}

var MetadataExposableListExtentsStatsArgs_Request_DEFAULT *shared.ListExtentsStatsRequest

func (p *MetadataExposableListExtentsStatsArgs) GetRequest() *shared.ListExtentsStatsRequest {
	if !p.IsSetRequest() {
		return MetadataExposableListExtentsStatsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataExposableListExtentsStatsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataExposableListExtentsStatsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableListExtentsStatsArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &shared.ListExtentsStatsRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataExposableListExtentsStatsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listExtentsStats_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableListExtentsStatsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataExposableListExtentsStatsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableListExtentsStatsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalServiceError
type MetadataExposableListExtentsStatsResult struct {
	Success              *shared.ListExtentsStatsResult_ `thrift:"success,0" json:"success,omitempty"`
	RequestError         *shared.BadRequestError         `thrift:"requestError,1" json:"requestError,omitempty"`
	InternalServiceError *shared.InternalServiceError    `thrift:"internalServiceError,2" json:"internalServiceError,omitempty"`
}

func NewMetadataExposableListExtentsStatsResult() *MetadataExposableListExtentsStatsResult {
	return &MetadataExposableListExtentsStatsResult{}
}

var MetadataExposableListExtentsStatsResult_Success_DEFAULT *shared.ListExtentsStatsResult_

func (p *MetadataExposableListExtentsStatsResult) GetSuccess() *shared.ListExtentsStatsResult_ {
	if !p.IsSetSuccess() {
		return MetadataExposableListExtentsStatsResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataExposableListExtentsStatsResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataExposableListExtentsStatsResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataExposableListExtentsStatsResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataExposableListExtentsStatsResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataExposableListExtentsStatsResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataExposableListExtentsStatsResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataExposableListExtentsStatsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataExposableListExtentsStatsResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataExposableListExtentsStatsResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataExposableListExtentsStatsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableListExtentsStatsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &shared.ListExtentsStatsResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataExposableListExtentsStatsResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataExposableListExtentsStatsResult) readField2(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataExposableListExtentsStatsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listExtentsStats_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableListExtentsStatsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListExtentsStatsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListExtentsStatsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListExtentsStatsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableListExtentsStatsResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataExposableListInputHostExtentsStatsArgs struct {
	Request *ListInputHostExtentsStatsRequest `thrift:"request,1" json:"request"`
}

func NewMetadataExposableListInputHostExtentsStatsArgs() *MetadataExposableListInputHostExtentsStatsArgs {
	return &MetadataExposableListInputHostExtentsStatsArgs{}
}

var MetadataExposableListInputHostExtentsStatsArgs_Request_DEFAULT *ListInputHostExtentsStatsRequest

func (p *MetadataExposableListInputHostExtentsStatsArgs) GetRequest() *ListInputHostExtentsStatsRequest {
	if !p.IsSetRequest() {
		return MetadataExposableListInputHostExtentsStatsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataExposableListInputHostExtentsStatsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataExposableListInputHostExtentsStatsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableListInputHostExtentsStatsArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &ListInputHostExtentsStatsRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataExposableListInputHostExtentsStatsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listInputHostExtentsStats_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableListInputHostExtentsStatsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataExposableListInputHostExtentsStatsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableListInputHostExtentsStatsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type MetadataExposableListInputHostExtentsStatsResult struct {
	Success       *ListInputHostExtentsStatsResult_ `thrift:"success,0" json:"success,omitempty"`
	RequestError  *shared.BadRequestError           `thrift:"requestError,1" json:"requestError,omitempty"`
	InternalError *shared.InternalServiceError      `thrift:"internalError,2" json:"internalError,omitempty"`
}

func NewMetadataExposableListInputHostExtentsStatsResult() *MetadataExposableListInputHostExtentsStatsResult {
	return &MetadataExposableListInputHostExtentsStatsResult{}
}

var MetadataExposableListInputHostExtentsStatsResult_Success_DEFAULT *ListInputHostExtentsStatsResult_

func (p *MetadataExposableListInputHostExtentsStatsResult) GetSuccess() *ListInputHostExtentsStatsResult_ {
	if !p.IsSetSuccess() {
		return MetadataExposableListInputHostExtentsStatsResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataExposableListInputHostExtentsStatsResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataExposableListInputHostExtentsStatsResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataExposableListInputHostExtentsStatsResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataExposableListInputHostExtentsStatsResult_InternalError_DEFAULT *shared.InternalServiceError

func (p *MetadataExposableListInputHostExtentsStatsResult) GetInternalError() *shared.InternalServiceError {
	if !p.IsSetInternalError() {
		return MetadataExposableListInputHostExtentsStatsResult_InternalError_DEFAULT
	}
	return p.InternalError
}
func (p *MetadataExposableListInputHostExtentsStatsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataExposableListInputHostExtentsStatsResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataExposableListInputHostExtentsStatsResult) IsSetInternalError() bool {
	return p.InternalError != nil
}

func (p *MetadataExposableListInputHostExtentsStatsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableListInputHostExtentsStatsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ListInputHostExtentsStatsResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataExposableListInputHostExtentsStatsResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataExposableListInputHostExtentsStatsResult) readField2(iprot thrift.TProtocol) error {
	p.InternalError = &shared.InternalServiceError{}
	if err := p.InternalError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
	}
	return nil
}

func (p *MetadataExposableListInputHostExtentsStatsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listInputHostExtentsStats_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableListInputHostExtentsStatsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListInputHostExtentsStatsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListInputHostExtentsStatsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalError() {
		if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err)
		}
		if err := p.InternalError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListInputHostExtentsStatsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableListInputHostExtentsStatsResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataExposableListStoreExtentsStatsArgs struct {
	Request *ListStoreExtentsStatsRequest `thrift:"request,1" json:"request"`
}

func NewMetadataExposableListStoreExtentsStatsArgs() *MetadataExposableListStoreExtentsStatsArgs {
	return &MetadataExposableListStoreExtentsStatsArgs{}
}

var MetadataExposableListStoreExtentsStatsArgs_Request_DEFAULT *ListStoreExtentsStatsRequest

func (p *MetadataExposableListStoreExtentsStatsArgs) GetRequest() *ListStoreExtentsStatsRequest {
	if !p.IsSetRequest() {
		return MetadataExposableListStoreExtentsStatsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataExposableListStoreExtentsStatsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataExposableListStoreExtentsStatsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableListStoreExtentsStatsArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &ListStoreExtentsStatsRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataExposableListStoreExtentsStatsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listStoreExtentsStats_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableListStoreExtentsStatsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataExposableListStoreExtentsStatsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableListStoreExtentsStatsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type MetadataExposableListStoreExtentsStatsResult struct {
	Success       *ListStoreExtentsStatsResult_ `thrift:"success,0" json:"success,omitempty"`
	RequestError  *shared.BadRequestError       `thrift:"requestError,1" json:"requestError,omitempty"`
	InternalError *shared.InternalServiceError  `thrift:"internalError,2" json:"internalError,omitempty"`
}

func NewMetadataExposableListStoreExtentsStatsResult() *MetadataExposableListStoreExtentsStatsResult {
	return &MetadataExposableListStoreExtentsStatsResult{}
}

var MetadataExposableListStoreExtentsStatsResult_Success_DEFAULT *ListStoreExtentsStatsResult_

func (p *MetadataExposableListStoreExtentsStatsResult) GetSuccess() *ListStoreExtentsStatsResult_ {
	if !p.IsSetSuccess() {
		return MetadataExposableListStoreExtentsStatsResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataExposableListStoreExtentsStatsResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataExposableListStoreExtentsStatsResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataExposableListStoreExtentsStatsResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataExposableListStoreExtentsStatsResult_InternalError_DEFAULT *shared.InternalServiceError

func (p *MetadataExposableListStoreExtentsStatsResult) GetInternalError() *shared.InternalServiceError {
	if !p.IsSetInternalError() {
		return MetadataExposableListStoreExtentsStatsResult_InternalError_DEFAULT
	}
	return p.InternalError
}
func (p *MetadataExposableListStoreExtentsStatsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataExposableListStoreExtentsStatsResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataExposableListStoreExtentsStatsResult) IsSetInternalError() bool {
	return p.InternalError != nil
}

func (p *MetadataExposableListStoreExtentsStatsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableListStoreExtentsStatsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ListStoreExtentsStatsResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataExposableListStoreExtentsStatsResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataExposableListStoreExtentsStatsResult) readField2(iprot thrift.TProtocol) error {
	p.InternalError = &shared.InternalServiceError{}
	if err := p.InternalError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
	}
	return nil
}

func (p *MetadataExposableListStoreExtentsStatsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listStoreExtentsStats_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableListStoreExtentsStatsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListStoreExtentsStatsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListStoreExtentsStatsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalError() {
		if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err)
		}
		if err := p.InternalError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListStoreExtentsStatsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableListStoreExtentsStatsResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataExposableReadExtentStatsArgs struct {
	Request *ReadExtentStatsRequest `thrift:"request,1" json:"request"`
}

func NewMetadataExposableReadExtentStatsArgs() *MetadataExposableReadExtentStatsArgs {
	return &MetadataExposableReadExtentStatsArgs{}
}

var MetadataExposableReadExtentStatsArgs_Request_DEFAULT *ReadExtentStatsRequest

func (p *MetadataExposableReadExtentStatsArgs) GetRequest() *ReadExtentStatsRequest {
	if !p.IsSetRequest() {
		return MetadataExposableReadExtentStatsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataExposableReadExtentStatsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataExposableReadExtentStatsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableReadExtentStatsArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &ReadExtentStatsRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataExposableReadExtentStatsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readExtentStats_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableReadExtentStatsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataExposableReadExtentStatsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableReadExtentStatsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type MetadataExposableReadExtentStatsResult struct {
	Success       *ReadExtentStatsResult_      `thrift:"success,0" json:"success,omitempty"`
	RequestError  *shared.BadRequestError      `thrift:"requestError,1" json:"requestError,omitempty"`
	InternalError *shared.InternalServiceError `thrift:"internalError,2" json:"internalError,omitempty"`
}

func NewMetadataExposableReadExtentStatsResult() *MetadataExposableReadExtentStatsResult {
	return &MetadataExposableReadExtentStatsResult{}
}

var MetadataExposableReadExtentStatsResult_Success_DEFAULT *ReadExtentStatsResult_

func (p *MetadataExposableReadExtentStatsResult) GetSuccess() *ReadExtentStatsResult_ {
	if !p.IsSetSuccess() {
		return MetadataExposableReadExtentStatsResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataExposableReadExtentStatsResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataExposableReadExtentStatsResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataExposableReadExtentStatsResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataExposableReadExtentStatsResult_InternalError_DEFAULT *shared.InternalServiceError

func (p *MetadataExposableReadExtentStatsResult) GetInternalError() *shared.InternalServiceError {
	if !p.IsSetInternalError() {
		return MetadataExposableReadExtentStatsResult_InternalError_DEFAULT
	}
	return p.InternalError
}
func (p *MetadataExposableReadExtentStatsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataExposableReadExtentStatsResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataExposableReadExtentStatsResult) IsSetInternalError() bool {
	return p.InternalError != nil
}

func (p *MetadataExposableReadExtentStatsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableReadExtentStatsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ReadExtentStatsResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataExposableReadExtentStatsResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataExposableReadExtentStatsResult) readField2(iprot thrift.TProtocol) error {
	p.InternalError = &shared.InternalServiceError{}
	if err := p.InternalError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
	}
	return nil
}

func (p *MetadataExposableReadExtentStatsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readExtentStats_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableReadExtentStatsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadExtentStatsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadExtentStatsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalError() {
		if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err)
		}
		if err := p.InternalError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadExtentStatsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableReadExtentStatsResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataExposableReadConsumerGroupExtentArgs struct {
	Request *ReadConsumerGroupExtentRequest `thrift:"request,1" json:"request"`
}

func NewMetadataExposableReadConsumerGroupExtentArgs() *MetadataExposableReadConsumerGroupExtentArgs {
	return &MetadataExposableReadConsumerGroupExtentArgs{}
}

var MetadataExposableReadConsumerGroupExtentArgs_Request_DEFAULT *ReadConsumerGroupExtentRequest

func (p *MetadataExposableReadConsumerGroupExtentArgs) GetRequest() *ReadConsumerGroupExtentRequest {
	if !p.IsSetRequest() {
		return MetadataExposableReadConsumerGroupExtentArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataExposableReadConsumerGroupExtentArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataExposableReadConsumerGroupExtentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &ReadConsumerGroupExtentRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readConsumerGroupExtent_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataExposableReadConsumerGroupExtentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableReadConsumerGroupExtentArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type MetadataExposableReadConsumerGroupExtentResult struct {
	Success       *ReadConsumerGroupExtentResult_ `thrift:"success,0" json:"success,omitempty"`
	RequestError  *shared.BadRequestError         `thrift:"requestError,1" json:"requestError,omitempty"`
	InternalError *shared.InternalServiceError    `thrift:"internalError,2" json:"internalError,omitempty"`
}

func NewMetadataExposableReadConsumerGroupExtentResult() *MetadataExposableReadConsumerGroupExtentResult {
	return &MetadataExposableReadConsumerGroupExtentResult{}
}

var MetadataExposableReadConsumerGroupExtentResult_Success_DEFAULT *ReadConsumerGroupExtentResult_

func (p *MetadataExposableReadConsumerGroupExtentResult) GetSuccess() *ReadConsumerGroupExtentResult_ {
	if !p.IsSetSuccess() {
		return MetadataExposableReadConsumerGroupExtentResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataExposableReadConsumerGroupExtentResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataExposableReadConsumerGroupExtentResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataExposableReadConsumerGroupExtentResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataExposableReadConsumerGroupExtentResult_InternalError_DEFAULT *shared.InternalServiceError

func (p *MetadataExposableReadConsumerGroupExtentResult) GetInternalError() *shared.InternalServiceError {
	if !p.IsSetInternalError() {
		return MetadataExposableReadConsumerGroupExtentResult_InternalError_DEFAULT
	}
	return p.InternalError
}
func (p *MetadataExposableReadConsumerGroupExtentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataExposableReadConsumerGroupExtentResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataExposableReadConsumerGroupExtentResult) IsSetInternalError() bool {
	return p.InternalError != nil
}

func (p *MetadataExposableReadConsumerGroupExtentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ReadConsumerGroupExtentResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentResult) readField2(iprot thrift.TProtocol) error {
	p.InternalError = &shared.InternalServiceError{}
	if err := p.InternalError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readConsumerGroupExtent_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadConsumerGroupExtentResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadConsumerGroupExtentResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalError() {
		if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err)
		}
		if err := p.InternalError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadConsumerGroupExtentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableReadConsumerGroupExtentResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataExposableReadConsumerGroupExtentsArgs struct {
	Request *ReadConsumerGroupExtentsRequest `thrift:"request,1" json:"request"`
}

func NewMetadataExposableReadConsumerGroupExtentsArgs() *MetadataExposableReadConsumerGroupExtentsArgs {
	return &MetadataExposableReadConsumerGroupExtentsArgs{}
}

var MetadataExposableReadConsumerGroupExtentsArgs_Request_DEFAULT *ReadConsumerGroupExtentsRequest

func (p *MetadataExposableReadConsumerGroupExtentsArgs) GetRequest() *ReadConsumerGroupExtentsRequest {
	if !p.IsSetRequest() {
		return MetadataExposableReadConsumerGroupExtentsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataExposableReadConsumerGroupExtentsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataExposableReadConsumerGroupExtentsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &ReadConsumerGroupExtentsRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readConsumerGroupExtents_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataExposableReadConsumerGroupExtentsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableReadConsumerGroupExtentsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type MetadataExposableReadConsumerGroupExtentsResult struct {
	Success       *ReadConsumerGroupExtentsResult_ `thrift:"success,0" json:"success,omitempty"`
	RequestError  *shared.BadRequestError          `thrift:"requestError,1" json:"requestError,omitempty"`
	InternalError *shared.InternalServiceError     `thrift:"internalError,2" json:"internalError,omitempty"`
}

func NewMetadataExposableReadConsumerGroupExtentsResult() *MetadataExposableReadConsumerGroupExtentsResult {
	return &MetadataExposableReadConsumerGroupExtentsResult{}
}

var MetadataExposableReadConsumerGroupExtentsResult_Success_DEFAULT *ReadConsumerGroupExtentsResult_

func (p *MetadataExposableReadConsumerGroupExtentsResult) GetSuccess() *ReadConsumerGroupExtentsResult_ {
	if !p.IsSetSuccess() {
		return MetadataExposableReadConsumerGroupExtentsResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataExposableReadConsumerGroupExtentsResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataExposableReadConsumerGroupExtentsResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataExposableReadConsumerGroupExtentsResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataExposableReadConsumerGroupExtentsResult_InternalError_DEFAULT *shared.InternalServiceError

func (p *MetadataExposableReadConsumerGroupExtentsResult) GetInternalError() *shared.InternalServiceError {
	if !p.IsSetInternalError() {
		return MetadataExposableReadConsumerGroupExtentsResult_InternalError_DEFAULT
	}
	return p.InternalError
}
func (p *MetadataExposableReadConsumerGroupExtentsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataExposableReadConsumerGroupExtentsResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataExposableReadConsumerGroupExtentsResult) IsSetInternalError() bool {
	return p.InternalError != nil
}

func (p *MetadataExposableReadConsumerGroupExtentsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ReadConsumerGroupExtentsResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsResult) readField2(iprot thrift.TProtocol) error {
	p.InternalError = &shared.InternalServiceError{}
	if err := p.InternalError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readConsumerGroupExtents_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadConsumerGroupExtentsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadConsumerGroupExtentsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalError() {
		if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err)
		}
		if err := p.InternalError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadConsumerGroupExtentsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableReadConsumerGroupExtentsResult(%+v)", *p)
}

// Attributes:
//  - HostAddr
type MetadataExposableHostAddrToUUIDArgs struct {
	HostAddr string `thrift:"hostAddr,1" json:"hostAddr"`
}

func NewMetadataExposableHostAddrToUUIDArgs() *MetadataExposableHostAddrToUUIDArgs {
	return &MetadataExposableHostAddrToUUIDArgs{}
}

func (p *MetadataExposableHostAddrToUUIDArgs) GetHostAddr() string {
	return p.HostAddr
}
func (p *MetadataExposableHostAddrToUUIDArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableHostAddrToUUIDArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HostAddr = v
	}
	return nil
}

func (p *MetadataExposableHostAddrToUUIDArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("hostAddrToUUID_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableHostAddrToUUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostAddr", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostAddr: ", p), err)
	}
	if err := oprot.WriteString(string(p.HostAddr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hostAddr (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostAddr: ", p), err)
	}
	return err
}

func (p *MetadataExposableHostAddrToUUIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableHostAddrToUUIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - NotExistsError
//  - InternalError
type MetadataExposableHostAddrToUUIDResult struct {
	Success        *string                      `thrift:"success,0" json:"success,omitempty"`
	NotExistsError *shared.EntityNotExistsError `thrift:"notExistsError,1" json:"notExistsError,omitempty"`
	InternalError  *shared.InternalServiceError `thrift:"internalError,2" json:"internalError,omitempty"`
}

func NewMetadataExposableHostAddrToUUIDResult() *MetadataExposableHostAddrToUUIDResult {
	return &MetadataExposableHostAddrToUUIDResult{}
}

var MetadataExposableHostAddrToUUIDResult_Success_DEFAULT string

func (p *MetadataExposableHostAddrToUUIDResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return MetadataExposableHostAddrToUUIDResult_Success_DEFAULT
	}
	return *p.Success
}

var MetadataExposableHostAddrToUUIDResult_NotExistsError_DEFAULT *shared.EntityNotExistsError

func (p *MetadataExposableHostAddrToUUIDResult) GetNotExistsError() *shared.EntityNotExistsError {
	if !p.IsSetNotExistsError() {
		return MetadataExposableHostAddrToUUIDResult_NotExistsError_DEFAULT
	}
	return p.NotExistsError
}

var MetadataExposableHostAddrToUUIDResult_InternalError_DEFAULT *shared.InternalServiceError

func (p *MetadataExposableHostAddrToUUIDResult) GetInternalError() *shared.InternalServiceError {
	if !p.IsSetInternalError() {
		return MetadataExposableHostAddrToUUIDResult_InternalError_DEFAULT
	}
	return p.InternalError
}
func (p *MetadataExposableHostAddrToUUIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataExposableHostAddrToUUIDResult) IsSetNotExistsError() bool {
	return p.NotExistsError != nil
}

func (p *MetadataExposableHostAddrToUUIDResult) IsSetInternalError() bool {
	return p.InternalError != nil
}

func (p *MetadataExposableHostAddrToUUIDResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableHostAddrToUUIDResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *MetadataExposableHostAddrToUUIDResult) readField1(iprot thrift.TProtocol) error {
	p.NotExistsError = &shared.EntityNotExistsError{}
	if err := p.NotExistsError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotExistsError), err)
	}
	return nil
}

func (p *MetadataExposableHostAddrToUUIDResult) readField2(iprot thrift.TProtocol) error {
	p.InternalError = &shared.InternalServiceError{}
	if err := p.InternalError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
	}
	return nil
}

func (p *MetadataExposableHostAddrToUUIDResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("hostAddrToUUID_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableHostAddrToUUIDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableHostAddrToUUIDResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotExistsError() {
		if err := oprot.WriteFieldBegin("notExistsError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:notExistsError: ", p), err)
		}
		if err := p.NotExistsError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotExistsError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:notExistsError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableHostAddrToUUIDResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalError() {
		if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err)
		}
		if err := p.InternalError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableHostAddrToUUIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableHostAddrToUUIDResult(%+v)", *p)
}

// Attributes:
//  - HostUUID
type MetadataExposableUUIDToHostAddrArgs struct {
	HostUUID string `thrift:"hostUUID,1" json:"hostUUID"`
}

func NewMetadataExposableUUIDToHostAddrArgs() *MetadataExposableUUIDToHostAddrArgs {
	return &MetadataExposableUUIDToHostAddrArgs{}
}

func (p *MetadataExposableUUIDToHostAddrArgs) GetHostUUID() string {
	return p.HostUUID
}
func (p *MetadataExposableUUIDToHostAddrArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableUUIDToHostAddrArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HostUUID = v
	}
	return nil
}

func (p *MetadataExposableUUIDToHostAddrArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("uUIDToHostAddr_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableUUIDToHostAddrArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostUUID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostUUID: ", p), err)
	}
	if err := oprot.WriteString(string(p.HostUUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hostUUID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostUUID: ", p), err)
	}
	return err
}

func (p *MetadataExposableUUIDToHostAddrArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableUUIDToHostAddrArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - NotExistsError
//  - InternalError
type MetadataExposableUUIDToHostAddrResult struct {
	Success        *string                      `thrift:"success,0" json:"success,omitempty"`
	NotExistsError *shared.EntityNotExistsError `thrift:"notExistsError,1" json:"notExistsError,omitempty"`
	InternalError  *shared.InternalServiceError `thrift:"internalError,2" json:"internalError,omitempty"`
}

func NewMetadataExposableUUIDToHostAddrResult() *MetadataExposableUUIDToHostAddrResult {
	return &MetadataExposableUUIDToHostAddrResult{}
}

var MetadataExposableUUIDToHostAddrResult_Success_DEFAULT string

func (p *MetadataExposableUUIDToHostAddrResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return MetadataExposableUUIDToHostAddrResult_Success_DEFAULT
	}
	return *p.Success
}

var MetadataExposableUUIDToHostAddrResult_NotExistsError_DEFAULT *shared.EntityNotExistsError

func (p *MetadataExposableUUIDToHostAddrResult) GetNotExistsError() *shared.EntityNotExistsError {
	if !p.IsSetNotExistsError() {
		return MetadataExposableUUIDToHostAddrResult_NotExistsError_DEFAULT
	}
	return p.NotExistsError
}

var MetadataExposableUUIDToHostAddrResult_InternalError_DEFAULT *shared.InternalServiceError

func (p *MetadataExposableUUIDToHostAddrResult) GetInternalError() *shared.InternalServiceError {
	if !p.IsSetInternalError() {
		return MetadataExposableUUIDToHostAddrResult_InternalError_DEFAULT
	}
	return p.InternalError
}
func (p *MetadataExposableUUIDToHostAddrResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataExposableUUIDToHostAddrResult) IsSetNotExistsError() bool {
	return p.NotExistsError != nil
}

func (p *MetadataExposableUUIDToHostAddrResult) IsSetInternalError() bool {
	return p.InternalError != nil
}

func (p *MetadataExposableUUIDToHostAddrResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableUUIDToHostAddrResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *MetadataExposableUUIDToHostAddrResult) readField1(iprot thrift.TProtocol) error {
	p.NotExistsError = &shared.EntityNotExistsError{}
	if err := p.NotExistsError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotExistsError), err)
	}
	return nil
}

func (p *MetadataExposableUUIDToHostAddrResult) readField2(iprot thrift.TProtocol) error {
	p.InternalError = &shared.InternalServiceError{}
	if err := p.InternalError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
	}
	return nil
}

func (p *MetadataExposableUUIDToHostAddrResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("uUIDToHostAddr_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableUUIDToHostAddrResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableUUIDToHostAddrResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotExistsError() {
		if err := oprot.WriteFieldBegin("notExistsError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:notExistsError: ", p), err)
		}
		if err := p.NotExistsError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotExistsError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:notExistsError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableUUIDToHostAddrResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalError() {
		if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err)
		}
		if err := p.InternalError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableUUIDToHostAddrResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableUUIDToHostAddrResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataExposableListHostsArgs struct {
	Request *ListHostsRequest `thrift:"request,1" json:"request"`
}

func NewMetadataExposableListHostsArgs() *MetadataExposableListHostsArgs {
	return &MetadataExposableListHostsArgs{}
}

var MetadataExposableListHostsArgs_Request_DEFAULT *ListHostsRequest

func (p *MetadataExposableListHostsArgs) GetRequest() *ListHostsRequest {
	if !p.IsSetRequest() {
		return MetadataExposableListHostsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataExposableListHostsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataExposableListHostsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableListHostsArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &ListHostsRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataExposableListHostsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listHosts_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableListHostsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataExposableListHostsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableListHostsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type MetadataExposableListHostsResult struct {
	Success       *ListHostsResult_            `thrift:"success,0" json:"success,omitempty"`
	RequestError  *shared.BadRequestError      `thrift:"requestError,1" json:"requestError,omitempty"`
	InternalError *shared.InternalServiceError `thrift:"internalError,2" json:"internalError,omitempty"`
}

func NewMetadataExposableListHostsResult() *MetadataExposableListHostsResult {
	return &MetadataExposableListHostsResult{}
}

var MetadataExposableListHostsResult_Success_DEFAULT *ListHostsResult_

func (p *MetadataExposableListHostsResult) GetSuccess() *ListHostsResult_ {
	if !p.IsSetSuccess() {
		return MetadataExposableListHostsResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataExposableListHostsResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataExposableListHostsResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataExposableListHostsResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataExposableListHostsResult_InternalError_DEFAULT *shared.InternalServiceError

func (p *MetadataExposableListHostsResult) GetInternalError() *shared.InternalServiceError {
	if !p.IsSetInternalError() {
		return MetadataExposableListHostsResult_InternalError_DEFAULT
	}
	return p.InternalError
}
func (p *MetadataExposableListHostsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataExposableListHostsResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataExposableListHostsResult) IsSetInternalError() bool {
	return p.InternalError != nil
}

func (p *MetadataExposableListHostsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableListHostsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ListHostsResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataExposableListHostsResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataExposableListHostsResult) readField2(iprot thrift.TProtocol) error {
	p.InternalError = &shared.InternalServiceError{}
	if err := p.InternalError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
	}
	return nil
}

func (p *MetadataExposableListHostsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listHosts_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableListHostsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListHostsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListHostsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalError() {
		if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err)
		}
		if err := p.InternalError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListHostsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableListHostsResult(%+v)", *p)
}

// Attributes:
//  - ListRequest
type MetadataExposableListAllConsumerGroupsArgs struct {
	ListRequest *ListConsumerGroupRequest `thrift:"listRequest,1" json:"listRequest"`
}

func NewMetadataExposableListAllConsumerGroupsArgs() *MetadataExposableListAllConsumerGroupsArgs {
	return &MetadataExposableListAllConsumerGroupsArgs{}
}

var MetadataExposableListAllConsumerGroupsArgs_ListRequest_DEFAULT *ListConsumerGroupRequest

func (p *MetadataExposableListAllConsumerGroupsArgs) GetListRequest() *ListConsumerGroupRequest {
	if !p.IsSetListRequest() {
		return MetadataExposableListAllConsumerGroupsArgs_ListRequest_DEFAULT
	}
	return p.ListRequest
}
func (p *MetadataExposableListAllConsumerGroupsArgs) IsSetListRequest() bool {
	return p.ListRequest != nil
}

func (p *MetadataExposableListAllConsumerGroupsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableListAllConsumerGroupsArgs) readField1(iprot thrift.TProtocol) error {
	p.ListRequest = &ListConsumerGroupRequest{}
	if err := p.ListRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ListRequest), err)
	}
	return nil
}

func (p *MetadataExposableListAllConsumerGroupsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listAllConsumerGroups_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableListAllConsumerGroupsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("listRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listRequest: ", p), err)
	}
	if err := p.ListRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ListRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listRequest: ", p), err)
	}
	return err
}

func (p *MetadataExposableListAllConsumerGroupsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableListAllConsumerGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type MetadataExposableListAllConsumerGroupsResult struct {
	Success       *ListConsumerGroupResult_    `thrift:"success,0" json:"success,omitempty"`
	RequestError  *shared.BadRequestError      `thrift:"requestError,1" json:"requestError,omitempty"`
	InternalError *shared.InternalServiceError `thrift:"internalError,2" json:"internalError,omitempty"`
}

func NewMetadataExposableListAllConsumerGroupsResult() *MetadataExposableListAllConsumerGroupsResult {
	return &MetadataExposableListAllConsumerGroupsResult{}
}

var MetadataExposableListAllConsumerGroupsResult_Success_DEFAULT *ListConsumerGroupResult_

func (p *MetadataExposableListAllConsumerGroupsResult) GetSuccess() *ListConsumerGroupResult_ {
	if !p.IsSetSuccess() {
		return MetadataExposableListAllConsumerGroupsResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataExposableListAllConsumerGroupsResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataExposableListAllConsumerGroupsResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataExposableListAllConsumerGroupsResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataExposableListAllConsumerGroupsResult_InternalError_DEFAULT *shared.InternalServiceError

func (p *MetadataExposableListAllConsumerGroupsResult) GetInternalError() *shared.InternalServiceError {
	if !p.IsSetInternalError() {
		return MetadataExposableListAllConsumerGroupsResult_InternalError_DEFAULT
	}
	return p.InternalError
}
func (p *MetadataExposableListAllConsumerGroupsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataExposableListAllConsumerGroupsResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataExposableListAllConsumerGroupsResult) IsSetInternalError() bool {
	return p.InternalError != nil
}

func (p *MetadataExposableListAllConsumerGroupsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableListAllConsumerGroupsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ListConsumerGroupResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataExposableListAllConsumerGroupsResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataExposableListAllConsumerGroupsResult) readField2(iprot thrift.TProtocol) error {
	p.InternalError = &shared.InternalServiceError{}
	if err := p.InternalError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
	}
	return nil
}

func (p *MetadataExposableListAllConsumerGroupsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listAllConsumerGroups_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableListAllConsumerGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListAllConsumerGroupsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListAllConsumerGroupsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalError() {
		if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err)
		}
		if err := p.InternalError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListAllConsumerGroupsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableListAllConsumerGroupsResult(%+v)", *p)
}

// Attributes:
//  - ListRequest
type MetadataExposableListEntityOpsArgs struct {
	ListRequest *ListEntityOpsRequest `thrift:"listRequest,1" json:"listRequest"`
}

func NewMetadataExposableListEntityOpsArgs() *MetadataExposableListEntityOpsArgs {
	return &MetadataExposableListEntityOpsArgs{}
}

var MetadataExposableListEntityOpsArgs_ListRequest_DEFAULT *ListEntityOpsRequest

func (p *MetadataExposableListEntityOpsArgs) GetListRequest() *ListEntityOpsRequest {
	if !p.IsSetListRequest() {
		return MetadataExposableListEntityOpsArgs_ListRequest_DEFAULT
	}
	return p.ListRequest
}
func (p *MetadataExposableListEntityOpsArgs) IsSetListRequest() bool {
	return p.ListRequest != nil
}

func (p *MetadataExposableListEntityOpsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableListEntityOpsArgs) readField1(iprot thrift.TProtocol) error {
	p.ListRequest = &ListEntityOpsRequest{}
	if err := p.ListRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ListRequest), err)
	}
	return nil
}

func (p *MetadataExposableListEntityOpsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListEntityOps_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableListEntityOpsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("listRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listRequest: ", p), err)
	}
	if err := p.ListRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ListRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listRequest: ", p), err)
	}
	return err
}

func (p *MetadataExposableListEntityOpsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableListEntityOpsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type MetadataExposableListEntityOpsResult struct {
	Success       *ListEntityOpsResult_        `thrift:"success,0" json:"success,omitempty"`
	RequestError  *shared.BadRequestError      `thrift:"requestError,1" json:"requestError,omitempty"`
	InternalError *shared.InternalServiceError `thrift:"internalError,2" json:"internalError,omitempty"`
}

func NewMetadataExposableListEntityOpsResult() *MetadataExposableListEntityOpsResult {
	return &MetadataExposableListEntityOpsResult{}
}

var MetadataExposableListEntityOpsResult_Success_DEFAULT *ListEntityOpsResult_

func (p *MetadataExposableListEntityOpsResult) GetSuccess() *ListEntityOpsResult_ {
	if !p.IsSetSuccess() {
		return MetadataExposableListEntityOpsResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataExposableListEntityOpsResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataExposableListEntityOpsResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataExposableListEntityOpsResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataExposableListEntityOpsResult_InternalError_DEFAULT *shared.InternalServiceError

func (p *MetadataExposableListEntityOpsResult) GetInternalError() *shared.InternalServiceError {
	if !p.IsSetInternalError() {
		return MetadataExposableListEntityOpsResult_InternalError_DEFAULT
	}
	return p.InternalError
}
func (p *MetadataExposableListEntityOpsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataExposableListEntityOpsResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataExposableListEntityOpsResult) IsSetInternalError() bool {
	return p.InternalError != nil
}

func (p *MetadataExposableListEntityOpsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableListEntityOpsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ListEntityOpsResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataExposableListEntityOpsResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataExposableListEntityOpsResult) readField2(iprot thrift.TProtocol) error {
	p.InternalError = &shared.InternalServiceError{}
	if err := p.InternalError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
	}
	return nil
}

func (p *MetadataExposableListEntityOpsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListEntityOps_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableListEntityOpsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListEntityOpsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListEntityOpsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalError() {
		if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err)
		}
		if err := p.InternalError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListEntityOpsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableListEntityOpsResult(%+v)", *p)
}

// Attributes:
//  - ListRequest
type MetadataExposableListConsumerGroupsArgs struct {
	ListRequest *ListConsumerGroupRequest `thrift:"listRequest,1" json:"listRequest"`
}

func NewMetadataExposableListConsumerGroupsArgs() *MetadataExposableListConsumerGroupsArgs {
	return &MetadataExposableListConsumerGroupsArgs{}
}

var MetadataExposableListConsumerGroupsArgs_ListRequest_DEFAULT *ListConsumerGroupRequest

func (p *MetadataExposableListConsumerGroupsArgs) GetListRequest() *ListConsumerGroupRequest {
	if !p.IsSetListRequest() {
		return MetadataExposableListConsumerGroupsArgs_ListRequest_DEFAULT
	}
	return p.ListRequest
}
func (p *MetadataExposableListConsumerGroupsArgs) IsSetListRequest() bool {
	return p.ListRequest != nil
}

func (p *MetadataExposableListConsumerGroupsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableListConsumerGroupsArgs) readField1(iprot thrift.TProtocol) error {
	p.ListRequest = &ListConsumerGroupRequest{}
	if err := p.ListRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ListRequest), err)
	}
	return nil
}

func (p *MetadataExposableListConsumerGroupsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listConsumerGroups_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableListConsumerGroupsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("listRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listRequest: ", p), err)
	}
	if err := p.ListRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ListRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listRequest: ", p), err)
	}
	return err
}

func (p *MetadataExposableListConsumerGroupsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableListConsumerGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type MetadataExposableListConsumerGroupsResult struct {
	Success       *ListConsumerGroupResult_    `thrift:"success,0" json:"success,omitempty"`
	RequestError  *shared.BadRequestError      `thrift:"requestError,1" json:"requestError,omitempty"`
	InternalError *shared.InternalServiceError `thrift:"internalError,2" json:"internalError,omitempty"`
}

func NewMetadataExposableListConsumerGroupsResult() *MetadataExposableListConsumerGroupsResult {
	return &MetadataExposableListConsumerGroupsResult{}
}

var MetadataExposableListConsumerGroupsResult_Success_DEFAULT *ListConsumerGroupResult_

func (p *MetadataExposableListConsumerGroupsResult) GetSuccess() *ListConsumerGroupResult_ {
	if !p.IsSetSuccess() {
		return MetadataExposableListConsumerGroupsResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataExposableListConsumerGroupsResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataExposableListConsumerGroupsResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataExposableListConsumerGroupsResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataExposableListConsumerGroupsResult_InternalError_DEFAULT *shared.InternalServiceError

func (p *MetadataExposableListConsumerGroupsResult) GetInternalError() *shared.InternalServiceError {
	if !p.IsSetInternalError() {
		return MetadataExposableListConsumerGroupsResult_InternalError_DEFAULT
	}
	return p.InternalError
}
func (p *MetadataExposableListConsumerGroupsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataExposableListConsumerGroupsResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataExposableListConsumerGroupsResult) IsSetInternalError() bool {
	return p.InternalError != nil
}

func (p *MetadataExposableListConsumerGroupsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableListConsumerGroupsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ListConsumerGroupResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataExposableListConsumerGroupsResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataExposableListConsumerGroupsResult) readField2(iprot thrift.TProtocol) error {
	p.InternalError = &shared.InternalServiceError{}
	if err := p.InternalError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
	}
	return nil
}

func (p *MetadataExposableListConsumerGroupsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listConsumerGroups_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableListConsumerGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListConsumerGroupsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListConsumerGroupsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalError() {
		if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err)
		}
		if err := p.InternalError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableListConsumerGroupsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableListConsumerGroupsResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs struct {
	Request *ReadConsumerGroupExtentsByExtUUIDRequest `thrift:"request,1" json:"request"`
}

func NewMetadataExposableReadConsumerGroupExtentsByExtUUIDArgs() *MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs {
	return &MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs{}
}

var MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs_Request_DEFAULT *ReadConsumerGroupExtentsByExtUUIDRequest

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs) GetRequest() *ReadConsumerGroupExtentsByExtUUIDRequest {
	if !p.IsSetRequest() {
		return MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &ReadConsumerGroupExtentsByExtUUIDRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readConsumerGroupExtentsByExtUUID_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type MetadataExposableReadConsumerGroupExtentsByExtUUIDResult struct {
	Success       *ReadConsumerGroupExtentsByExtUUIDResult_ `thrift:"success,0" json:"success,omitempty"`
	RequestError  *shared.BadRequestError                   `thrift:"requestError,1" json:"requestError,omitempty"`
	InternalError *shared.InternalServiceError              `thrift:"internalError,2" json:"internalError,omitempty"`
}

func NewMetadataExposableReadConsumerGroupExtentsByExtUUIDResult() *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult {
	return &MetadataExposableReadConsumerGroupExtentsByExtUUIDResult{}
}

var MetadataExposableReadConsumerGroupExtentsByExtUUIDResult_Success_DEFAULT *ReadConsumerGroupExtentsByExtUUIDResult_

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) GetSuccess() *ReadConsumerGroupExtentsByExtUUIDResult_ {
	if !p.IsSetSuccess() {
		return MetadataExposableReadConsumerGroupExtentsByExtUUIDResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataExposableReadConsumerGroupExtentsByExtUUIDResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataExposableReadConsumerGroupExtentsByExtUUIDResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataExposableReadConsumerGroupExtentsByExtUUIDResult_InternalError_DEFAULT *shared.InternalServiceError

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) GetInternalError() *shared.InternalServiceError {
	if !p.IsSetInternalError() {
		return MetadataExposableReadConsumerGroupExtentsByExtUUIDResult_InternalError_DEFAULT
	}
	return p.InternalError
}
func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) IsSetInternalError() bool {
	return p.InternalError != nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ReadConsumerGroupExtentsByExtUUIDResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) readField2(iprot thrift.TProtocol) error {
	p.InternalError = &shared.InternalServiceError{}
	if err := p.InternalError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readConsumerGroupExtentsByExtUUID_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalError() {
		if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err)
		}
		if err := p.InternalError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableReadConsumerGroupExtentsByExtUUIDResult(%+v)", *p)
}

// Attributes:
//  - GetRequest
type MetadataExposableReadConsumerGroupArgs struct {
	GetRequest *ReadConsumerGroupRequest `thrift:"getRequest,1" json:"getRequest"`
}

func NewMetadataExposableReadConsumerGroupArgs() *MetadataExposableReadConsumerGroupArgs {
	return &MetadataExposableReadConsumerGroupArgs{}
}

var MetadataExposableReadConsumerGroupArgs_GetRequest_DEFAULT *ReadConsumerGroupRequest

func (p *MetadataExposableReadConsumerGroupArgs) GetGetRequest() *ReadConsumerGroupRequest {
	if !p.IsSetGetRequest() {
		return MetadataExposableReadConsumerGroupArgs_GetRequest_DEFAULT
	}
	return p.GetRequest
}
func (p *MetadataExposableReadConsumerGroupArgs) IsSetGetRequest() bool {
	return p.GetRequest != nil
}

func (p *MetadataExposableReadConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupArgs) readField1(iprot thrift.TProtocol) error {
	p.GetRequest = &ReadConsumerGroupRequest{}
	if err := p.GetRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetRequest), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readConsumerGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("getRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getRequest: ", p), err)
	}
	if err := p.GetRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getRequest: ", p), err)
	}
	return err
}

func (p *MetadataExposableReadConsumerGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableReadConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
//  - InternalServiceError
type MetadataExposableReadConsumerGroupResult struct {
	Success              *shared.ConsumerGroupDescription `thrift:"success,0" json:"success,omitempty"`
	EntityError          *shared.EntityNotExistsError     `thrift:"entityError,1" json:"entityError,omitempty"`
	RequestError         *shared.BadRequestError          `thrift:"requestError,2" json:"requestError,omitempty"`
	InternalServiceError *shared.InternalServiceError     `thrift:"internalServiceError,3" json:"internalServiceError,omitempty"`
}

func NewMetadataExposableReadConsumerGroupResult() *MetadataExposableReadConsumerGroupResult {
	return &MetadataExposableReadConsumerGroupResult{}
}

var MetadataExposableReadConsumerGroupResult_Success_DEFAULT *shared.ConsumerGroupDescription

func (p *MetadataExposableReadConsumerGroupResult) GetSuccess() *shared.ConsumerGroupDescription {
	if !p.IsSetSuccess() {
		return MetadataExposableReadConsumerGroupResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataExposableReadConsumerGroupResult_EntityError_DEFAULT *shared.EntityNotExistsError

func (p *MetadataExposableReadConsumerGroupResult) GetEntityError() *shared.EntityNotExistsError {
	if !p.IsSetEntityError() {
		return MetadataExposableReadConsumerGroupResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var MetadataExposableReadConsumerGroupResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataExposableReadConsumerGroupResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataExposableReadConsumerGroupResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataExposableReadConsumerGroupResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataExposableReadConsumerGroupResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataExposableReadConsumerGroupResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataExposableReadConsumerGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataExposableReadConsumerGroupResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *MetadataExposableReadConsumerGroupResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataExposableReadConsumerGroupResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataExposableReadConsumerGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &shared.ConsumerGroupDescription{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupResult) readField1(iprot thrift.TProtocol) error {
	p.EntityError = &shared.EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupResult) readField3(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readConsumerGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadConsumerGroupResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadConsumerGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableReadConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataExposableReadConsumerGroupByUUIDArgs struct {
	Request *ReadConsumerGroupRequest `thrift:"request,1" json:"request"`
}

func NewMetadataExposableReadConsumerGroupByUUIDArgs() *MetadataExposableReadConsumerGroupByUUIDArgs {
	return &MetadataExposableReadConsumerGroupByUUIDArgs{}
}

var MetadataExposableReadConsumerGroupByUUIDArgs_Request_DEFAULT *ReadConsumerGroupRequest

func (p *MetadataExposableReadConsumerGroupByUUIDArgs) GetRequest() *ReadConsumerGroupRequest {
	if !p.IsSetRequest() {
		return MetadataExposableReadConsumerGroupByUUIDArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataExposableReadConsumerGroupByUUIDArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &ReadConsumerGroupRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readConsumerGroupByUUID_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataExposableReadConsumerGroupByUUIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableReadConsumerGroupByUUIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - EntityError
//  - InternalServiceError
type MetadataExposableReadConsumerGroupByUUIDResult struct {
	Success              *shared.ConsumerGroupDescription `thrift:"success,0" json:"success,omitempty"`
	RequestError         *shared.BadRequestError          `thrift:"requestError,1" json:"requestError,omitempty"`
	EntityError          *shared.EntityNotExistsError     `thrift:"entityError,2" json:"entityError,omitempty"`
	InternalServiceError *shared.InternalServiceError     `thrift:"internalServiceError,3" json:"internalServiceError,omitempty"`
}

func NewMetadataExposableReadConsumerGroupByUUIDResult() *MetadataExposableReadConsumerGroupByUUIDResult {
	return &MetadataExposableReadConsumerGroupByUUIDResult{}
}

var MetadataExposableReadConsumerGroupByUUIDResult_Success_DEFAULT *shared.ConsumerGroupDescription

func (p *MetadataExposableReadConsumerGroupByUUIDResult) GetSuccess() *shared.ConsumerGroupDescription {
	if !p.IsSetSuccess() {
		return MetadataExposableReadConsumerGroupByUUIDResult_Success_DEFAULT
	}
	return p.Success
}

var MetadataExposableReadConsumerGroupByUUIDResult_RequestError_DEFAULT *shared.BadRequestError

func (p *MetadataExposableReadConsumerGroupByUUIDResult) GetRequestError() *shared.BadRequestError {
	if !p.IsSetRequestError() {
		return MetadataExposableReadConsumerGroupByUUIDResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var MetadataExposableReadConsumerGroupByUUIDResult_EntityError_DEFAULT *shared.EntityNotExistsError

func (p *MetadataExposableReadConsumerGroupByUUIDResult) GetEntityError() *shared.EntityNotExistsError {
	if !p.IsSetEntityError() {
		return MetadataExposableReadConsumerGroupByUUIDResult_EntityError_DEFAULT
	}
	return p.EntityError
}

var MetadataExposableReadConsumerGroupByUUIDResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *MetadataExposableReadConsumerGroupByUUIDResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return MetadataExposableReadConsumerGroupByUUIDResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *MetadataExposableReadConsumerGroupByUUIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) IsSetEntityError() bool {
	return p.EntityError != nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &shared.ConsumerGroupDescription{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) readField1(iprot thrift.TProtocol) error {
	p.RequestError = &shared.BadRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) readField2(iprot thrift.TProtocol) error {
	p.EntityError = &shared.EntityNotExistsError{}
	if err := p.EntityError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) readField3(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readConsumerGroupByUUID_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityError() {
		if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entityError: ", p), err)
		}
		if err := p.EntityError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entityError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableReadConsumerGroupByUUIDResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataExposableUpdateServiceConfigArgs struct {
	Request *UpdateServiceConfigRequest `thrift:"request,1" json:"request"`
}

func NewMetadataExposableUpdateServiceConfigArgs() *MetadataExposableUpdateServiceConfigArgs {
	return &MetadataExposableUpdateServiceConfigArgs{}
}

var MetadataExposableUpdateServiceConfigArgs_Request_DEFAULT *UpdateServiceConfigRequest

func (p *MetadataExposableUpdateServiceConfigArgs) GetRequest() *UpdateServiceConfigRequest {
	if !p.IsSetRequest() {
		return MetadataExposableUpdateServiceConfigArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MetadataExposableUpdateServiceConfigArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MetadataExposableUpdateServiceConfigArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableUpdateServiceConfigArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &UpdateServiceConfigRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *MetadataExposableUpdateServiceConfigArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateServiceConfig_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableUpdateServiceConfigArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *MetadataExposableUpdateServiceConfigArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableUpdateServiceConfigArgs(%+v)", *p)
}

// Attributes:
//  - Error
type MetadataExposableUpdateServiceConfigResult struct {
	Error *shared.InternalServiceError `thrift:"error,1" json:"error,omitempty"`
}

func NewMetadataExposableUpdateServiceConfigResult() *MetadataExposableUpdateServiceConfigResult {
	return &MetadataExposableUpdateServiceConfigResult{}
}

var MetadataExposableUpdateServiceConfigResult_Error_DEFAULT *shared.InternalServiceError

func (p *MetadataExposableUpdateServiceConfigResult) GetError() *shared.InternalServiceError {
	if !p.IsSetError() {
		return MetadataExposableUpdateServiceConfigResult_Error_DEFAULT
	}
	return p.Error
}
func (p *MetadataExposableUpdateServiceConfigResult) IsSetError() bool {
	return p.Error != nil
}

func (p *MetadataExposableUpdateServiceConfigResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetadataExposableUpdateServiceConfigResult) readField1(iprot thrift.TProtocol) error {
	p.Error = &shared.InternalServiceError{}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *MetadataExposableUpdateServiceConfigResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateServiceConfig_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetadataExposableUpdateServiceConfigResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
		}
	}
	return err
}

func (p *MetadataExposableUpdateServiceConfigResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataExposableUpdateServiceConfigResult(%+v)", *p)
}
