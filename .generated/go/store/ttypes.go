// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package store

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/cherami-thrift/.generated/go/cherami"
	"github.com/uber/cherami-thrift/.generated/go/shared"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = cherami.GoUnusedProtection__
var _ = shared.GoUnusedProtection__
var GoUnusedProtection__ int

type ReadMessageContentType int64

const (
	ReadMessageContentType_MESSAGE ReadMessageContentType = 0
	ReadMessageContentType_SEALED  ReadMessageContentType = 1
	ReadMessageContentType_ERROR   ReadMessageContentType = 2
)

func (p ReadMessageContentType) String() string {
	switch p {
	case ReadMessageContentType_MESSAGE:
		return "MESSAGE"
	case ReadMessageContentType_SEALED:
		return "SEALED"
	case ReadMessageContentType_ERROR:
		return "ERROR"
	}
	return "<UNSET>"
}

func ReadMessageContentTypeFromString(s string) (ReadMessageContentType, error) {
	switch s {
	case "MESSAGE":
		return ReadMessageContentType_MESSAGE, nil
	case "SEALED":
		return ReadMessageContentType_SEALED, nil
	case "ERROR":
		return ReadMessageContentType_ERROR, nil
	}
	return ReadMessageContentType(0), fmt.Errorf("not a valid ReadMessageContentType string")
}

func ReadMessageContentTypePtr(v ReadMessageContentType) *ReadMessageContentType { return &v }

func (p ReadMessageContentType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ReadMessageContentType) UnmarshalText(text []byte) error {
	q, err := ReadMessageContentTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Attributes:
//  - Message
type BadStoreRequestError struct {
	Message string `thrift:"message,1,required" json:"message"`
}

func NewBadStoreRequestError() *BadStoreRequestError {
	return &BadStoreRequestError{}
}

func (p *BadStoreRequestError) GetMessage() string {
	return p.Message
}
func (p *BadStoreRequestError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMessage bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetMessage = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMessage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"))
	}
	return nil
}

func (p *BadStoreRequestError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *BadStoreRequestError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BadStoreRequestError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BadStoreRequestError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *BadStoreRequestError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BadStoreRequestError(%+v)", *p)
}

func (p *BadStoreRequestError) Error() string {
	return p.String()
}

// Attributes:
//  - Message
type StoreServiceError struct {
	Message string `thrift:"message,1,required" json:"message"`
}

func NewStoreServiceError() *StoreServiceError {
	return &StoreServiceError{}
}

func (p *StoreServiceError) GetMessage() string {
	return p.Message
}
func (p *StoreServiceError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMessage bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetMessage = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMessage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"))
	}
	return nil
}

func (p *StoreServiceError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *StoreServiceError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StoreServiceError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StoreServiceError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *StoreServiceError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StoreServiceError(%+v)", *p)
}

func (p *StoreServiceError) Error() string {
	return p.String()
}

// Attributes:
//  - Message
type InvalidStoreAddressError struct {
	Message string `thrift:"message,1,required" json:"message"`
}

func NewInvalidStoreAddressError() *InvalidStoreAddressError {
	return &InvalidStoreAddressError{}
}

func (p *InvalidStoreAddressError) GetMessage() string {
	return p.Message
}
func (p *InvalidStoreAddressError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMessage bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetMessage = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMessage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"))
	}
	return nil
}

func (p *InvalidStoreAddressError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *InvalidStoreAddressError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InvalidStoreAddressError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InvalidStoreAddressError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *InvalidStoreAddressError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidStoreAddressError(%+v)", *p)
}

func (p *InvalidStoreAddressError) Error() string {
	return p.String()
}

// Attributes:
//  - ExtentUUID
//  - SequenceNumber
//  - Message
type ExtentSealedError struct {
	ExtentUUID     *string `thrift:"extentUUID,1" json:"extentUUID,omitempty"`
	SequenceNumber *int64  `thrift:"sequenceNumber,2" json:"sequenceNumber,omitempty"`
	Message        string  `thrift:"message,3,required" json:"message"`
}

func NewExtentSealedError() *ExtentSealedError {
	return &ExtentSealedError{}
}

var ExtentSealedError_ExtentUUID_DEFAULT string

func (p *ExtentSealedError) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return ExtentSealedError_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var ExtentSealedError_SequenceNumber_DEFAULT int64

func (p *ExtentSealedError) GetSequenceNumber() int64 {
	if !p.IsSetSequenceNumber() {
		return ExtentSealedError_SequenceNumber_DEFAULT
	}
	return *p.SequenceNumber
}

func (p *ExtentSealedError) GetMessage() string {
	return p.Message
}
func (p *ExtentSealedError) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *ExtentSealedError) IsSetSequenceNumber() bool {
	return p.SequenceNumber != nil
}

func (p *ExtentSealedError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMessage bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetMessage = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMessage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"))
	}
	return nil
}

func (p *ExtentSealedError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *ExtentSealedError) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SequenceNumber = &v
	}
	return nil
}

func (p *ExtentSealedError) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *ExtentSealedError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExtentSealedError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExtentSealedError) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *ExtentSealedError) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSequenceNumber() {
		if err := oprot.WriteFieldBegin("sequenceNumber", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sequenceNumber: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SequenceNumber)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sequenceNumber (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sequenceNumber: ", p), err)
		}
	}
	return err
}

func (p *ExtentSealedError) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err)
	}
	return err
}

func (p *ExtentSealedError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExtentSealedError(%+v)", *p)
}

func (p *ExtentSealedError) Error() string {
	return p.String()
}

// Attributes:
//  - ExtentUUID
//  - Message
type ExtentNotFoundError struct {
	ExtentUUID *string `thrift:"extentUUID,1" json:"extentUUID,omitempty"`
	Message    string  `thrift:"message,2,required" json:"message"`
}

func NewExtentNotFoundError() *ExtentNotFoundError {
	return &ExtentNotFoundError{}
}

var ExtentNotFoundError_ExtentUUID_DEFAULT string

func (p *ExtentNotFoundError) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return ExtentNotFoundError_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

func (p *ExtentNotFoundError) GetMessage() string {
	return p.Message
}
func (p *ExtentNotFoundError) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *ExtentNotFoundError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMessage bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetMessage = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMessage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"))
	}
	return nil
}

func (p *ExtentNotFoundError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *ExtentNotFoundError) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *ExtentNotFoundError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExtentNotFoundError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExtentNotFoundError) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *ExtentNotFoundError) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
	}
	return err
}

func (p *ExtentNotFoundError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExtentNotFoundError(%+v)", *p)
}

func (p *ExtentNotFoundError) Error() string {
	return p.String()
}

// Attributes:
//  - ExtentUUID
//  - Message
type NoMoreMessagesError struct {
	ExtentUUID string `thrift:"extentUUID,1,required" json:"extentUUID"`
	// unused field # 2
	Message string `thrift:"message,3,required" json:"message"`
}

func NewNoMoreMessagesError() *NoMoreMessagesError {
	return &NoMoreMessagesError{}
}

func (p *NoMoreMessagesError) GetExtentUUID() string {
	return p.ExtentUUID
}

func (p *NoMoreMessagesError) GetMessage() string {
	return p.Message
}
func (p *NoMoreMessagesError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetExtentUUID bool = false
	var issetMessage bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetExtentUUID = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetMessage = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetExtentUUID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExtentUUID is not set"))
	}
	if !issetMessage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"))
	}
	return nil
}

func (p *NoMoreMessagesError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ExtentUUID = v
	}
	return nil
}

func (p *NoMoreMessagesError) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *NoMoreMessagesError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoMoreMessagesError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoMoreMessagesError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentUUID: ", p), err)
	}
	if err := oprot.WriteString(string(p.ExtentUUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.extentUUID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentUUID: ", p), err)
	}
	return err
}

func (p *NoMoreMessagesError) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err)
	}
	return err
}

func (p *NoMoreMessagesError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoMoreMessagesError(%+v)", *p)
}

func (p *NoMoreMessagesError) Error() string {
	return p.String()
}

// Attributes:
//  - ExtentUUID
//  - RequestedSequenceNumber
//  - LastSequenceNumber
//  - Message
type ExtentFailedToSealError struct {
	ExtentUUID              *string `thrift:"extentUUID,1" json:"extentUUID,omitempty"`
	RequestedSequenceNumber *int64  `thrift:"requestedSequenceNumber,2" json:"requestedSequenceNumber,omitempty"`
	LastSequenceNumber      *int64  `thrift:"lastSequenceNumber,3" json:"lastSequenceNumber,omitempty"`
	Message                 string  `thrift:"message,4,required" json:"message"`
}

func NewExtentFailedToSealError() *ExtentFailedToSealError {
	return &ExtentFailedToSealError{}
}

var ExtentFailedToSealError_ExtentUUID_DEFAULT string

func (p *ExtentFailedToSealError) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return ExtentFailedToSealError_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var ExtentFailedToSealError_RequestedSequenceNumber_DEFAULT int64

func (p *ExtentFailedToSealError) GetRequestedSequenceNumber() int64 {
	if !p.IsSetRequestedSequenceNumber() {
		return ExtentFailedToSealError_RequestedSequenceNumber_DEFAULT
	}
	return *p.RequestedSequenceNumber
}

var ExtentFailedToSealError_LastSequenceNumber_DEFAULT int64

func (p *ExtentFailedToSealError) GetLastSequenceNumber() int64 {
	if !p.IsSetLastSequenceNumber() {
		return ExtentFailedToSealError_LastSequenceNumber_DEFAULT
	}
	return *p.LastSequenceNumber
}

func (p *ExtentFailedToSealError) GetMessage() string {
	return p.Message
}
func (p *ExtentFailedToSealError) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *ExtentFailedToSealError) IsSetRequestedSequenceNumber() bool {
	return p.RequestedSequenceNumber != nil
}

func (p *ExtentFailedToSealError) IsSetLastSequenceNumber() bool {
	return p.LastSequenceNumber != nil
}

func (p *ExtentFailedToSealError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMessage bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetMessage = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMessage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"))
	}
	return nil
}

func (p *ExtentFailedToSealError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *ExtentFailedToSealError) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestedSequenceNumber = &v
	}
	return nil
}

func (p *ExtentFailedToSealError) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LastSequenceNumber = &v
	}
	return nil
}

func (p *ExtentFailedToSealError) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *ExtentFailedToSealError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExtentFailedToSealError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExtentFailedToSealError) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *ExtentFailedToSealError) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedSequenceNumber() {
		if err := oprot.WriteFieldBegin("requestedSequenceNumber", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestedSequenceNumber: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RequestedSequenceNumber)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requestedSequenceNumber (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestedSequenceNumber: ", p), err)
		}
	}
	return err
}

func (p *ExtentFailedToSealError) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastSequenceNumber() {
		if err := oprot.WriteFieldBegin("lastSequenceNumber", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastSequenceNumber: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.LastSequenceNumber)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lastSequenceNumber (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastSequenceNumber: ", p), err)
		}
	}
	return err
}

func (p *ExtentFailedToSealError) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:message: ", p), err)
	}
	return err
}

func (p *ExtentFailedToSealError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExtentFailedToSealError(%+v)", *p)
}

func (p *ExtentFailedToSealError) Error() string {
	return p.String()
}

// Attributes:
//  - SequenceNumber
//  - EnqueueTimeUtc
//  - Payload
//  - FullyReplicatedWatermark
type AppendMessage struct {
	SequenceNumber           *int64              `thrift:"sequenceNumber,1" json:"sequenceNumber,omitempty"`
	EnqueueTimeUtc           *int64              `thrift:"enqueueTimeUtc,2" json:"enqueueTimeUtc,omitempty"`
	Payload                  *cherami.PutMessage `thrift:"payload,3" json:"payload,omitempty"`
	FullyReplicatedWatermark *int64              `thrift:"fullyReplicatedWatermark,4" json:"fullyReplicatedWatermark,omitempty"`
}

func NewAppendMessage() *AppendMessage {
	return &AppendMessage{}
}

var AppendMessage_SequenceNumber_DEFAULT int64

func (p *AppendMessage) GetSequenceNumber() int64 {
	if !p.IsSetSequenceNumber() {
		return AppendMessage_SequenceNumber_DEFAULT
	}
	return *p.SequenceNumber
}

var AppendMessage_EnqueueTimeUtc_DEFAULT int64

func (p *AppendMessage) GetEnqueueTimeUtc() int64 {
	if !p.IsSetEnqueueTimeUtc() {
		return AppendMessage_EnqueueTimeUtc_DEFAULT
	}
	return *p.EnqueueTimeUtc
}

var AppendMessage_Payload_DEFAULT *cherami.PutMessage

func (p *AppendMessage) GetPayload() *cherami.PutMessage {
	if !p.IsSetPayload() {
		return AppendMessage_Payload_DEFAULT
	}
	return p.Payload
}

var AppendMessage_FullyReplicatedWatermark_DEFAULT int64

func (p *AppendMessage) GetFullyReplicatedWatermark() int64 {
	if !p.IsSetFullyReplicatedWatermark() {
		return AppendMessage_FullyReplicatedWatermark_DEFAULT
	}
	return *p.FullyReplicatedWatermark
}
func (p *AppendMessage) IsSetSequenceNumber() bool {
	return p.SequenceNumber != nil
}

func (p *AppendMessage) IsSetEnqueueTimeUtc() bool {
	return p.EnqueueTimeUtc != nil
}

func (p *AppendMessage) IsSetPayload() bool {
	return p.Payload != nil
}

func (p *AppendMessage) IsSetFullyReplicatedWatermark() bool {
	return p.FullyReplicatedWatermark != nil
}

func (p *AppendMessage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AppendMessage) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SequenceNumber = &v
	}
	return nil
}

func (p *AppendMessage) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EnqueueTimeUtc = &v
	}
	return nil
}

func (p *AppendMessage) readField3(iprot thrift.TProtocol) error {
	p.Payload = &cherami.PutMessage{}
	if err := p.Payload.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Payload), err)
	}
	return nil
}

func (p *AppendMessage) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.FullyReplicatedWatermark = &v
	}
	return nil
}

func (p *AppendMessage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AppendMessage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AppendMessage) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSequenceNumber() {
		if err := oprot.WriteFieldBegin("sequenceNumber", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sequenceNumber: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SequenceNumber)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sequenceNumber (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sequenceNumber: ", p), err)
		}
	}
	return err
}

func (p *AppendMessage) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnqueueTimeUtc() {
		if err := oprot.WriteFieldBegin("enqueueTimeUtc", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:enqueueTimeUtc: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.EnqueueTimeUtc)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.enqueueTimeUtc (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:enqueueTimeUtc: ", p), err)
		}
	}
	return err
}

func (p *AppendMessage) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPayload() {
		if err := oprot.WriteFieldBegin("payload", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:payload: ", p), err)
		}
		if err := p.Payload.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Payload), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:payload: ", p), err)
		}
	}
	return err
}

func (p *AppendMessage) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFullyReplicatedWatermark() {
		if err := oprot.WriteFieldBegin("fullyReplicatedWatermark", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fullyReplicatedWatermark: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.FullyReplicatedWatermark)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fullyReplicatedWatermark (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fullyReplicatedWatermark: ", p), err)
		}
	}
	return err
}

func (p *AppendMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendMessage(%+v)", *p)
}

// Attributes:
//  - SequenceNumber
//  - Address
//  - Status
//  - Message
type AppendMessageAck struct {
	SequenceNumber *int64          `thrift:"sequenceNumber,1" json:"sequenceNumber,omitempty"`
	Address        *int64          `thrift:"address,2" json:"address,omitempty"`
	Status         *cherami.Status `thrift:"status,3" json:"status,omitempty"`
	Message        *string         `thrift:"message,4" json:"message,omitempty"`
}

func NewAppendMessageAck() *AppendMessageAck {
	return &AppendMessageAck{}
}

var AppendMessageAck_SequenceNumber_DEFAULT int64

func (p *AppendMessageAck) GetSequenceNumber() int64 {
	if !p.IsSetSequenceNumber() {
		return AppendMessageAck_SequenceNumber_DEFAULT
	}
	return *p.SequenceNumber
}

var AppendMessageAck_Address_DEFAULT int64

func (p *AppendMessageAck) GetAddress() int64 {
	if !p.IsSetAddress() {
		return AppendMessageAck_Address_DEFAULT
	}
	return *p.Address
}

var AppendMessageAck_Status_DEFAULT cherami.Status

func (p *AppendMessageAck) GetStatus() cherami.Status {
	if !p.IsSetStatus() {
		return AppendMessageAck_Status_DEFAULT
	}
	return *p.Status
}

var AppendMessageAck_Message_DEFAULT string

func (p *AppendMessageAck) GetMessage() string {
	if !p.IsSetMessage() {
		return AppendMessageAck_Message_DEFAULT
	}
	return *p.Message
}
func (p *AppendMessageAck) IsSetSequenceNumber() bool {
	return p.SequenceNumber != nil
}

func (p *AppendMessageAck) IsSetAddress() bool {
	return p.Address != nil
}

func (p *AppendMessageAck) IsSetStatus() bool {
	return p.Status != nil
}

func (p *AppendMessageAck) IsSetMessage() bool {
	return p.Message != nil
}

func (p *AppendMessageAck) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AppendMessageAck) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SequenceNumber = &v
	}
	return nil
}

func (p *AppendMessageAck) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Address = &v
	}
	return nil
}

func (p *AppendMessageAck) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := cherami.Status(v)
		p.Status = &temp
	}
	return nil
}

func (p *AppendMessageAck) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *AppendMessageAck) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AppendMessageAck"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AppendMessageAck) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSequenceNumber() {
		if err := oprot.WriteFieldBegin("sequenceNumber", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sequenceNumber: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SequenceNumber)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sequenceNumber (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sequenceNumber: ", p), err)
		}
	}
	return err
}

func (p *AppendMessageAck) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddress() {
		if err := oprot.WriteFieldBegin("address", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:address: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Address)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.address (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:address: ", p), err)
		}
	}
	return err
}

func (p *AppendMessageAck) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err)
		}
	}
	return err
}

func (p *AppendMessageAck) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:message: ", p), err)
		}
	}
	return err
}

func (p *AppendMessageAck) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendMessageAck(%+v)", *p)
}

// Attributes:
//  - Address
//  - Message
type ReadMessage struct {
	Address *int64         `thrift:"address,1" json:"address,omitempty"`
	Message *AppendMessage `thrift:"message,2" json:"message,omitempty"`
}

func NewReadMessage() *ReadMessage {
	return &ReadMessage{}
}

var ReadMessage_Address_DEFAULT int64

func (p *ReadMessage) GetAddress() int64 {
	if !p.IsSetAddress() {
		return ReadMessage_Address_DEFAULT
	}
	return *p.Address
}

var ReadMessage_Message_DEFAULT *AppendMessage

func (p *ReadMessage) GetMessage() *AppendMessage {
	if !p.IsSetMessage() {
		return ReadMessage_Message_DEFAULT
	}
	return p.Message
}
func (p *ReadMessage) IsSetAddress() bool {
	return p.Address != nil
}

func (p *ReadMessage) IsSetMessage() bool {
	return p.Message != nil
}

func (p *ReadMessage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadMessage) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Address = &v
	}
	return nil
}

func (p *ReadMessage) readField2(iprot thrift.TProtocol) error {
	p.Message = &AppendMessage{}
	if err := p.Message.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
	}
	return nil
}

func (p *ReadMessage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadMessage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadMessage) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddress() {
		if err := oprot.WriteFieldBegin("address", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Address)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err)
		}
	}
	return err
}

func (p *ReadMessage) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
		}
		if err := p.Message.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
		}
	}
	return err
}

func (p *ReadMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadMessage(%+v)", *p)
}

// Attributes:
//  - Type
//  - Message
//  - Sealed
//  - Error
//  - NoMoreMessage
type ReadMessageContent struct {
	Type          *ReadMessageContentType `thrift:"type,1" json:"type,omitempty"`
	Message       *ReadMessage            `thrift:"message,2" json:"message,omitempty"`
	Sealed        *ExtentSealedError      `thrift:"sealed,3" json:"sealed,omitempty"`
	Error         *StoreServiceError      `thrift:"error,4" json:"error,omitempty"`
	NoMoreMessage *NoMoreMessagesError    `thrift:"noMoreMessage,5" json:"noMoreMessage,omitempty"`
}

func NewReadMessageContent() *ReadMessageContent {
	return &ReadMessageContent{}
}

var ReadMessageContent_Type_DEFAULT ReadMessageContentType

func (p *ReadMessageContent) GetType() ReadMessageContentType {
	if !p.IsSetType() {
		return ReadMessageContent_Type_DEFAULT
	}
	return *p.Type
}

var ReadMessageContent_Message_DEFAULT *ReadMessage

func (p *ReadMessageContent) GetMessage() *ReadMessage {
	if !p.IsSetMessage() {
		return ReadMessageContent_Message_DEFAULT
	}
	return p.Message
}

var ReadMessageContent_Sealed_DEFAULT *ExtentSealedError

func (p *ReadMessageContent) GetSealed() *ExtentSealedError {
	if !p.IsSetSealed() {
		return ReadMessageContent_Sealed_DEFAULT
	}
	return p.Sealed
}

var ReadMessageContent_Error_DEFAULT *StoreServiceError

func (p *ReadMessageContent) GetError() *StoreServiceError {
	if !p.IsSetError() {
		return ReadMessageContent_Error_DEFAULT
	}
	return p.Error
}

var ReadMessageContent_NoMoreMessage_DEFAULT *NoMoreMessagesError

func (p *ReadMessageContent) GetNoMoreMessage() *NoMoreMessagesError {
	if !p.IsSetNoMoreMessage() {
		return ReadMessageContent_NoMoreMessage_DEFAULT
	}
	return p.NoMoreMessage
}
func (p *ReadMessageContent) IsSetType() bool {
	return p.Type != nil
}

func (p *ReadMessageContent) IsSetMessage() bool {
	return p.Message != nil
}

func (p *ReadMessageContent) IsSetSealed() bool {
	return p.Sealed != nil
}

func (p *ReadMessageContent) IsSetError() bool {
	return p.Error != nil
}

func (p *ReadMessageContent) IsSetNoMoreMessage() bool {
	return p.NoMoreMessage != nil
}

func (p *ReadMessageContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadMessageContent) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ReadMessageContentType(v)
		p.Type = &temp
	}
	return nil
}

func (p *ReadMessageContent) readField2(iprot thrift.TProtocol) error {
	p.Message = &ReadMessage{}
	if err := p.Message.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
	}
	return nil
}

func (p *ReadMessageContent) readField3(iprot thrift.TProtocol) error {
	p.Sealed = &ExtentSealedError{}
	if err := p.Sealed.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sealed), err)
	}
	return nil
}

func (p *ReadMessageContent) readField4(iprot thrift.TProtocol) error {
	p.Error = &StoreServiceError{}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *ReadMessageContent) readField5(iprot thrift.TProtocol) error {
	p.NoMoreMessage = &NoMoreMessagesError{}
	if err := p.NoMoreMessage.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NoMoreMessage), err)
	}
	return nil
}

func (p *ReadMessageContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadMessageContent"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadMessageContent) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
		}
	}
	return err
}

func (p *ReadMessageContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
		}
		if err := p.Message.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
		}
	}
	return err
}

func (p *ReadMessageContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSealed() {
		if err := oprot.WriteFieldBegin("sealed", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sealed: ", p), err)
		}
		if err := p.Sealed.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sealed), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sealed: ", p), err)
		}
	}
	return err
}

func (p *ReadMessageContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:error: ", p), err)
		}
	}
	return err
}

func (p *ReadMessageContent) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoMoreMessage() {
		if err := oprot.WriteFieldBegin("noMoreMessage", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:noMoreMessage: ", p), err)
		}
		if err := p.NoMoreMessage.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NoMoreMessage), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:noMoreMessage: ", p), err)
		}
	}
	return err
}

func (p *ReadMessageContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadMessageContent(%+v)", *p)
}

// Attributes:
//  - ExtentUUID
//  - DestinationUUID
//  - DestinationType
//  - ConsumerGroupUUID
//  - StartAddress
//  - StartAddressInclusive
//  - EndAddress
//  - NumMessages
type ReadMessagesRequest struct {
	ExtentUUID            *string                  `thrift:"extentUUID,1" json:"extentUUID,omitempty"`
	DestinationUUID       *string                  `thrift:"destinationUUID,2" json:"destinationUUID,omitempty"`
	DestinationType       *cherami.DestinationType `thrift:"destinationType,3" json:"destinationType,omitempty"`
	ConsumerGroupUUID     *string                  `thrift:"consumerGroupUUID,4" json:"consumerGroupUUID,omitempty"`
	StartAddress          *int64                   `thrift:"startAddress,5" json:"startAddress,omitempty"`
	StartAddressInclusive *bool                    `thrift:"startAddressInclusive,6" json:"startAddressInclusive,omitempty"`
	EndAddress            *int64                   `thrift:"endAddress,7" json:"endAddress,omitempty"`
	NumMessages           *int32                   `thrift:"numMessages,8" json:"numMessages,omitempty"`
}

func NewReadMessagesRequest() *ReadMessagesRequest {
	return &ReadMessagesRequest{}
}

var ReadMessagesRequest_ExtentUUID_DEFAULT string

func (p *ReadMessagesRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return ReadMessagesRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var ReadMessagesRequest_DestinationUUID_DEFAULT string

func (p *ReadMessagesRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return ReadMessagesRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var ReadMessagesRequest_DestinationType_DEFAULT cherami.DestinationType

func (p *ReadMessagesRequest) GetDestinationType() cherami.DestinationType {
	if !p.IsSetDestinationType() {
		return ReadMessagesRequest_DestinationType_DEFAULT
	}
	return *p.DestinationType
}

var ReadMessagesRequest_ConsumerGroupUUID_DEFAULT string

func (p *ReadMessagesRequest) GetConsumerGroupUUID() string {
	if !p.IsSetConsumerGroupUUID() {
		return ReadMessagesRequest_ConsumerGroupUUID_DEFAULT
	}
	return *p.ConsumerGroupUUID
}

var ReadMessagesRequest_StartAddress_DEFAULT int64

func (p *ReadMessagesRequest) GetStartAddress() int64 {
	if !p.IsSetStartAddress() {
		return ReadMessagesRequest_StartAddress_DEFAULT
	}
	return *p.StartAddress
}

var ReadMessagesRequest_StartAddressInclusive_DEFAULT bool

func (p *ReadMessagesRequest) GetStartAddressInclusive() bool {
	if !p.IsSetStartAddressInclusive() {
		return ReadMessagesRequest_StartAddressInclusive_DEFAULT
	}
	return *p.StartAddressInclusive
}

var ReadMessagesRequest_EndAddress_DEFAULT int64

func (p *ReadMessagesRequest) GetEndAddress() int64 {
	if !p.IsSetEndAddress() {
		return ReadMessagesRequest_EndAddress_DEFAULT
	}
	return *p.EndAddress
}

var ReadMessagesRequest_NumMessages_DEFAULT int32

func (p *ReadMessagesRequest) GetNumMessages() int32 {
	if !p.IsSetNumMessages() {
		return ReadMessagesRequest_NumMessages_DEFAULT
	}
	return *p.NumMessages
}
func (p *ReadMessagesRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *ReadMessagesRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *ReadMessagesRequest) IsSetDestinationType() bool {
	return p.DestinationType != nil
}

func (p *ReadMessagesRequest) IsSetConsumerGroupUUID() bool {
	return p.ConsumerGroupUUID != nil
}

func (p *ReadMessagesRequest) IsSetStartAddress() bool {
	return p.StartAddress != nil
}

func (p *ReadMessagesRequest) IsSetStartAddressInclusive() bool {
	return p.StartAddressInclusive != nil
}

func (p *ReadMessagesRequest) IsSetEndAddress() bool {
	return p.EndAddress != nil
}

func (p *ReadMessagesRequest) IsSetNumMessages() bool {
	return p.NumMessages != nil
}

func (p *ReadMessagesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadMessagesRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *ReadMessagesRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *ReadMessagesRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := cherami.DestinationType(v)
		p.DestinationType = &temp
	}
	return nil
}

func (p *ReadMessagesRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ConsumerGroupUUID = &v
	}
	return nil
}

func (p *ReadMessagesRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.StartAddress = &v
	}
	return nil
}

func (p *ReadMessagesRequest) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.StartAddressInclusive = &v
	}
	return nil
}

func (p *ReadMessagesRequest) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.EndAddress = &v
	}
	return nil
}

func (p *ReadMessagesRequest) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.NumMessages = &v
	}
	return nil
}

func (p *ReadMessagesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadMessagesRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadMessagesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *ReadMessagesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *ReadMessagesRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationType() {
		if err := oprot.WriteFieldBegin("destinationType", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:destinationType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.DestinationType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationType (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:destinationType: ", p), err)
		}
	}
	return err
}

func (p *ReadMessagesRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupUUID() {
		if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:consumerGroupUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:consumerGroupUUID: ", p), err)
		}
	}
	return err
}

func (p *ReadMessagesRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartAddress() {
		if err := oprot.WriteFieldBegin("startAddress", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:startAddress: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.StartAddress)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.startAddress (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:startAddress: ", p), err)
		}
	}
	return err
}

func (p *ReadMessagesRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartAddressInclusive() {
		if err := oprot.WriteFieldBegin("startAddressInclusive", thrift.BOOL, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:startAddressInclusive: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.StartAddressInclusive)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.startAddressInclusive (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:startAddressInclusive: ", p), err)
		}
	}
	return err
}

func (p *ReadMessagesRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndAddress() {
		if err := oprot.WriteFieldBegin("endAddress", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:endAddress: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.EndAddress)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.endAddress (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:endAddress: ", p), err)
		}
	}
	return err
}

func (p *ReadMessagesRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumMessages() {
		if err := oprot.WriteFieldBegin("numMessages", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:numMessages: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.NumMessages)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.numMessages (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:numMessages: ", p), err)
		}
	}
	return err
}

func (p *ReadMessagesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadMessagesRequest(%+v)", *p)
}

// Attributes:
//  - Messages
type ReadMessagesResult_ struct {
	Messages []*ReadMessageContent `thrift:"messages,1" json:"messages,omitempty"`
}

func NewReadMessagesResult_() *ReadMessagesResult_ {
	return &ReadMessagesResult_{}
}

var ReadMessagesResult__Messages_DEFAULT []*ReadMessageContent

func (p *ReadMessagesResult_) GetMessages() []*ReadMessageContent {
	return p.Messages
}
func (p *ReadMessagesResult_) IsSetMessages() bool {
	return p.Messages != nil
}

func (p *ReadMessagesResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadMessagesResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ReadMessageContent, 0, size)
	p.Messages = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &ReadMessageContent{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Messages = append(p.Messages, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ReadMessagesResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReadMessagesResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadMessagesResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessages() {
		if err := oprot.WriteFieldBegin("messages", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:messages: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Messages)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Messages {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:messages: ", p), err)
		}
	}
	return err
}

func (p *ReadMessagesResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadMessagesResult_(%+v)", *p)
}

// Attributes:
//  - ExtentUUID
//  - CreatedAt
//  - BeginAddress
//  - LastAddress
//  - BeginSequence
//  - LastSequence
//  - BeginEnqueueTimeUtc
//  - LastEnqueueTimeUtc
//  - SizeInBytes
//  - Status
//  - BeginTime
//  - EndTime
//  - AvailableAddress
//  - AvailableSequence
//  - AvailableSequenceRate
//  - LastSequenceRate
//  - SizeInBytesRate
type ExtentInfo struct {
	ExtentUUID            *string              `thrift:"extentUUID,1" json:"extentUUID,omitempty"`
	CreatedAt             *int64               `thrift:"createdAt,2" json:"createdAt,omitempty"`
	BeginAddress          *int64               `thrift:"beginAddress,3" json:"beginAddress,omitempty"`
	LastAddress           *int64               `thrift:"lastAddress,4" json:"lastAddress,omitempty"`
	BeginSequence         *int64               `thrift:"beginSequence,5" json:"beginSequence,omitempty"`
	LastSequence          *int64               `thrift:"lastSequence,6" json:"lastSequence,omitempty"`
	BeginEnqueueTimeUtc   *int64               `thrift:"beginEnqueueTimeUtc,7" json:"beginEnqueueTimeUtc,omitempty"`
	LastEnqueueTimeUtc    *int64               `thrift:"lastEnqueueTimeUtc,8" json:"lastEnqueueTimeUtc,omitempty"`
	SizeInBytes           *int64               `thrift:"sizeInBytes,9" json:"sizeInBytes,omitempty"`
	Status                *shared.ExtentStatus `thrift:"status,10" json:"status,omitempty"`
	BeginTime             *int64               `thrift:"beginTime,11" json:"beginTime,omitempty"`
	EndTime               *int64               `thrift:"endTime,12" json:"endTime,omitempty"`
	AvailableAddress      *int64               `thrift:"availableAddress,13" json:"availableAddress,omitempty"`
	AvailableSequence     *int64               `thrift:"availableSequence,14" json:"availableSequence,omitempty"`
	AvailableSequenceRate *float64             `thrift:"availableSequenceRate,15" json:"availableSequenceRate,omitempty"`
	LastSequenceRate      *float64             `thrift:"lastSequenceRate,16" json:"lastSequenceRate,omitempty"`
	SizeInBytesRate       *float64             `thrift:"sizeInBytesRate,17" json:"sizeInBytesRate,omitempty"`
}

func NewExtentInfo() *ExtentInfo {
	return &ExtentInfo{}
}

var ExtentInfo_ExtentUUID_DEFAULT string

func (p *ExtentInfo) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return ExtentInfo_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var ExtentInfo_CreatedAt_DEFAULT int64

func (p *ExtentInfo) GetCreatedAt() int64 {
	if !p.IsSetCreatedAt() {
		return ExtentInfo_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var ExtentInfo_BeginAddress_DEFAULT int64

func (p *ExtentInfo) GetBeginAddress() int64 {
	if !p.IsSetBeginAddress() {
		return ExtentInfo_BeginAddress_DEFAULT
	}
	return *p.BeginAddress
}

var ExtentInfo_LastAddress_DEFAULT int64

func (p *ExtentInfo) GetLastAddress() int64 {
	if !p.IsSetLastAddress() {
		return ExtentInfo_LastAddress_DEFAULT
	}
	return *p.LastAddress
}

var ExtentInfo_BeginSequence_DEFAULT int64

func (p *ExtentInfo) GetBeginSequence() int64 {
	if !p.IsSetBeginSequence() {
		return ExtentInfo_BeginSequence_DEFAULT
	}
	return *p.BeginSequence
}

var ExtentInfo_LastSequence_DEFAULT int64

func (p *ExtentInfo) GetLastSequence() int64 {
	if !p.IsSetLastSequence() {
		return ExtentInfo_LastSequence_DEFAULT
	}
	return *p.LastSequence
}

var ExtentInfo_BeginEnqueueTimeUtc_DEFAULT int64

func (p *ExtentInfo) GetBeginEnqueueTimeUtc() int64 {
	if !p.IsSetBeginEnqueueTimeUtc() {
		return ExtentInfo_BeginEnqueueTimeUtc_DEFAULT
	}
	return *p.BeginEnqueueTimeUtc
}

var ExtentInfo_LastEnqueueTimeUtc_DEFAULT int64

func (p *ExtentInfo) GetLastEnqueueTimeUtc() int64 {
	if !p.IsSetLastEnqueueTimeUtc() {
		return ExtentInfo_LastEnqueueTimeUtc_DEFAULT
	}
	return *p.LastEnqueueTimeUtc
}

var ExtentInfo_SizeInBytes_DEFAULT int64

func (p *ExtentInfo) GetSizeInBytes() int64 {
	if !p.IsSetSizeInBytes() {
		return ExtentInfo_SizeInBytes_DEFAULT
	}
	return *p.SizeInBytes
}

var ExtentInfo_Status_DEFAULT shared.ExtentStatus

func (p *ExtentInfo) GetStatus() shared.ExtentStatus {
	if !p.IsSetStatus() {
		return ExtentInfo_Status_DEFAULT
	}
	return *p.Status
}

var ExtentInfo_BeginTime_DEFAULT int64

func (p *ExtentInfo) GetBeginTime() int64 {
	if !p.IsSetBeginTime() {
		return ExtentInfo_BeginTime_DEFAULT
	}
	return *p.BeginTime
}

var ExtentInfo_EndTime_DEFAULT int64

func (p *ExtentInfo) GetEndTime() int64 {
	if !p.IsSetEndTime() {
		return ExtentInfo_EndTime_DEFAULT
	}
	return *p.EndTime
}

var ExtentInfo_AvailableAddress_DEFAULT int64

func (p *ExtentInfo) GetAvailableAddress() int64 {
	if !p.IsSetAvailableAddress() {
		return ExtentInfo_AvailableAddress_DEFAULT
	}
	return *p.AvailableAddress
}

var ExtentInfo_AvailableSequence_DEFAULT int64

func (p *ExtentInfo) GetAvailableSequence() int64 {
	if !p.IsSetAvailableSequence() {
		return ExtentInfo_AvailableSequence_DEFAULT
	}
	return *p.AvailableSequence
}

var ExtentInfo_AvailableSequenceRate_DEFAULT float64

func (p *ExtentInfo) GetAvailableSequenceRate() float64 {
	if !p.IsSetAvailableSequenceRate() {
		return ExtentInfo_AvailableSequenceRate_DEFAULT
	}
	return *p.AvailableSequenceRate
}

var ExtentInfo_LastSequenceRate_DEFAULT float64

func (p *ExtentInfo) GetLastSequenceRate() float64 {
	if !p.IsSetLastSequenceRate() {
		return ExtentInfo_LastSequenceRate_DEFAULT
	}
	return *p.LastSequenceRate
}

var ExtentInfo_SizeInBytesRate_DEFAULT float64

func (p *ExtentInfo) GetSizeInBytesRate() float64 {
	if !p.IsSetSizeInBytesRate() {
		return ExtentInfo_SizeInBytesRate_DEFAULT
	}
	return *p.SizeInBytesRate
}
func (p *ExtentInfo) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *ExtentInfo) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *ExtentInfo) IsSetBeginAddress() bool {
	return p.BeginAddress != nil
}

func (p *ExtentInfo) IsSetLastAddress() bool {
	return p.LastAddress != nil
}

func (p *ExtentInfo) IsSetBeginSequence() bool {
	return p.BeginSequence != nil
}

func (p *ExtentInfo) IsSetLastSequence() bool {
	return p.LastSequence != nil
}

func (p *ExtentInfo) IsSetBeginEnqueueTimeUtc() bool {
	return p.BeginEnqueueTimeUtc != nil
}

func (p *ExtentInfo) IsSetLastEnqueueTimeUtc() bool {
	return p.LastEnqueueTimeUtc != nil
}

func (p *ExtentInfo) IsSetSizeInBytes() bool {
	return p.SizeInBytes != nil
}

func (p *ExtentInfo) IsSetStatus() bool {
	return p.Status != nil
}

func (p *ExtentInfo) IsSetBeginTime() bool {
	return p.BeginTime != nil
}

func (p *ExtentInfo) IsSetEndTime() bool {
	return p.EndTime != nil
}

func (p *ExtentInfo) IsSetAvailableAddress() bool {
	return p.AvailableAddress != nil
}

func (p *ExtentInfo) IsSetAvailableSequence() bool {
	return p.AvailableSequence != nil
}

func (p *ExtentInfo) IsSetAvailableSequenceRate() bool {
	return p.AvailableSequenceRate != nil
}

func (p *ExtentInfo) IsSetLastSequenceRate() bool {
	return p.LastSequenceRate != nil
}

func (p *ExtentInfo) IsSetSizeInBytesRate() bool {
	return p.SizeInBytesRate != nil
}

func (p *ExtentInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ExtentInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *ExtentInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CreatedAt = &v
	}
	return nil
}

func (p *ExtentInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.BeginAddress = &v
	}
	return nil
}

func (p *ExtentInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.LastAddress = &v
	}
	return nil
}

func (p *ExtentInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.BeginSequence = &v
	}
	return nil
}

func (p *ExtentInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.LastSequence = &v
	}
	return nil
}

func (p *ExtentInfo) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.BeginEnqueueTimeUtc = &v
	}
	return nil
}

func (p *ExtentInfo) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.LastEnqueueTimeUtc = &v
	}
	return nil
}

func (p *ExtentInfo) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.SizeInBytes = &v
	}
	return nil
}

func (p *ExtentInfo) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := shared.ExtentStatus(v)
		p.Status = &temp
	}
	return nil
}

func (p *ExtentInfo) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.BeginTime = &v
	}
	return nil
}

func (p *ExtentInfo) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.EndTime = &v
	}
	return nil
}

func (p *ExtentInfo) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.AvailableAddress = &v
	}
	return nil
}

func (p *ExtentInfo) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.AvailableSequence = &v
	}
	return nil
}

func (p *ExtentInfo) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.AvailableSequenceRate = &v
	}
	return nil
}

func (p *ExtentInfo) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.LastSequenceRate = &v
	}
	return nil
}

func (p *ExtentInfo) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.SizeInBytesRate = &v
	}
	return nil
}

func (p *ExtentInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExtentInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExtentInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *ExtentInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err := oprot.WriteFieldBegin("createdAt", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdAt: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreatedAt)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.createdAt (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdAt: ", p), err)
		}
	}
	return err
}

func (p *ExtentInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBeginAddress() {
		if err := oprot.WriteFieldBegin("beginAddress", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:beginAddress: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.BeginAddress)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.beginAddress (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:beginAddress: ", p), err)
		}
	}
	return err
}

func (p *ExtentInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastAddress() {
		if err := oprot.WriteFieldBegin("lastAddress", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lastAddress: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.LastAddress)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lastAddress (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lastAddress: ", p), err)
		}
	}
	return err
}

func (p *ExtentInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBeginSequence() {
		if err := oprot.WriteFieldBegin("beginSequence", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:beginSequence: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.BeginSequence)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.beginSequence (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:beginSequence: ", p), err)
		}
	}
	return err
}

func (p *ExtentInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastSequence() {
		if err := oprot.WriteFieldBegin("lastSequence", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lastSequence: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.LastSequence)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lastSequence (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lastSequence: ", p), err)
		}
	}
	return err
}

func (p *ExtentInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetBeginEnqueueTimeUtc() {
		if err := oprot.WriteFieldBegin("beginEnqueueTimeUtc", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:beginEnqueueTimeUtc: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.BeginEnqueueTimeUtc)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.beginEnqueueTimeUtc (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:beginEnqueueTimeUtc: ", p), err)
		}
	}
	return err
}

func (p *ExtentInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastEnqueueTimeUtc() {
		if err := oprot.WriteFieldBegin("lastEnqueueTimeUtc", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:lastEnqueueTimeUtc: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.LastEnqueueTimeUtc)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lastEnqueueTimeUtc (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:lastEnqueueTimeUtc: ", p), err)
		}
	}
	return err
}

func (p *ExtentInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSizeInBytes() {
		if err := oprot.WriteFieldBegin("sizeInBytes", thrift.I64, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:sizeInBytes: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SizeInBytes)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sizeInBytes (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:sizeInBytes: ", p), err)
		}
	}
	return err
}

func (p *ExtentInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:status: ", p), err)
		}
	}
	return err
}

func (p *ExtentInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetBeginTime() {
		if err := oprot.WriteFieldBegin("beginTime", thrift.I64, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:beginTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.BeginTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.beginTime (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:beginTime: ", p), err)
		}
	}
	return err
}

func (p *ExtentInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndTime() {
		if err := oprot.WriteFieldBegin("endTime", thrift.I64, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:endTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.EndTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.endTime (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:endTime: ", p), err)
		}
	}
	return err
}

func (p *ExtentInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetAvailableAddress() {
		if err := oprot.WriteFieldBegin("availableAddress", thrift.I64, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:availableAddress: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.AvailableAddress)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.availableAddress (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:availableAddress: ", p), err)
		}
	}
	return err
}

func (p *ExtentInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetAvailableSequence() {
		if err := oprot.WriteFieldBegin("availableSequence", thrift.I64, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:availableSequence: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.AvailableSequence)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.availableSequence (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:availableSequence: ", p), err)
		}
	}
	return err
}

func (p *ExtentInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetAvailableSequenceRate() {
		if err := oprot.WriteFieldBegin("availableSequenceRate", thrift.DOUBLE, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:availableSequenceRate: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.AvailableSequenceRate)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.availableSequenceRate (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:availableSequenceRate: ", p), err)
		}
	}
	return err
}

func (p *ExtentInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastSequenceRate() {
		if err := oprot.WriteFieldBegin("lastSequenceRate", thrift.DOUBLE, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:lastSequenceRate: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.LastSequenceRate)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lastSequenceRate (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:lastSequenceRate: ", p), err)
		}
	}
	return err
}

func (p *ExtentInfo) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetSizeInBytesRate() {
		if err := oprot.WriteFieldBegin("sizeInBytesRate", thrift.DOUBLE, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:sizeInBytesRate: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.SizeInBytesRate)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sizeInBytesRate (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:sizeInBytesRate: ", p), err)
		}
	}
	return err
}

func (p *ExtentInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExtentInfo(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - DestinationType
//  - ExtentUUID
type OpenAppendStreamRequest struct {
	ExtentUUID      *string                  `thrift:"extentUUID,1" json:"extentUUID,omitempty"`
	DestinationUUID *string                  `thrift:"destinationUUID,2" json:"destinationUUID,omitempty"`
	DestinationType *cherami.DestinationType `thrift:"destinationType,3" json:"destinationType,omitempty"`
}

func NewOpenAppendStreamRequest() *OpenAppendStreamRequest {
	return &OpenAppendStreamRequest{}
}

var OpenAppendStreamRequest_DestinationUUID_DEFAULT string

func (p *OpenAppendStreamRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return OpenAppendStreamRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var OpenAppendStreamRequest_DestinationType_DEFAULT cherami.DestinationType

func (p *OpenAppendStreamRequest) GetDestinationType() cherami.DestinationType {
	if !p.IsSetDestinationType() {
		return OpenAppendStreamRequest_DestinationType_DEFAULT
	}
	return *p.DestinationType
}

var OpenAppendStreamRequest_ExtentUUID_DEFAULT string

func (p *OpenAppendStreamRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return OpenAppendStreamRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}
func (p *OpenAppendStreamRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *OpenAppendStreamRequest) IsSetDestinationType() bool {
	return p.DestinationType != nil
}

func (p *OpenAppendStreamRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *OpenAppendStreamRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OpenAppendStreamRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *OpenAppendStreamRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := cherami.DestinationType(v)
		p.DestinationType = &temp
	}
	return nil
}

func (p *OpenAppendStreamRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *OpenAppendStreamRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OpenAppendStreamRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OpenAppendStreamRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *OpenAppendStreamRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *OpenAppendStreamRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationType() {
		if err := oprot.WriteFieldBegin("destinationType", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:destinationType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.DestinationType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationType (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:destinationType: ", p), err)
		}
	}
	return err
}

func (p *OpenAppendStreamRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OpenAppendStreamRequest(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - DestinationType
//  - ExtentUUID
//  - ConsumerGroupUUID
//  - Address
//  - Inclusive
type OpenReadStreamRequest struct {
	ExtentUUID        *string                  `thrift:"extentUUID,1" json:"extentUUID,omitempty"`
	Address           *int64                   `thrift:"address,2" json:"address,omitempty"`
	Inclusive         *bool                    `thrift:"inclusive,3" json:"inclusive,omitempty"`
	DestinationUUID   *string                  `thrift:"destinationUUID,4" json:"destinationUUID,omitempty"`
	DestinationType   *cherami.DestinationType `thrift:"destinationType,5" json:"destinationType,omitempty"`
	ConsumerGroupUUID *string                  `thrift:"consumerGroupUUID,6" json:"consumerGroupUUID,omitempty"`
}

func NewOpenReadStreamRequest() *OpenReadStreamRequest {
	return &OpenReadStreamRequest{}
}

var OpenReadStreamRequest_DestinationUUID_DEFAULT string

func (p *OpenReadStreamRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return OpenReadStreamRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var OpenReadStreamRequest_DestinationType_DEFAULT cherami.DestinationType

func (p *OpenReadStreamRequest) GetDestinationType() cherami.DestinationType {
	if !p.IsSetDestinationType() {
		return OpenReadStreamRequest_DestinationType_DEFAULT
	}
	return *p.DestinationType
}

var OpenReadStreamRequest_ExtentUUID_DEFAULT string

func (p *OpenReadStreamRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return OpenReadStreamRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var OpenReadStreamRequest_ConsumerGroupUUID_DEFAULT string

func (p *OpenReadStreamRequest) GetConsumerGroupUUID() string {
	if !p.IsSetConsumerGroupUUID() {
		return OpenReadStreamRequest_ConsumerGroupUUID_DEFAULT
	}
	return *p.ConsumerGroupUUID
}

var OpenReadStreamRequest_Address_DEFAULT int64

func (p *OpenReadStreamRequest) GetAddress() int64 {
	if !p.IsSetAddress() {
		return OpenReadStreamRequest_Address_DEFAULT
	}
	return *p.Address
}

var OpenReadStreamRequest_Inclusive_DEFAULT bool

func (p *OpenReadStreamRequest) GetInclusive() bool {
	if !p.IsSetInclusive() {
		return OpenReadStreamRequest_Inclusive_DEFAULT
	}
	return *p.Inclusive
}
func (p *OpenReadStreamRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *OpenReadStreamRequest) IsSetDestinationType() bool {
	return p.DestinationType != nil
}

func (p *OpenReadStreamRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *OpenReadStreamRequest) IsSetConsumerGroupUUID() bool {
	return p.ConsumerGroupUUID != nil
}

func (p *OpenReadStreamRequest) IsSetAddress() bool {
	return p.Address != nil
}

func (p *OpenReadStreamRequest) IsSetInclusive() bool {
	return p.Inclusive != nil
}

func (p *OpenReadStreamRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OpenReadStreamRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *OpenReadStreamRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := cherami.DestinationType(v)
		p.DestinationType = &temp
	}
	return nil
}

func (p *OpenReadStreamRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *OpenReadStreamRequest) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ConsumerGroupUUID = &v
	}
	return nil
}

func (p *OpenReadStreamRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Address = &v
	}
	return nil
}

func (p *OpenReadStreamRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Inclusive = &v
	}
	return nil
}

func (p *OpenReadStreamRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OpenReadStreamRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OpenReadStreamRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *OpenReadStreamRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddress() {
		if err := oprot.WriteFieldBegin("address", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:address: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Address)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.address (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:address: ", p), err)
		}
	}
	return err
}

func (p *OpenReadStreamRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInclusive() {
		if err := oprot.WriteFieldBegin("inclusive", thrift.BOOL, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:inclusive: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Inclusive)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.inclusive (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:inclusive: ", p), err)
		}
	}
	return err
}

func (p *OpenReadStreamRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *OpenReadStreamRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationType() {
		if err := oprot.WriteFieldBegin("destinationType", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:destinationType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.DestinationType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationType (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:destinationType: ", p), err)
		}
	}
	return err
}

func (p *OpenReadStreamRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumerGroupUUID() {
		if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:consumerGroupUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:consumerGroupUUID: ", p), err)
		}
	}
	return err
}

func (p *OpenReadStreamRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OpenReadStreamRequest(%+v)", *p)
}

// Attributes:
//  - ExtentUUID
//  - Timestamp
type GetAddressFromTimestampRequest struct {
	ExtentUUID *string `thrift:"extentUUID,1" json:"extentUUID,omitempty"`
	Timestamp  *int64  `thrift:"timestamp,2" json:"timestamp,omitempty"`
}

func NewGetAddressFromTimestampRequest() *GetAddressFromTimestampRequest {
	return &GetAddressFromTimestampRequest{}
}

var GetAddressFromTimestampRequest_ExtentUUID_DEFAULT string

func (p *GetAddressFromTimestampRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return GetAddressFromTimestampRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var GetAddressFromTimestampRequest_Timestamp_DEFAULT int64

func (p *GetAddressFromTimestampRequest) GetTimestamp() int64 {
	if !p.IsSetTimestamp() {
		return GetAddressFromTimestampRequest_Timestamp_DEFAULT
	}
	return *p.Timestamp
}
func (p *GetAddressFromTimestampRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *GetAddressFromTimestampRequest) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *GetAddressFromTimestampRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetAddressFromTimestampRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *GetAddressFromTimestampRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *GetAddressFromTimestampRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAddressFromTimestampRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetAddressFromTimestampRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *GetAddressFromTimestampRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timestamp: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timestamp (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timestamp: ", p), err)
		}
	}
	return err
}

func (p *GetAddressFromTimestampRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAddressFromTimestampRequest(%+v)", *p)
}

// Attributes:
//  - Address
//  - Sealed
//  - SequenceNumber
type GetAddressFromTimestampResult_ struct {
	Address        *int64 `thrift:"address,1" json:"address,omitempty"`
	Sealed         *bool  `thrift:"sealed,2" json:"sealed,omitempty"`
	SequenceNumber *int64 `thrift:"sequenceNumber,3" json:"sequenceNumber,omitempty"`
}

func NewGetAddressFromTimestampResult_() *GetAddressFromTimestampResult_ {
	return &GetAddressFromTimestampResult_{}
}

var GetAddressFromTimestampResult__Address_DEFAULT int64

func (p *GetAddressFromTimestampResult_) GetAddress() int64 {
	if !p.IsSetAddress() {
		return GetAddressFromTimestampResult__Address_DEFAULT
	}
	return *p.Address
}

var GetAddressFromTimestampResult__Sealed_DEFAULT bool

func (p *GetAddressFromTimestampResult_) GetSealed() bool {
	if !p.IsSetSealed() {
		return GetAddressFromTimestampResult__Sealed_DEFAULT
	}
	return *p.Sealed
}

var GetAddressFromTimestampResult__SequenceNumber_DEFAULT int64

func (p *GetAddressFromTimestampResult_) GetSequenceNumber() int64 {
	if !p.IsSetSequenceNumber() {
		return GetAddressFromTimestampResult__SequenceNumber_DEFAULT
	}
	return *p.SequenceNumber
}
func (p *GetAddressFromTimestampResult_) IsSetAddress() bool {
	return p.Address != nil
}

func (p *GetAddressFromTimestampResult_) IsSetSealed() bool {
	return p.Sealed != nil
}

func (p *GetAddressFromTimestampResult_) IsSetSequenceNumber() bool {
	return p.SequenceNumber != nil
}

func (p *GetAddressFromTimestampResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetAddressFromTimestampResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Address = &v
	}
	return nil
}

func (p *GetAddressFromTimestampResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Sealed = &v
	}
	return nil
}

func (p *GetAddressFromTimestampResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SequenceNumber = &v
	}
	return nil
}

func (p *GetAddressFromTimestampResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAddressFromTimestampResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetAddressFromTimestampResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddress() {
		if err := oprot.WriteFieldBegin("address", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Address)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err)
		}
	}
	return err
}

func (p *GetAddressFromTimestampResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSealed() {
		if err := oprot.WriteFieldBegin("sealed", thrift.BOOL, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sealed: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Sealed)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sealed (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sealed: ", p), err)
		}
	}
	return err
}

func (p *GetAddressFromTimestampResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSequenceNumber() {
		if err := oprot.WriteFieldBegin("sequenceNumber", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sequenceNumber: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SequenceNumber)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sequenceNumber (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sequenceNumber: ", p), err)
		}
	}
	return err
}

func (p *GetAddressFromTimestampResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAddressFromTimestampResult_(%+v)", *p)
}

// Attributes:
//  - ExtentUUID
type GetExtentInfoRequest struct {
	ExtentUUID *string `thrift:"extentUUID,1" json:"extentUUID,omitempty"`
}

func NewGetExtentInfoRequest() *GetExtentInfoRequest {
	return &GetExtentInfoRequest{}
}

var GetExtentInfoRequest_ExtentUUID_DEFAULT string

func (p *GetExtentInfoRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return GetExtentInfoRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}
func (p *GetExtentInfoRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *GetExtentInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetExtentInfoRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *GetExtentInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetExtentInfoRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetExtentInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *GetExtentInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetExtentInfoRequest(%+v)", *p)
}

// Attributes:
//  - ExtentUUID
//  - SequenceNumber
type SealExtentRequest struct {
	ExtentUUID     *string `thrift:"extentUUID,1" json:"extentUUID,omitempty"`
	SequenceNumber *int64  `thrift:"sequenceNumber,2" json:"sequenceNumber,omitempty"`
}

func NewSealExtentRequest() *SealExtentRequest {
	return &SealExtentRequest{}
}

var SealExtentRequest_ExtentUUID_DEFAULT string

func (p *SealExtentRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return SealExtentRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var SealExtentRequest_SequenceNumber_DEFAULT int64

func (p *SealExtentRequest) GetSequenceNumber() int64 {
	if !p.IsSetSequenceNumber() {
		return SealExtentRequest_SequenceNumber_DEFAULT
	}
	return *p.SequenceNumber
}
func (p *SealExtentRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *SealExtentRequest) IsSetSequenceNumber() bool {
	return p.SequenceNumber != nil
}

func (p *SealExtentRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SealExtentRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *SealExtentRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SequenceNumber = &v
	}
	return nil
}

func (p *SealExtentRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SealExtentRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SealExtentRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *SealExtentRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSequenceNumber() {
		if err := oprot.WriteFieldBegin("sequenceNumber", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sequenceNumber: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SequenceNumber)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sequenceNumber (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sequenceNumber: ", p), err)
		}
	}
	return err
}

func (p *SealExtentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SealExtentRequest(%+v)", *p)
}

// Attributes:
//  - ExtentUUID
//  - Address
type PurgeMessagesRequest struct {
	ExtentUUID *string `thrift:"extentUUID,1" json:"extentUUID,omitempty"`
	Address    *int64  `thrift:"address,2" json:"address,omitempty"`
}

func NewPurgeMessagesRequest() *PurgeMessagesRequest {
	return &PurgeMessagesRequest{}
}

var PurgeMessagesRequest_ExtentUUID_DEFAULT string

func (p *PurgeMessagesRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return PurgeMessagesRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var PurgeMessagesRequest_Address_DEFAULT int64

func (p *PurgeMessagesRequest) GetAddress() int64 {
	if !p.IsSetAddress() {
		return PurgeMessagesRequest_Address_DEFAULT
	}
	return *p.Address
}
func (p *PurgeMessagesRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *PurgeMessagesRequest) IsSetAddress() bool {
	return p.Address != nil
}

func (p *PurgeMessagesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PurgeMessagesRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *PurgeMessagesRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Address = &v
	}
	return nil
}

func (p *PurgeMessagesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PurgeMessagesRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PurgeMessagesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *PurgeMessagesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddress() {
		if err := oprot.WriteFieldBegin("address", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:address: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Address)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.address (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:address: ", p), err)
		}
	}
	return err
}

func (p *PurgeMessagesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PurgeMessagesRequest(%+v)", *p)
}

// Attributes:
//  - Address
type PurgeMessagesResult_ struct {
	Address *int64 `thrift:"address,1" json:"address,omitempty"`
}

func NewPurgeMessagesResult_() *PurgeMessagesResult_ {
	return &PurgeMessagesResult_{}
}

var PurgeMessagesResult__Address_DEFAULT int64

func (p *PurgeMessagesResult_) GetAddress() int64 {
	if !p.IsSetAddress() {
		return PurgeMessagesResult__Address_DEFAULT
	}
	return *p.Address
}
func (p *PurgeMessagesResult_) IsSetAddress() bool {
	return p.Address != nil
}

func (p *PurgeMessagesResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PurgeMessagesResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Address = &v
	}
	return nil
}

func (p *PurgeMessagesResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PurgeMessagesResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PurgeMessagesResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddress() {
		if err := oprot.WriteFieldBegin("address", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Address)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err)
		}
	}
	return err
}

func (p *PurgeMessagesResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PurgeMessagesResult_(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - DestinationType
//  - ExtentUUID
//  - StoreUUID
type ReplicateExtentRequest struct {
	DestinationUUID *string                  `thrift:"destinationUUID,1" json:"destinationUUID,omitempty"`
	DestinationType *cherami.DestinationType `thrift:"destinationType,2" json:"destinationType,omitempty"`
	ExtentUUID      *string                  `thrift:"extentUUID,3" json:"extentUUID,omitempty"`
	StoreUUID       *string                  `thrift:"storeUUID,4" json:"storeUUID,omitempty"`
}

func NewReplicateExtentRequest() *ReplicateExtentRequest {
	return &ReplicateExtentRequest{}
}

var ReplicateExtentRequest_DestinationUUID_DEFAULT string

func (p *ReplicateExtentRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return ReplicateExtentRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var ReplicateExtentRequest_DestinationType_DEFAULT cherami.DestinationType

func (p *ReplicateExtentRequest) GetDestinationType() cherami.DestinationType {
	if !p.IsSetDestinationType() {
		return ReplicateExtentRequest_DestinationType_DEFAULT
	}
	return *p.DestinationType
}

var ReplicateExtentRequest_ExtentUUID_DEFAULT string

func (p *ReplicateExtentRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return ReplicateExtentRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}

var ReplicateExtentRequest_StoreUUID_DEFAULT string

func (p *ReplicateExtentRequest) GetStoreUUID() string {
	if !p.IsSetStoreUUID() {
		return ReplicateExtentRequest_StoreUUID_DEFAULT
	}
	return *p.StoreUUID
}
func (p *ReplicateExtentRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *ReplicateExtentRequest) IsSetDestinationType() bool {
	return p.DestinationType != nil
}

func (p *ReplicateExtentRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *ReplicateExtentRequest) IsSetStoreUUID() bool {
	return p.StoreUUID != nil
}

func (p *ReplicateExtentRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReplicateExtentRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *ReplicateExtentRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := cherami.DestinationType(v)
		p.DestinationType = &temp
	}
	return nil
}

func (p *ReplicateExtentRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *ReplicateExtentRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.StoreUUID = &v
	}
	return nil
}

func (p *ReplicateExtentRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReplicateExtentRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReplicateExtentRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *ReplicateExtentRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationType() {
		if err := oprot.WriteFieldBegin("destinationType", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:destinationType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.DestinationType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationType (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:destinationType: ", p), err)
		}
	}
	return err
}

func (p *ReplicateExtentRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *ReplicateExtentRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoreUUID() {
		if err := oprot.WriteFieldBegin("storeUUID", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:storeUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StoreUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.storeUUID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:storeUUID: ", p), err)
		}
	}
	return err
}

func (p *ReplicateExtentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReplicateExtentRequest(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - DestinationType
//  - ExtentUUID
type RemoteReplicateExtentRequest struct {
	DestinationUUID *string                  `thrift:"destinationUUID,1" json:"destinationUUID,omitempty"`
	DestinationType *cherami.DestinationType `thrift:"destinationType,2" json:"destinationType,omitempty"`
	ExtentUUID      *string                  `thrift:"extentUUID,3" json:"extentUUID,omitempty"`
}

func NewRemoteReplicateExtentRequest() *RemoteReplicateExtentRequest {
	return &RemoteReplicateExtentRequest{}
}

var RemoteReplicateExtentRequest_DestinationUUID_DEFAULT string

func (p *RemoteReplicateExtentRequest) GetDestinationUUID() string {
	if !p.IsSetDestinationUUID() {
		return RemoteReplicateExtentRequest_DestinationUUID_DEFAULT
	}
	return *p.DestinationUUID
}

var RemoteReplicateExtentRequest_DestinationType_DEFAULT cherami.DestinationType

func (p *RemoteReplicateExtentRequest) GetDestinationType() cherami.DestinationType {
	if !p.IsSetDestinationType() {
		return RemoteReplicateExtentRequest_DestinationType_DEFAULT
	}
	return *p.DestinationType
}

var RemoteReplicateExtentRequest_ExtentUUID_DEFAULT string

func (p *RemoteReplicateExtentRequest) GetExtentUUID() string {
	if !p.IsSetExtentUUID() {
		return RemoteReplicateExtentRequest_ExtentUUID_DEFAULT
	}
	return *p.ExtentUUID
}
func (p *RemoteReplicateExtentRequest) IsSetDestinationUUID() bool {
	return p.DestinationUUID != nil
}

func (p *RemoteReplicateExtentRequest) IsSetDestinationType() bool {
	return p.DestinationType != nil
}

func (p *RemoteReplicateExtentRequest) IsSetExtentUUID() bool {
	return p.ExtentUUID != nil
}

func (p *RemoteReplicateExtentRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteReplicateExtentRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestinationUUID = &v
	}
	return nil
}

func (p *RemoteReplicateExtentRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := cherami.DestinationType(v)
		p.DestinationType = &temp
	}
	return nil
}

func (p *RemoteReplicateExtentRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ExtentUUID = &v
	}
	return nil
}

func (p *RemoteReplicateExtentRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RemoteReplicateExtentRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteReplicateExtentRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationUUID() {
		if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err)
		}
	}
	return err
}

func (p *RemoteReplicateExtentRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationType() {
		if err := oprot.WriteFieldBegin("destinationType", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:destinationType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.DestinationType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationType (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:destinationType: ", p), err)
		}
	}
	return err
}

func (p *RemoteReplicateExtentRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentUUID() {
		if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extentUUID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extentUUID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extentUUID: ", p), err)
		}
	}
	return err
}

func (p *RemoteReplicateExtentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteReplicateExtentRequest(%+v)", *p)
}
