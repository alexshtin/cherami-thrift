// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package store

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/cherami-thrift/.generated/go/cherami"
	"github.com/uber/cherami-thrift/.generated/go/shared"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = cherami.GoUnusedProtection__
var _ = shared.GoUnusedProtection__

type BStore interface {
	// Parameters:
	//  - GetAddressRequest
	GetAddressFromTimestamp(getAddressRequest *GetAddressFromTimestampRequest) (r *GetAddressFromTimestampResult_, err error)
	// Parameters:
	//  - ExtentInfoRequest
	GetExtentInfo(extentInfoRequest *GetExtentInfoRequest) (r *ExtentInfo, err error)
	//   * This is used to update ExtentStatus to 'SEALED'.  Client needs to pass in 'sequence number' to seal the extent.
	//   * The reason this API is exposed for BIn nodes to consistently seal the extent on all Replicas in case of crashes.
	//   * If the last known sequence number on BStore is less what the client is requesting as part of SealExtentRequest
	//   * then it will return 'ExtentFailedToSealError'.  It can also fail to seal the extent if 2 clients simultaneously
	//   * tries to seal the extent, in which case one client wins and the other will recieve the 'ExtentSealedError'.
	// *
	//
	// Parameters:
	//  - SealRequest
	SealExtent(sealRequest *SealExtentRequest) (err error)
	// Parameters:
	//  - PurgeRequest
	PurgeMessages(purgeRequest *PurgeMessagesRequest) (r *PurgeMessagesResult_, err error)
	// Parameters:
	//  - ReadMessagesRequest
	ReadMessages(readMessagesRequest *ReadMessagesRequest) (r *ReadMessagesResult_, err error)
	// Parameters:
	//  - ReplicateExtentRequest
	ReplicateExtent(replicateExtentRequest *ReplicateExtentRequest) (err error)
	// Parameters:
	//  - Request
	RemoteReplicateExtent(request *RemoteReplicateExtentRequest) (err error)
}

type BStoreClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewBStoreClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BStoreClient {
	return &BStoreClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewBStoreClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BStoreClient {
	return &BStoreClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - GetAddressRequest
func (p *BStoreClient) GetAddressFromTimestamp(getAddressRequest *GetAddressFromTimestampRequest) (r *GetAddressFromTimestampResult_, err error) {
	if err = p.sendGetAddressFromTimestamp(getAddressRequest); err != nil {
		return
	}
	return p.recvGetAddressFromTimestamp()
}

func (p *BStoreClient) sendGetAddressFromTimestamp(getAddressRequest *GetAddressFromTimestampRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getAddressFromTimestamp", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BStoreGetAddressFromTimestampArgs{
		GetAddressRequest: getAddressRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BStoreClient) recvGetAddressFromTimestamp() (value *GetAddressFromTimestampResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getAddressFromTimestamp" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAddressFromTimestamp failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAddressFromTimestamp failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error2 error
		error2, err = error1.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error2
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAddressFromTimestamp failed: invalid message type")
		return
	}
	result := BStoreGetAddressFromTimestampResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.NotFoundError != nil {
		err = result.NotFoundError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.ServiceError != nil {
		err = result.ServiceError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ExtentInfoRequest
func (p *BStoreClient) GetExtentInfo(extentInfoRequest *GetExtentInfoRequest) (r *ExtentInfo, err error) {
	if err = p.sendGetExtentInfo(extentInfoRequest); err != nil {
		return
	}
	return p.recvGetExtentInfo()
}

func (p *BStoreClient) sendGetExtentInfo(extentInfoRequest *GetExtentInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getExtentInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BStoreGetExtentInfoArgs{
		ExtentInfoRequest: extentInfoRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BStoreClient) recvGetExtentInfo() (value *ExtentInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getExtentInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getExtentInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getExtentInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error3 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error4 error
		error4, err = error3.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error4
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getExtentInfo failed: invalid message type")
		return
	}
	result := BStoreGetExtentInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.NotFoundError != nil {
		err = result.NotFoundError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	}
	value = result.GetSuccess()
	return
}

//   * This is used to update ExtentStatus to 'SEALED'.  Client needs to pass in 'sequence number' to seal the extent.
//   * The reason this API is exposed for BIn nodes to consistently seal the extent on all Replicas in case of crashes.
//   * If the last known sequence number on BStore is less what the client is requesting as part of SealExtentRequest
//   * then it will return 'ExtentFailedToSealError'.  It can also fail to seal the extent if 2 clients simultaneously
//   * tries to seal the extent, in which case one client wins and the other will recieve the 'ExtentSealedError'.
// *
//
// Parameters:
//  - SealRequest
func (p *BStoreClient) SealExtent(sealRequest *SealExtentRequest) (err error) {
	if err = p.sendSealExtent(sealRequest); err != nil {
		return
	}
	return p.recvSealExtent()
}

func (p *BStoreClient) sendSealExtent(sealRequest *SealExtentRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sealExtent", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BStoreSealExtentArgs{
		SealRequest: sealRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BStoreClient) recvSealExtent() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sealExtent" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "sealExtent failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sealExtent failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error5 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error6 error
		error6, err = error5.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error6
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sealExtent failed: invalid message type")
		return
	}
	result := BStoreSealExtentResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.SealedError != nil {
		err = result.SealedError
		return
	} else if result.FailedError != nil {
		err = result.FailedError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.ServiceError != nil {
		err = result.ServiceError
		return
	}
	return
}

// Parameters:
//  - PurgeRequest
func (p *BStoreClient) PurgeMessages(purgeRequest *PurgeMessagesRequest) (r *PurgeMessagesResult_, err error) {
	if err = p.sendPurgeMessages(purgeRequest); err != nil {
		return
	}
	return p.recvPurgeMessages()
}

func (p *BStoreClient) sendPurgeMessages(purgeRequest *PurgeMessagesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("purgeMessages", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BStorePurgeMessagesArgs{
		PurgeRequest: purgeRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BStoreClient) recvPurgeMessages() (value *PurgeMessagesResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "purgeMessages" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "purgeMessages failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "purgeMessages failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error7 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error8 error
		error8, err = error7.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error8
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "purgeMessages failed: invalid message type")
		return
	}
	result := BStorePurgeMessagesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.NotFoundError != nil {
		err = result.NotFoundError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.ServiceError != nil {
		err = result.ServiceError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReadMessagesRequest
func (p *BStoreClient) ReadMessages(readMessagesRequest *ReadMessagesRequest) (r *ReadMessagesResult_, err error) {
	if err = p.sendReadMessages(readMessagesRequest); err != nil {
		return
	}
	return p.recvReadMessages()
}

func (p *BStoreClient) sendReadMessages(readMessagesRequest *ReadMessagesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("readMessages", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BStoreReadMessagesArgs{
		ReadMessagesRequest: readMessagesRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BStoreClient) recvReadMessages() (value *ReadMessagesResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "readMessages" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readMessages failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readMessages failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error9 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error10 error
		error10, err = error9.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error10
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readMessages failed: invalid message type")
		return
	}
	result := BStoreReadMessagesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.ExtentNotFoundError != nil {
		err = result.ExtentNotFoundError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.ServiceError != nil {
		err = result.ServiceError
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReplicateExtentRequest
func (p *BStoreClient) ReplicateExtent(replicateExtentRequest *ReplicateExtentRequest) (err error) {
	if err = p.sendReplicateExtent(replicateExtentRequest); err != nil {
		return
	}
	return p.recvReplicateExtent()
}

func (p *BStoreClient) sendReplicateExtent(replicateExtentRequest *ReplicateExtentRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("replicateExtent", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BStoreReplicateExtentArgs{
		ReplicateExtentRequest: replicateExtentRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BStoreClient) recvReplicateExtent() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "replicateExtent" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "replicateExtent failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "replicateExtent failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error11 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error12 error
		error12, err = error11.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error12
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "replicateExtent failed: invalid message type")
		return
	}
	result := BStoreReplicateExtentResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.ExtentNotFoundError != nil {
		err = result.ExtentNotFoundError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.ServiceError != nil {
		err = result.ServiceError
		return
	}
	return
}

// Parameters:
//  - Request
func (p *BStoreClient) RemoteReplicateExtent(request *RemoteReplicateExtentRequest) (err error) {
	if err = p.sendRemoteReplicateExtent(request); err != nil {
		return
	}
	return p.recvRemoteReplicateExtent()
}

func (p *BStoreClient) sendRemoteReplicateExtent(request *RemoteReplicateExtentRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("remoteReplicateExtent", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BStoreRemoteReplicateExtentArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BStoreClient) recvRemoteReplicateExtent() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "remoteReplicateExtent" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "remoteReplicateExtent failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "remoteReplicateExtent failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error13 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error14 error
		error14, err = error13.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error14
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "remoteReplicateExtent failed: invalid message type")
		return
	}
	result := BStoreRemoteReplicateExtentResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.ExtentNotFoundError != nil {
		err = result.ExtentNotFoundError
		return
	} else if result.RequestError != nil {
		err = result.RequestError
		return
	} else if result.ServiceError != nil {
		err = result.ServiceError
		return
	}
	return
}

type BStoreProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      BStore
}

func (p *BStoreProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *BStoreProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *BStoreProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewBStoreProcessor(handler BStore) *BStoreProcessor {

	self15 := &BStoreProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self15.processorMap["getAddressFromTimestamp"] = &bStoreProcessorGetAddressFromTimestamp{handler: handler}
	self15.processorMap["getExtentInfo"] = &bStoreProcessorGetExtentInfo{handler: handler}
	self15.processorMap["sealExtent"] = &bStoreProcessorSealExtent{handler: handler}
	self15.processorMap["purgeMessages"] = &bStoreProcessorPurgeMessages{handler: handler}
	self15.processorMap["readMessages"] = &bStoreProcessorReadMessages{handler: handler}
	self15.processorMap["replicateExtent"] = &bStoreProcessorReplicateExtent{handler: handler}
	self15.processorMap["remoteReplicateExtent"] = &bStoreProcessorRemoteReplicateExtent{handler: handler}
	return self15
}

func (p *BStoreProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x16 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x16.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x16

}

type bStoreProcessorGetAddressFromTimestamp struct {
	handler BStore
}

func (p *bStoreProcessorGetAddressFromTimestamp) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BStoreGetAddressFromTimestampArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAddressFromTimestamp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BStoreGetAddressFromTimestampResult{}
	var retval *GetAddressFromTimestampResult_
	var err2 error
	if retval, err2 = p.handler.GetAddressFromTimestamp(args.GetAddressRequest); err2 != nil {
		switch v := err2.(type) {
		case *ExtentNotFoundError:
			result.NotFoundError = v
		case *BadStoreRequestError:
			result.RequestError = v
		case *StoreServiceError:
			result.ServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAddressFromTimestamp: "+err2.Error())
			oprot.WriteMessageBegin("getAddressFromTimestamp", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAddressFromTimestamp", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bStoreProcessorGetExtentInfo struct {
	handler BStore
}

func (p *bStoreProcessorGetExtentInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BStoreGetExtentInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getExtentInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BStoreGetExtentInfoResult{}
	var retval *ExtentInfo
	var err2 error
	if retval, err2 = p.handler.GetExtentInfo(args.ExtentInfoRequest); err2 != nil {
		switch v := err2.(type) {
		case *ExtentNotFoundError:
			result.NotFoundError = v
		case *BadStoreRequestError:
			result.RequestError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getExtentInfo: "+err2.Error())
			oprot.WriteMessageBegin("getExtentInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getExtentInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bStoreProcessorSealExtent struct {
	handler BStore
}

func (p *bStoreProcessorSealExtent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BStoreSealExtentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sealExtent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BStoreSealExtentResult{}
	var err2 error
	if err2 = p.handler.SealExtent(args.SealRequest); err2 != nil {
		switch v := err2.(type) {
		case *ExtentSealedError:
			result.SealedError = v
		case *ExtentFailedToSealError:
			result.FailedError = v
		case *BadStoreRequestError:
			result.RequestError = v
		case *StoreServiceError:
			result.ServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sealExtent: "+err2.Error())
			oprot.WriteMessageBegin("sealExtent", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("sealExtent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bStoreProcessorPurgeMessages struct {
	handler BStore
}

func (p *bStoreProcessorPurgeMessages) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BStorePurgeMessagesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("purgeMessages", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BStorePurgeMessagesResult{}
	var retval *PurgeMessagesResult_
	var err2 error
	if retval, err2 = p.handler.PurgeMessages(args.PurgeRequest); err2 != nil {
		switch v := err2.(type) {
		case *ExtentNotFoundError:
			result.NotFoundError = v
		case *BadStoreRequestError:
			result.RequestError = v
		case *StoreServiceError:
			result.ServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing purgeMessages: "+err2.Error())
			oprot.WriteMessageBegin("purgeMessages", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("purgeMessages", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bStoreProcessorReadMessages struct {
	handler BStore
}

func (p *bStoreProcessorReadMessages) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BStoreReadMessagesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("readMessages", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BStoreReadMessagesResult{}
	var retval *ReadMessagesResult_
	var err2 error
	if retval, err2 = p.handler.ReadMessages(args.ReadMessagesRequest); err2 != nil {
		switch v := err2.(type) {
		case *ExtentNotFoundError:
			result.ExtentNotFoundError = v
		case *BadStoreRequestError:
			result.RequestError = v
		case *StoreServiceError:
			result.ServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readMessages: "+err2.Error())
			oprot.WriteMessageBegin("readMessages", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("readMessages", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bStoreProcessorReplicateExtent struct {
	handler BStore
}

func (p *bStoreProcessorReplicateExtent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BStoreReplicateExtentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("replicateExtent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BStoreReplicateExtentResult{}
	var err2 error
	if err2 = p.handler.ReplicateExtent(args.ReplicateExtentRequest); err2 != nil {
		switch v := err2.(type) {
		case *ExtentNotFoundError:
			result.ExtentNotFoundError = v
		case *BadStoreRequestError:
			result.RequestError = v
		case *StoreServiceError:
			result.ServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing replicateExtent: "+err2.Error())
			oprot.WriteMessageBegin("replicateExtent", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("replicateExtent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bStoreProcessorRemoteReplicateExtent struct {
	handler BStore
}

func (p *bStoreProcessorRemoteReplicateExtent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BStoreRemoteReplicateExtentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("remoteReplicateExtent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BStoreRemoteReplicateExtentResult{}
	var err2 error
	if err2 = p.handler.RemoteReplicateExtent(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *ExtentNotFoundError:
			result.ExtentNotFoundError = v
		case *BadStoreRequestError:
			result.RequestError = v
		case *StoreServiceError:
			result.ServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing remoteReplicateExtent: "+err2.Error())
			oprot.WriteMessageBegin("remoteReplicateExtent", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("remoteReplicateExtent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - GetAddressRequest
type BStoreGetAddressFromTimestampArgs struct {
	GetAddressRequest *GetAddressFromTimestampRequest `thrift:"getAddressRequest,1" json:"getAddressRequest"`
}

func NewBStoreGetAddressFromTimestampArgs() *BStoreGetAddressFromTimestampArgs {
	return &BStoreGetAddressFromTimestampArgs{}
}

var BStoreGetAddressFromTimestampArgs_GetAddressRequest_DEFAULT *GetAddressFromTimestampRequest

func (p *BStoreGetAddressFromTimestampArgs) GetGetAddressRequest() *GetAddressFromTimestampRequest {
	if !p.IsSetGetAddressRequest() {
		return BStoreGetAddressFromTimestampArgs_GetAddressRequest_DEFAULT
	}
	return p.GetAddressRequest
}
func (p *BStoreGetAddressFromTimestampArgs) IsSetGetAddressRequest() bool {
	return p.GetAddressRequest != nil
}

func (p *BStoreGetAddressFromTimestampArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BStoreGetAddressFromTimestampArgs) readField1(iprot thrift.TProtocol) error {
	p.GetAddressRequest = &GetAddressFromTimestampRequest{}
	if err := p.GetAddressRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetAddressRequest), err)
	}
	return nil
}

func (p *BStoreGetAddressFromTimestampArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAddressFromTimestamp_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BStoreGetAddressFromTimestampArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("getAddressRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getAddressRequest: ", p), err)
	}
	if err := p.GetAddressRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetAddressRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getAddressRequest: ", p), err)
	}
	return err
}

func (p *BStoreGetAddressFromTimestampArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BStoreGetAddressFromTimestampArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - NotFoundError
//  - RequestError
//  - ServiceError
type BStoreGetAddressFromTimestampResult struct {
	Success       *GetAddressFromTimestampResult_ `thrift:"success,0" json:"success,omitempty"`
	NotFoundError *ExtentNotFoundError            `thrift:"notFoundError,1" json:"notFoundError,omitempty"`
	RequestError  *BadStoreRequestError           `thrift:"requestError,2" json:"requestError,omitempty"`
	ServiceError  *StoreServiceError              `thrift:"serviceError,3" json:"serviceError,omitempty"`
}

func NewBStoreGetAddressFromTimestampResult() *BStoreGetAddressFromTimestampResult {
	return &BStoreGetAddressFromTimestampResult{}
}

var BStoreGetAddressFromTimestampResult_Success_DEFAULT *GetAddressFromTimestampResult_

func (p *BStoreGetAddressFromTimestampResult) GetSuccess() *GetAddressFromTimestampResult_ {
	if !p.IsSetSuccess() {
		return BStoreGetAddressFromTimestampResult_Success_DEFAULT
	}
	return p.Success
}

var BStoreGetAddressFromTimestampResult_NotFoundError_DEFAULT *ExtentNotFoundError

func (p *BStoreGetAddressFromTimestampResult) GetNotFoundError() *ExtentNotFoundError {
	if !p.IsSetNotFoundError() {
		return BStoreGetAddressFromTimestampResult_NotFoundError_DEFAULT
	}
	return p.NotFoundError
}

var BStoreGetAddressFromTimestampResult_RequestError_DEFAULT *BadStoreRequestError

func (p *BStoreGetAddressFromTimestampResult) GetRequestError() *BadStoreRequestError {
	if !p.IsSetRequestError() {
		return BStoreGetAddressFromTimestampResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var BStoreGetAddressFromTimestampResult_ServiceError_DEFAULT *StoreServiceError

func (p *BStoreGetAddressFromTimestampResult) GetServiceError() *StoreServiceError {
	if !p.IsSetServiceError() {
		return BStoreGetAddressFromTimestampResult_ServiceError_DEFAULT
	}
	return p.ServiceError
}
func (p *BStoreGetAddressFromTimestampResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BStoreGetAddressFromTimestampResult) IsSetNotFoundError() bool {
	return p.NotFoundError != nil
}

func (p *BStoreGetAddressFromTimestampResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BStoreGetAddressFromTimestampResult) IsSetServiceError() bool {
	return p.ServiceError != nil
}

func (p *BStoreGetAddressFromTimestampResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BStoreGetAddressFromTimestampResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &GetAddressFromTimestampResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BStoreGetAddressFromTimestampResult) readField1(iprot thrift.TProtocol) error {
	p.NotFoundError = &ExtentNotFoundError{}
	if err := p.NotFoundError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundError), err)
	}
	return nil
}

func (p *BStoreGetAddressFromTimestampResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &BadStoreRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BStoreGetAddressFromTimestampResult) readField3(iprot thrift.TProtocol) error {
	p.ServiceError = &StoreServiceError{}
	if err := p.ServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServiceError), err)
	}
	return nil
}

func (p *BStoreGetAddressFromTimestampResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAddressFromTimestamp_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BStoreGetAddressFromTimestampResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BStoreGetAddressFromTimestampResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundError() {
		if err := oprot.WriteFieldBegin("notFoundError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:notFoundError: ", p), err)
		}
		if err := p.NotFoundError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:notFoundError: ", p), err)
		}
	}
	return err
}

func (p *BStoreGetAddressFromTimestampResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *BStoreGetAddressFromTimestampResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceError() {
		if err := oprot.WriteFieldBegin("serviceError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serviceError: ", p), err)
		}
		if err := p.ServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serviceError: ", p), err)
		}
	}
	return err
}

func (p *BStoreGetAddressFromTimestampResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BStoreGetAddressFromTimestampResult(%+v)", *p)
}

// Attributes:
//  - ExtentInfoRequest
type BStoreGetExtentInfoArgs struct {
	ExtentInfoRequest *GetExtentInfoRequest `thrift:"extentInfoRequest,1" json:"extentInfoRequest"`
}

func NewBStoreGetExtentInfoArgs() *BStoreGetExtentInfoArgs {
	return &BStoreGetExtentInfoArgs{}
}

var BStoreGetExtentInfoArgs_ExtentInfoRequest_DEFAULT *GetExtentInfoRequest

func (p *BStoreGetExtentInfoArgs) GetExtentInfoRequest() *GetExtentInfoRequest {
	if !p.IsSetExtentInfoRequest() {
		return BStoreGetExtentInfoArgs_ExtentInfoRequest_DEFAULT
	}
	return p.ExtentInfoRequest
}
func (p *BStoreGetExtentInfoArgs) IsSetExtentInfoRequest() bool {
	return p.ExtentInfoRequest != nil
}

func (p *BStoreGetExtentInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BStoreGetExtentInfoArgs) readField1(iprot thrift.TProtocol) error {
	p.ExtentInfoRequest = &GetExtentInfoRequest{}
	if err := p.ExtentInfoRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExtentInfoRequest), err)
	}
	return nil
}

func (p *BStoreGetExtentInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getExtentInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BStoreGetExtentInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extentInfoRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentInfoRequest: ", p), err)
	}
	if err := p.ExtentInfoRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExtentInfoRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentInfoRequest: ", p), err)
	}
	return err
}

func (p *BStoreGetExtentInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BStoreGetExtentInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - NotFoundError
//  - RequestError
type BStoreGetExtentInfoResult struct {
	Success       *ExtentInfo           `thrift:"success,0" json:"success,omitempty"`
	NotFoundError *ExtentNotFoundError  `thrift:"notFoundError,1" json:"notFoundError,omitempty"`
	RequestError  *BadStoreRequestError `thrift:"requestError,2" json:"requestError,omitempty"`
}

func NewBStoreGetExtentInfoResult() *BStoreGetExtentInfoResult {
	return &BStoreGetExtentInfoResult{}
}

var BStoreGetExtentInfoResult_Success_DEFAULT *ExtentInfo

func (p *BStoreGetExtentInfoResult) GetSuccess() *ExtentInfo {
	if !p.IsSetSuccess() {
		return BStoreGetExtentInfoResult_Success_DEFAULT
	}
	return p.Success
}

var BStoreGetExtentInfoResult_NotFoundError_DEFAULT *ExtentNotFoundError

func (p *BStoreGetExtentInfoResult) GetNotFoundError() *ExtentNotFoundError {
	if !p.IsSetNotFoundError() {
		return BStoreGetExtentInfoResult_NotFoundError_DEFAULT
	}
	return p.NotFoundError
}

var BStoreGetExtentInfoResult_RequestError_DEFAULT *BadStoreRequestError

func (p *BStoreGetExtentInfoResult) GetRequestError() *BadStoreRequestError {
	if !p.IsSetRequestError() {
		return BStoreGetExtentInfoResult_RequestError_DEFAULT
	}
	return p.RequestError
}
func (p *BStoreGetExtentInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BStoreGetExtentInfoResult) IsSetNotFoundError() bool {
	return p.NotFoundError != nil
}

func (p *BStoreGetExtentInfoResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BStoreGetExtentInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BStoreGetExtentInfoResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ExtentInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BStoreGetExtentInfoResult) readField1(iprot thrift.TProtocol) error {
	p.NotFoundError = &ExtentNotFoundError{}
	if err := p.NotFoundError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundError), err)
	}
	return nil
}

func (p *BStoreGetExtentInfoResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &BadStoreRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BStoreGetExtentInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getExtentInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BStoreGetExtentInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BStoreGetExtentInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundError() {
		if err := oprot.WriteFieldBegin("notFoundError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:notFoundError: ", p), err)
		}
		if err := p.NotFoundError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:notFoundError: ", p), err)
		}
	}
	return err
}

func (p *BStoreGetExtentInfoResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *BStoreGetExtentInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BStoreGetExtentInfoResult(%+v)", *p)
}

// Attributes:
//  - SealRequest
type BStoreSealExtentArgs struct {
	SealRequest *SealExtentRequest `thrift:"sealRequest,1" json:"sealRequest"`
}

func NewBStoreSealExtentArgs() *BStoreSealExtentArgs {
	return &BStoreSealExtentArgs{}
}

var BStoreSealExtentArgs_SealRequest_DEFAULT *SealExtentRequest

func (p *BStoreSealExtentArgs) GetSealRequest() *SealExtentRequest {
	if !p.IsSetSealRequest() {
		return BStoreSealExtentArgs_SealRequest_DEFAULT
	}
	return p.SealRequest
}
func (p *BStoreSealExtentArgs) IsSetSealRequest() bool {
	return p.SealRequest != nil
}

func (p *BStoreSealExtentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BStoreSealExtentArgs) readField1(iprot thrift.TProtocol) error {
	p.SealRequest = &SealExtentRequest{}
	if err := p.SealRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SealRequest), err)
	}
	return nil
}

func (p *BStoreSealExtentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sealExtent_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BStoreSealExtentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sealRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sealRequest: ", p), err)
	}
	if err := p.SealRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SealRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sealRequest: ", p), err)
	}
	return err
}

func (p *BStoreSealExtentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BStoreSealExtentArgs(%+v)", *p)
}

// Attributes:
//  - SealedError
//  - FailedError
//  - RequestError
//  - ServiceError
type BStoreSealExtentResult struct {
	SealedError  *ExtentSealedError       `thrift:"sealedError,1" json:"sealedError,omitempty"`
	FailedError  *ExtentFailedToSealError `thrift:"failedError,2" json:"failedError,omitempty"`
	RequestError *BadStoreRequestError    `thrift:"requestError,3" json:"requestError,omitempty"`
	ServiceError *StoreServiceError       `thrift:"serviceError,4" json:"serviceError,omitempty"`
}

func NewBStoreSealExtentResult() *BStoreSealExtentResult {
	return &BStoreSealExtentResult{}
}

var BStoreSealExtentResult_SealedError_DEFAULT *ExtentSealedError

func (p *BStoreSealExtentResult) GetSealedError() *ExtentSealedError {
	if !p.IsSetSealedError() {
		return BStoreSealExtentResult_SealedError_DEFAULT
	}
	return p.SealedError
}

var BStoreSealExtentResult_FailedError_DEFAULT *ExtentFailedToSealError

func (p *BStoreSealExtentResult) GetFailedError() *ExtentFailedToSealError {
	if !p.IsSetFailedError() {
		return BStoreSealExtentResult_FailedError_DEFAULT
	}
	return p.FailedError
}

var BStoreSealExtentResult_RequestError_DEFAULT *BadStoreRequestError

func (p *BStoreSealExtentResult) GetRequestError() *BadStoreRequestError {
	if !p.IsSetRequestError() {
		return BStoreSealExtentResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var BStoreSealExtentResult_ServiceError_DEFAULT *StoreServiceError

func (p *BStoreSealExtentResult) GetServiceError() *StoreServiceError {
	if !p.IsSetServiceError() {
		return BStoreSealExtentResult_ServiceError_DEFAULT
	}
	return p.ServiceError
}
func (p *BStoreSealExtentResult) IsSetSealedError() bool {
	return p.SealedError != nil
}

func (p *BStoreSealExtentResult) IsSetFailedError() bool {
	return p.FailedError != nil
}

func (p *BStoreSealExtentResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BStoreSealExtentResult) IsSetServiceError() bool {
	return p.ServiceError != nil
}

func (p *BStoreSealExtentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BStoreSealExtentResult) readField1(iprot thrift.TProtocol) error {
	p.SealedError = &ExtentSealedError{}
	if err := p.SealedError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SealedError), err)
	}
	return nil
}

func (p *BStoreSealExtentResult) readField2(iprot thrift.TProtocol) error {
	p.FailedError = &ExtentFailedToSealError{}
	if err := p.FailedError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FailedError), err)
	}
	return nil
}

func (p *BStoreSealExtentResult) readField3(iprot thrift.TProtocol) error {
	p.RequestError = &BadStoreRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BStoreSealExtentResult) readField4(iprot thrift.TProtocol) error {
	p.ServiceError = &StoreServiceError{}
	if err := p.ServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServiceError), err)
	}
	return nil
}

func (p *BStoreSealExtentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sealExtent_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BStoreSealExtentResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSealedError() {
		if err := oprot.WriteFieldBegin("sealedError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sealedError: ", p), err)
		}
		if err := p.SealedError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SealedError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sealedError: ", p), err)
		}
	}
	return err
}

func (p *BStoreSealExtentResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFailedError() {
		if err := oprot.WriteFieldBegin("failedError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:failedError: ", p), err)
		}
		if err := p.FailedError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FailedError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:failedError: ", p), err)
		}
	}
	return err
}

func (p *BStoreSealExtentResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:requestError: ", p), err)
		}
	}
	return err
}

func (p *BStoreSealExtentResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceError() {
		if err := oprot.WriteFieldBegin("serviceError", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:serviceError: ", p), err)
		}
		if err := p.ServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:serviceError: ", p), err)
		}
	}
	return err
}

func (p *BStoreSealExtentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BStoreSealExtentResult(%+v)", *p)
}

// Attributes:
//  - PurgeRequest
type BStorePurgeMessagesArgs struct {
	PurgeRequest *PurgeMessagesRequest `thrift:"purgeRequest,1" json:"purgeRequest"`
}

func NewBStorePurgeMessagesArgs() *BStorePurgeMessagesArgs {
	return &BStorePurgeMessagesArgs{}
}

var BStorePurgeMessagesArgs_PurgeRequest_DEFAULT *PurgeMessagesRequest

func (p *BStorePurgeMessagesArgs) GetPurgeRequest() *PurgeMessagesRequest {
	if !p.IsSetPurgeRequest() {
		return BStorePurgeMessagesArgs_PurgeRequest_DEFAULT
	}
	return p.PurgeRequest
}
func (p *BStorePurgeMessagesArgs) IsSetPurgeRequest() bool {
	return p.PurgeRequest != nil
}

func (p *BStorePurgeMessagesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BStorePurgeMessagesArgs) readField1(iprot thrift.TProtocol) error {
	p.PurgeRequest = &PurgeMessagesRequest{}
	if err := p.PurgeRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PurgeRequest), err)
	}
	return nil
}

func (p *BStorePurgeMessagesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("purgeMessages_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BStorePurgeMessagesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("purgeRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:purgeRequest: ", p), err)
	}
	if err := p.PurgeRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PurgeRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:purgeRequest: ", p), err)
	}
	return err
}

func (p *BStorePurgeMessagesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BStorePurgeMessagesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - NotFoundError
//  - RequestError
//  - ServiceError
type BStorePurgeMessagesResult struct {
	Success       *PurgeMessagesResult_ `thrift:"success,0" json:"success,omitempty"`
	NotFoundError *ExtentNotFoundError  `thrift:"notFoundError,1" json:"notFoundError,omitempty"`
	RequestError  *BadStoreRequestError `thrift:"requestError,2" json:"requestError,omitempty"`
	ServiceError  *StoreServiceError    `thrift:"serviceError,3" json:"serviceError,omitempty"`
}

func NewBStorePurgeMessagesResult() *BStorePurgeMessagesResult {
	return &BStorePurgeMessagesResult{}
}

var BStorePurgeMessagesResult_Success_DEFAULT *PurgeMessagesResult_

func (p *BStorePurgeMessagesResult) GetSuccess() *PurgeMessagesResult_ {
	if !p.IsSetSuccess() {
		return BStorePurgeMessagesResult_Success_DEFAULT
	}
	return p.Success
}

var BStorePurgeMessagesResult_NotFoundError_DEFAULT *ExtentNotFoundError

func (p *BStorePurgeMessagesResult) GetNotFoundError() *ExtentNotFoundError {
	if !p.IsSetNotFoundError() {
		return BStorePurgeMessagesResult_NotFoundError_DEFAULT
	}
	return p.NotFoundError
}

var BStorePurgeMessagesResult_RequestError_DEFAULT *BadStoreRequestError

func (p *BStorePurgeMessagesResult) GetRequestError() *BadStoreRequestError {
	if !p.IsSetRequestError() {
		return BStorePurgeMessagesResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var BStorePurgeMessagesResult_ServiceError_DEFAULT *StoreServiceError

func (p *BStorePurgeMessagesResult) GetServiceError() *StoreServiceError {
	if !p.IsSetServiceError() {
		return BStorePurgeMessagesResult_ServiceError_DEFAULT
	}
	return p.ServiceError
}
func (p *BStorePurgeMessagesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BStorePurgeMessagesResult) IsSetNotFoundError() bool {
	return p.NotFoundError != nil
}

func (p *BStorePurgeMessagesResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BStorePurgeMessagesResult) IsSetServiceError() bool {
	return p.ServiceError != nil
}

func (p *BStorePurgeMessagesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BStorePurgeMessagesResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &PurgeMessagesResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BStorePurgeMessagesResult) readField1(iprot thrift.TProtocol) error {
	p.NotFoundError = &ExtentNotFoundError{}
	if err := p.NotFoundError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundError), err)
	}
	return nil
}

func (p *BStorePurgeMessagesResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &BadStoreRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BStorePurgeMessagesResult) readField3(iprot thrift.TProtocol) error {
	p.ServiceError = &StoreServiceError{}
	if err := p.ServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServiceError), err)
	}
	return nil
}

func (p *BStorePurgeMessagesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("purgeMessages_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BStorePurgeMessagesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BStorePurgeMessagesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundError() {
		if err := oprot.WriteFieldBegin("notFoundError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:notFoundError: ", p), err)
		}
		if err := p.NotFoundError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:notFoundError: ", p), err)
		}
	}
	return err
}

func (p *BStorePurgeMessagesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *BStorePurgeMessagesResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceError() {
		if err := oprot.WriteFieldBegin("serviceError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serviceError: ", p), err)
		}
		if err := p.ServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serviceError: ", p), err)
		}
	}
	return err
}

func (p *BStorePurgeMessagesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BStorePurgeMessagesResult(%+v)", *p)
}

// Attributes:
//  - ReadMessagesRequest
type BStoreReadMessagesArgs struct {
	ReadMessagesRequest *ReadMessagesRequest `thrift:"readMessagesRequest,1" json:"readMessagesRequest"`
}

func NewBStoreReadMessagesArgs() *BStoreReadMessagesArgs {
	return &BStoreReadMessagesArgs{}
}

var BStoreReadMessagesArgs_ReadMessagesRequest_DEFAULT *ReadMessagesRequest

func (p *BStoreReadMessagesArgs) GetReadMessagesRequest() *ReadMessagesRequest {
	if !p.IsSetReadMessagesRequest() {
		return BStoreReadMessagesArgs_ReadMessagesRequest_DEFAULT
	}
	return p.ReadMessagesRequest
}
func (p *BStoreReadMessagesArgs) IsSetReadMessagesRequest() bool {
	return p.ReadMessagesRequest != nil
}

func (p *BStoreReadMessagesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BStoreReadMessagesArgs) readField1(iprot thrift.TProtocol) error {
	p.ReadMessagesRequest = &ReadMessagesRequest{}
	if err := p.ReadMessagesRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ReadMessagesRequest), err)
	}
	return nil
}

func (p *BStoreReadMessagesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readMessages_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BStoreReadMessagesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("readMessagesRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:readMessagesRequest: ", p), err)
	}
	if err := p.ReadMessagesRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ReadMessagesRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:readMessagesRequest: ", p), err)
	}
	return err
}

func (p *BStoreReadMessagesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BStoreReadMessagesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - ExtentNotFoundError
//  - RequestError
//  - ServiceError
type BStoreReadMessagesResult struct {
	Success             *ReadMessagesResult_  `thrift:"success,0" json:"success,omitempty"`
	ExtentNotFoundError *ExtentNotFoundError  `thrift:"extentNotFoundError,1" json:"extentNotFoundError,omitempty"`
	RequestError        *BadStoreRequestError `thrift:"requestError,2" json:"requestError,omitempty"`
	ServiceError        *StoreServiceError    `thrift:"serviceError,3" json:"serviceError,omitempty"`
}

func NewBStoreReadMessagesResult() *BStoreReadMessagesResult {
	return &BStoreReadMessagesResult{}
}

var BStoreReadMessagesResult_Success_DEFAULT *ReadMessagesResult_

func (p *BStoreReadMessagesResult) GetSuccess() *ReadMessagesResult_ {
	if !p.IsSetSuccess() {
		return BStoreReadMessagesResult_Success_DEFAULT
	}
	return p.Success
}

var BStoreReadMessagesResult_ExtentNotFoundError_DEFAULT *ExtentNotFoundError

func (p *BStoreReadMessagesResult) GetExtentNotFoundError() *ExtentNotFoundError {
	if !p.IsSetExtentNotFoundError() {
		return BStoreReadMessagesResult_ExtentNotFoundError_DEFAULT
	}
	return p.ExtentNotFoundError
}

var BStoreReadMessagesResult_RequestError_DEFAULT *BadStoreRequestError

func (p *BStoreReadMessagesResult) GetRequestError() *BadStoreRequestError {
	if !p.IsSetRequestError() {
		return BStoreReadMessagesResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var BStoreReadMessagesResult_ServiceError_DEFAULT *StoreServiceError

func (p *BStoreReadMessagesResult) GetServiceError() *StoreServiceError {
	if !p.IsSetServiceError() {
		return BStoreReadMessagesResult_ServiceError_DEFAULT
	}
	return p.ServiceError
}
func (p *BStoreReadMessagesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BStoreReadMessagesResult) IsSetExtentNotFoundError() bool {
	return p.ExtentNotFoundError != nil
}

func (p *BStoreReadMessagesResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BStoreReadMessagesResult) IsSetServiceError() bool {
	return p.ServiceError != nil
}

func (p *BStoreReadMessagesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BStoreReadMessagesResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ReadMessagesResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BStoreReadMessagesResult) readField1(iprot thrift.TProtocol) error {
	p.ExtentNotFoundError = &ExtentNotFoundError{}
	if err := p.ExtentNotFoundError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExtentNotFoundError), err)
	}
	return nil
}

func (p *BStoreReadMessagesResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &BadStoreRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BStoreReadMessagesResult) readField3(iprot thrift.TProtocol) error {
	p.ServiceError = &StoreServiceError{}
	if err := p.ServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServiceError), err)
	}
	return nil
}

func (p *BStoreReadMessagesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("readMessages_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BStoreReadMessagesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BStoreReadMessagesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentNotFoundError() {
		if err := oprot.WriteFieldBegin("extentNotFoundError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentNotFoundError: ", p), err)
		}
		if err := p.ExtentNotFoundError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExtentNotFoundError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentNotFoundError: ", p), err)
		}
	}
	return err
}

func (p *BStoreReadMessagesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *BStoreReadMessagesResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceError() {
		if err := oprot.WriteFieldBegin("serviceError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serviceError: ", p), err)
		}
		if err := p.ServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serviceError: ", p), err)
		}
	}
	return err
}

func (p *BStoreReadMessagesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BStoreReadMessagesResult(%+v)", *p)
}

// Attributes:
//  - ReplicateExtentRequest
type BStoreReplicateExtentArgs struct {
	ReplicateExtentRequest *ReplicateExtentRequest `thrift:"replicateExtentRequest,1" json:"replicateExtentRequest"`
}

func NewBStoreReplicateExtentArgs() *BStoreReplicateExtentArgs {
	return &BStoreReplicateExtentArgs{}
}

var BStoreReplicateExtentArgs_ReplicateExtentRequest_DEFAULT *ReplicateExtentRequest

func (p *BStoreReplicateExtentArgs) GetReplicateExtentRequest() *ReplicateExtentRequest {
	if !p.IsSetReplicateExtentRequest() {
		return BStoreReplicateExtentArgs_ReplicateExtentRequest_DEFAULT
	}
	return p.ReplicateExtentRequest
}
func (p *BStoreReplicateExtentArgs) IsSetReplicateExtentRequest() bool {
	return p.ReplicateExtentRequest != nil
}

func (p *BStoreReplicateExtentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BStoreReplicateExtentArgs) readField1(iprot thrift.TProtocol) error {
	p.ReplicateExtentRequest = &ReplicateExtentRequest{}
	if err := p.ReplicateExtentRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ReplicateExtentRequest), err)
	}
	return nil
}

func (p *BStoreReplicateExtentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("replicateExtent_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BStoreReplicateExtentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("replicateExtentRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:replicateExtentRequest: ", p), err)
	}
	if err := p.ReplicateExtentRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ReplicateExtentRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:replicateExtentRequest: ", p), err)
	}
	return err
}

func (p *BStoreReplicateExtentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BStoreReplicateExtentArgs(%+v)", *p)
}

// Attributes:
//  - ExtentNotFoundError
//  - RequestError
//  - ServiceError
type BStoreReplicateExtentResult struct {
	ExtentNotFoundError *ExtentNotFoundError  `thrift:"extentNotFoundError,1" json:"extentNotFoundError,omitempty"`
	RequestError        *BadStoreRequestError `thrift:"requestError,2" json:"requestError,omitempty"`
	ServiceError        *StoreServiceError    `thrift:"serviceError,3" json:"serviceError,omitempty"`
}

func NewBStoreReplicateExtentResult() *BStoreReplicateExtentResult {
	return &BStoreReplicateExtentResult{}
}

var BStoreReplicateExtentResult_ExtentNotFoundError_DEFAULT *ExtentNotFoundError

func (p *BStoreReplicateExtentResult) GetExtentNotFoundError() *ExtentNotFoundError {
	if !p.IsSetExtentNotFoundError() {
		return BStoreReplicateExtentResult_ExtentNotFoundError_DEFAULT
	}
	return p.ExtentNotFoundError
}

var BStoreReplicateExtentResult_RequestError_DEFAULT *BadStoreRequestError

func (p *BStoreReplicateExtentResult) GetRequestError() *BadStoreRequestError {
	if !p.IsSetRequestError() {
		return BStoreReplicateExtentResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var BStoreReplicateExtentResult_ServiceError_DEFAULT *StoreServiceError

func (p *BStoreReplicateExtentResult) GetServiceError() *StoreServiceError {
	if !p.IsSetServiceError() {
		return BStoreReplicateExtentResult_ServiceError_DEFAULT
	}
	return p.ServiceError
}
func (p *BStoreReplicateExtentResult) IsSetExtentNotFoundError() bool {
	return p.ExtentNotFoundError != nil
}

func (p *BStoreReplicateExtentResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BStoreReplicateExtentResult) IsSetServiceError() bool {
	return p.ServiceError != nil
}

func (p *BStoreReplicateExtentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BStoreReplicateExtentResult) readField1(iprot thrift.TProtocol) error {
	p.ExtentNotFoundError = &ExtentNotFoundError{}
	if err := p.ExtentNotFoundError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExtentNotFoundError), err)
	}
	return nil
}

func (p *BStoreReplicateExtentResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &BadStoreRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BStoreReplicateExtentResult) readField3(iprot thrift.TProtocol) error {
	p.ServiceError = &StoreServiceError{}
	if err := p.ServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServiceError), err)
	}
	return nil
}

func (p *BStoreReplicateExtentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("replicateExtent_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BStoreReplicateExtentResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentNotFoundError() {
		if err := oprot.WriteFieldBegin("extentNotFoundError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentNotFoundError: ", p), err)
		}
		if err := p.ExtentNotFoundError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExtentNotFoundError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentNotFoundError: ", p), err)
		}
	}
	return err
}

func (p *BStoreReplicateExtentResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *BStoreReplicateExtentResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceError() {
		if err := oprot.WriteFieldBegin("serviceError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serviceError: ", p), err)
		}
		if err := p.ServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serviceError: ", p), err)
		}
	}
	return err
}

func (p *BStoreReplicateExtentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BStoreReplicateExtentResult(%+v)", *p)
}

// Attributes:
//  - Request
type BStoreRemoteReplicateExtentArgs struct {
	Request *RemoteReplicateExtentRequest `thrift:"request,1" json:"request"`
}

func NewBStoreRemoteReplicateExtentArgs() *BStoreRemoteReplicateExtentArgs {
	return &BStoreRemoteReplicateExtentArgs{}
}

var BStoreRemoteReplicateExtentArgs_Request_DEFAULT *RemoteReplicateExtentRequest

func (p *BStoreRemoteReplicateExtentArgs) GetRequest() *RemoteReplicateExtentRequest {
	if !p.IsSetRequest() {
		return BStoreRemoteReplicateExtentArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *BStoreRemoteReplicateExtentArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BStoreRemoteReplicateExtentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BStoreRemoteReplicateExtentArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &RemoteReplicateExtentRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *BStoreRemoteReplicateExtentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("remoteReplicateExtent_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BStoreRemoteReplicateExtentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *BStoreRemoteReplicateExtentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BStoreRemoteReplicateExtentArgs(%+v)", *p)
}

// Attributes:
//  - ExtentNotFoundError
//  - RequestError
//  - ServiceError
type BStoreRemoteReplicateExtentResult struct {
	ExtentNotFoundError *ExtentNotFoundError  `thrift:"extentNotFoundError,1" json:"extentNotFoundError,omitempty"`
	RequestError        *BadStoreRequestError `thrift:"requestError,2" json:"requestError,omitempty"`
	ServiceError        *StoreServiceError    `thrift:"serviceError,3" json:"serviceError,omitempty"`
}

func NewBStoreRemoteReplicateExtentResult() *BStoreRemoteReplicateExtentResult {
	return &BStoreRemoteReplicateExtentResult{}
}

var BStoreRemoteReplicateExtentResult_ExtentNotFoundError_DEFAULT *ExtentNotFoundError

func (p *BStoreRemoteReplicateExtentResult) GetExtentNotFoundError() *ExtentNotFoundError {
	if !p.IsSetExtentNotFoundError() {
		return BStoreRemoteReplicateExtentResult_ExtentNotFoundError_DEFAULT
	}
	return p.ExtentNotFoundError
}

var BStoreRemoteReplicateExtentResult_RequestError_DEFAULT *BadStoreRequestError

func (p *BStoreRemoteReplicateExtentResult) GetRequestError() *BadStoreRequestError {
	if !p.IsSetRequestError() {
		return BStoreRemoteReplicateExtentResult_RequestError_DEFAULT
	}
	return p.RequestError
}

var BStoreRemoteReplicateExtentResult_ServiceError_DEFAULT *StoreServiceError

func (p *BStoreRemoteReplicateExtentResult) GetServiceError() *StoreServiceError {
	if !p.IsSetServiceError() {
		return BStoreRemoteReplicateExtentResult_ServiceError_DEFAULT
	}
	return p.ServiceError
}
func (p *BStoreRemoteReplicateExtentResult) IsSetExtentNotFoundError() bool {
	return p.ExtentNotFoundError != nil
}

func (p *BStoreRemoteReplicateExtentResult) IsSetRequestError() bool {
	return p.RequestError != nil
}

func (p *BStoreRemoteReplicateExtentResult) IsSetServiceError() bool {
	return p.ServiceError != nil
}

func (p *BStoreRemoteReplicateExtentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BStoreRemoteReplicateExtentResult) readField1(iprot thrift.TProtocol) error {
	p.ExtentNotFoundError = &ExtentNotFoundError{}
	if err := p.ExtentNotFoundError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExtentNotFoundError), err)
	}
	return nil
}

func (p *BStoreRemoteReplicateExtentResult) readField2(iprot thrift.TProtocol) error {
	p.RequestError = &BadStoreRequestError{}
	if err := p.RequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
	}
	return nil
}

func (p *BStoreRemoteReplicateExtentResult) readField3(iprot thrift.TProtocol) error {
	p.ServiceError = &StoreServiceError{}
	if err := p.ServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServiceError), err)
	}
	return nil
}

func (p *BStoreRemoteReplicateExtentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("remoteReplicateExtent_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BStoreRemoteReplicateExtentResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtentNotFoundError() {
		if err := oprot.WriteFieldBegin("extentNotFoundError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentNotFoundError: ", p), err)
		}
		if err := p.ExtentNotFoundError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExtentNotFoundError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentNotFoundError: ", p), err)
		}
	}
	return err
}

func (p *BStoreRemoteReplicateExtentResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestError() {
		if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err)
		}
		if err := p.RequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err)
		}
	}
	return err
}

func (p *BStoreRemoteReplicateExtentResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceError() {
		if err := oprot.WriteFieldBegin("serviceError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serviceError: ", p), err)
		}
		if err := p.ServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serviceError: ", p), err)
		}
	}
	return err
}

func (p *BStoreRemoteReplicateExtentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BStoreRemoteReplicateExtentResult(%+v)", *p)
}
